{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/hexo-material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/mathjax.js","path":"js/mathjax.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/img/icon.png","path":"img/icon.png","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ba9cda575a0bba1218ccf2b18e741e9f26bb960e","modified":1498141884000},{"_id":"source/CNAME","hash":"021dfe8deafedc694ee2b5ea0c414cea400c3f09","modified":1495810615000},{"_id":"themes/hexo-material/.DS_Store","hash":"0bbbd6db6699b53d330d7ba4afddb1f1b76ed211","modified":1495548523000},{"_id":"themes/hexo-material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1495546114000},{"_id":"themes/hexo-material/.npmignore","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1495546114000},{"_id":"themes/hexo-material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1495546114000},{"_id":"themes/hexo-material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1495546114000},{"_id":"themes/hexo-material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1495546114000},{"_id":"themes/hexo-material/README.md","hash":"fc8798c290e97352cb62bf4005aa8625245ec7e8","modified":1495546114000},{"_id":"themes/hexo-material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1495546114000},{"_id":"themes/hexo-material/_config.yml","hash":"9660db18f8a7f9479d22ad00bc2eb729212b658a","modified":1497711575000},{"_id":"themes/hexo-material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1495546114000},{"_id":"themes/hexo-material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1495546114000},{"_id":"themes/hexo-material/package.json","hash":"9dcce730ce012285c86551b105bb35991cbdce2c","modified":1495546114000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1495547419000},{"_id":"source/_posts/2017-WWDC.md","hash":"ea3be1edc8692af45d4a3f82e2b257b7db93f037","modified":1497711575000},{"_id":"source/_posts/GCD小结.md","hash":"505a442a610ca5f2476590bdbdb4766645ef4b92","modified":1497711575000},{"_id":"source/_posts/GIF的秘密.md","hash":"19e41465312a7f89d27678e227d0821ee83b1b58","modified":1497711575000},{"_id":"source/_posts/NSPredicate-使用小结.md","hash":"7ba4cc1ce1ff6e8a21f6fdd4b1c4921de12cb001","modified":1497711575000},{"_id":"source/_posts/RSA加密小结.md","hash":"b562e69f816f5e133852df240bce5138a290c170","modified":1497711575000},{"_id":"source/_posts/OC中的load和initialize方法.md","hash":"7208c075d0971c30f9dabd9d3506af6e449ae5af","modified":1497711575000},{"_id":"source/_posts/HTTPS小解析.md","hash":"a1e931e62bf31916e90261fc748a6490ab8a232e","modified":1497711645000},{"_id":"source/_posts/排序算法.md","hash":"ca9e51a30df57630913acc6cd6cf09b9a0eda05a","modified":1497711575000},{"_id":"source/_posts/《招聘一个靠谱的iOS》面试题参考答案（下）.md","hash":"54e94326d12edad693779f5951480df1a8f47022","modified":1497711575000},{"_id":"source/_posts/给你.md","hash":"6bdf9414f1a3558caa5902f1faba8af08aee77f1","modified":1498142140000},{"_id":"source/_posts/iOS常用工具方法.md","hash":"2b6084b1fb1d2bc38acac4da7eeb6ef5f73da25c","modified":1497711575000},{"_id":"source/_posts/我是不懂浪漫.md","hash":"6c925d565546d47346ae20a6d0afdba7665bb2d8","modified":1497711575000},{"_id":"source/about/index.md","hash":"2e79066ef1d19afe76f0afda88ad815205b0bfe6","modified":1498055075000},{"_id":"source/_posts/玩转iOS中UITextField的placeholder颜色.md","hash":"26326bdb4131e3ac3d8e046ecee3512d6f9861d8","modified":1497711575000},{"_id":"themes/hexo-material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1495546114000},{"_id":"themes/hexo-material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1495546114000},{"_id":"themes/hexo-material/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1495546333000},{"_id":"themes/hexo-material/languages/ar.yml","hash":"6df33c661d97cb096a2b8a338fd42c6b7cf72e19","modified":1495546114000},{"_id":"themes/hexo-material/languages/de.yml","hash":"d7483dc78b2477de3f1d5b4675ff12f2bd47b937","modified":1495546114000},{"_id":"themes/hexo-material/languages/en.yml","hash":"518822aada4fbe8f5af85243d5e0b73b79a288d3","modified":1495546114000},{"_id":"themes/hexo-material/languages/fr.yml","hash":"dd8c477e656c50e9dced6b7f439d284392213d2b","modified":1495546114000},{"_id":"themes/hexo-material/languages/es.yml","hash":"e24ab8de3d9cd71548adefa11b179ab0c6e3dd2c","modified":1495546114000},{"_id":"themes/hexo-material/languages/ms.yml","hash":"c78fd5335e9008e1195c5784b597b68c1d39429a","modified":1495546114000},{"_id":"themes/hexo-material/languages/ja.yml","hash":"062cfff0e32bdb64f27f6f18e552d118eabdf95a","modified":1495546114000},{"_id":"themes/hexo-material/languages/pt-BR.yml","hash":"ce712c6d79c3d3243b5ae189d2fa7c0adfcb8a25","modified":1495546114000},{"_id":"themes/hexo-material/languages/zh-CN.yml","hash":"7e1acb427a8f24753d2583368db05355837b8e2d","modified":1495546114000},{"_id":"themes/hexo-material/languages/zh-TW.yml","hash":"cbd420929699cf6be1d05b211a151e17e87dfc87","modified":1495546114000},{"_id":"source/_posts/《招聘一个靠谱的iOS》面试题参考答案（上）.md","hash":"35e7baaf8dc0e61c7024b593e0de2a88a3b95583","modified":1497711575000},{"_id":"themes/hexo-material/layout/layout.ejs","hash":"0a5926ca361e8ce1bb4aadab112ba3b486f21716","modified":1495546114000},{"_id":"themes/hexo-material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1495546114000},{"_id":"themes/hexo-material/layout/post.ejs","hash":"3d4f506e8def5b776a904dcfefe9ac1eca3fae76","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495546114000},{"_id":"themes/hexo-material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1495546114000},{"_id":"themes/hexo-material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1495546114000},{"_id":"themes/hexo-material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1495546114000},{"_id":"themes/hexo-material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1495546114000},{"_id":"themes/hexo-material/source/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1495546114000},{"_id":"themes/hexo-material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1495546114000},{"_id":"themes/hexo-material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1495546114000},{"_id":"themes/hexo-material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1495546114000},{"_id":"themes/hexo-material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1495546114000},{"_id":"themes/hexo-material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1495546114000},{"_id":"themes/hexo-material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1495546114000},{"_id":"themes/hexo-material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1495546114000},{"_id":"themes/hexo-material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1495546114000},{"_id":"themes/hexo-material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1495546114000},{"_id":"themes/hexo-material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1495546114000},{"_id":"themes/hexo-material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"27acecc8a603a5dc7ccd9e08bd7084439b15f6ec","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"5c46780e439d6ae86e602ad41fe178b288cab9c0","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Paradox-post-info.ejs","hash":"b5d558738b27ba16fef80399cc56a50e26c49f26","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/comment.ejs","hash":"82a5f8dc6855d0d25ddfafd1a7ecce46da8208f2","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/blog_info.ejs","hash":"c4aaeebf103dc5131ca2fe5039ae92e40fe86a29","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/config_css.ejs","hash":"e1e9ae721a0f513848dcadfcd351fefbad524bee","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/footer-left.ejs","hash":"be73b6e10da780defc535ad4503129be8eb2befc","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/footer-option.ejs","hash":"5214273ce0a7888a3c1330ca2a9bc8622ece132d","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/footer.ejs","hash":"a794e79790594be252d6528631f378c063025d8d","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/footer_top.ejs","hash":"dfcb4d7fc0ee401613f7fa2ef22614e3e4ba3305","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/head.ejs","hash":"f540b2f83c5d6a9120fdd4e86b6bb03a92c04913","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/import_js.ejs","hash":"f9dd945a09febf6c1b0c0decb4f256f00796dbde","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/isolate_info.ejs","hash":"89cf453c7b0efc4665f73e3670cca54b2381a0a2","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/post-info-share.ejs","hash":"2f9d670b17e7763ae595593e9881284dc6c1bada","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/sidebar-footer_image.ejs","hash":"ea7ff13f099ebd9a0caad26621f4a23b26b72309","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/sidebar-navigation.ejs","hash":"eaedc9861342f9f4c85bf86aed7b9b9627887bac","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1495546114000},{"_id":"themes/hexo-material/layout/_partial/toc_button.ejs","hash":"38bbf3c7b3606845905b854a1649a481a1239ddd","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/changyan.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/duoshuo.ejs","hash":"ae09d002bf5d3517ccde7f580dde20e0d47f627f","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/disqus_click.ejs","hash":"ff0fd6dfd4fe38b08c031373bee0fa0b76a41385","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/disqus.ejs","hash":"64be5e0ac74b012b91f70bbfbaec42fa663d4c13","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/leancloud-like.ejs","hash":"f0cd9956fde4437fecb01e322ff025ad307c240a","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/leancloud-views.ejs","hash":"630796a1377a3a0fc378baa377b05926f6e0b8f4","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/nprogress.ejs","hash":"7d4131dbecb4168f9b0ab536278b7e7bcafba4f2","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/mathjax.ejs","hash":"4cd6f3bc8278a6f1010f485d52e1f0ba7bf00fb4","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/page-gallery.ejs","hash":"99b5fe45a1130f961a299ed4bf35e2c4a38a0d21","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/page-links.ejs","hash":"75ce946ba9717ede360035853f5de873f00b57cb","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/page-tagcloud.ejs","hash":"e184ca7f8519936903248b7797d281fad35b9521","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/search-local-js.ejs","hash":"475c507773be23c87e63e22d8474ead06a5ebd49","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/page-timeline.ejs","hash":"9040f18f96dcc0ac44cb2b4d3b53bc6630207279","modified":1495546114000},{"_id":"themes/hexo-material/layout/_widget/search-swiftype-js.ejs","hash":"c363e3c208eae18e7c440160790fafba110fa9c9","modified":1495546114000},{"_id":"themes/hexo-material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1495546114000},{"_id":"themes/hexo-material/source/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1495546114000},{"_id":"themes/hexo-material/source/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1495546114000},{"_id":"themes/hexo-material/source/img/avatar.png","hash":"c30250810c3ec54ced20a73183cf15ad21f1509e","modified":1495548495000},{"_id":"themes/hexo-material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1495546114000},{"_id":"themes/hexo-material/source/img/sidebar_header.png","hash":"b663eb0be63536641b7f1b655fa95fb8ba64d19b","modified":1498055075000},{"_id":"themes/hexo-material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1495546114000},{"_id":"themes/hexo-material/source/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1495546114000},{"_id":"themes/hexo-material/source/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1495546114000},{"_id":"themes/hexo-material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1495546114000},{"_id":"themes/hexo-material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1495546114000},{"_id":"themes/hexo-material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1495546114000},{"_id":"themes/hexo-material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1495546114000},{"_id":"themes/hexo-material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1495546114000},{"_id":"themes/hexo-material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1495546114000},{"_id":"themes/hexo-material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1495546114000},{"_id":"themes/hexo-material/source/img/icon.png","hash":"753b59adc9686900c8a2653077d04f74737ab786","modified":1497711575000},{"_id":"themes/hexo-material/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1495546114000},{"_id":"themes/hexo-material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1495546114000},{"_id":"public/about/index.html","hash":"8923d76cc47a5850e27b6b370c30caf88b8d37cb","modified":1498142172368},{"_id":"public/2017/06/22/给你/index.html","hash":"89a90ea598f7ec1a5af42d28c9943e8ea2c26ab9","modified":1498142172368},{"_id":"public/2017/06/17/HTTPS小解析/index.html","hash":"f4a996ab405eeaf1018a2defe500b79f9d50d532","modified":1498142172374},{"_id":"public/2017/06/15/排序算法/index.html","hash":"efe46a0f79af2da042d92643f25e56423bd4950c","modified":1498142172374},{"_id":"public/2017/06/14/2017-WWDC/index.html","hash":"d1e07dae4adaa016a2e1d82503f28e1293d08e45","modified":1498142172375},{"_id":"public/2017/06/13/GIF的秘密/index.html","hash":"c16ab8f10fcaae0e12a6747dbac69aa3aee80b63","modified":1498142172375},{"_id":"public/2017/06/05/我是不懂浪漫/index.html","hash":"76ec866e12d6bad1667648d8d659c36f90063055","modified":1498142172375},{"_id":"public/2017/06/05/NSPredicate-使用小结/index.html","hash":"c738bd1d5e49df5a8ba96bf5994ada8d4099c772","modified":1498142172375},{"_id":"public/2017/06/03/iOS常用工具方法/index.html","hash":"457aeb82b40e0f6b2129e6d1ba3de4e47898491e","modified":1498142172375},{"_id":"public/2017/06/01/OC中的load和initialize方法/index.html","hash":"51b0894225b116700e0948f3b7d490cea139a47b","modified":1498142172375},{"_id":"public/2017/05/31/GCD小结/index.html","hash":"4c598f2c7065e979df9cc8834c72e32c04367138","modified":1498142172375},{"_id":"public/2017/05/26/RSA加密小结/index.html","hash":"bc7c354ce41538a7bc3ba7ce599228cc19e7cea3","modified":1498142172375},{"_id":"public/2017/05/24/《招聘一个靠谱的iOS》面试题参考答案（下）/index.html","hash":"f593254b25a9061194ab29fbbdb4522d6a9f5f9d","modified":1498142172375},{"_id":"public/2017/05/24/《招聘一个靠谱的iOS》面试题参考答案（上）/index.html","hash":"a650def464a772f3a971180c7f65483e7d7fe053","modified":1498142172375},{"_id":"public/2017/05/23/玩转iOS中UITextField的placeholder颜色/index.html","hash":"63de8cbcedc59b56b1df93ebc4b7ebbf73d312bb","modified":1498142172375},{"_id":"public/archives/index.html","hash":"e4c3f75986f22190b80a283879726ce3a13044d6","modified":1498142172375},{"_id":"public/archives/page/2/index.html","hash":"79400608934862e2f344f36bb8cba59afbeeb55d","modified":1498142172375},{"_id":"public/archives/2017/index.html","hash":"6f0127b4c81f65377d85609223ffc9a28b3fba41","modified":1498142172375},{"_id":"public/archives/2017/page/2/index.html","hash":"3966abdcf3675b8477c73654f4c8e88ed9e703c3","modified":1498142172375},{"_id":"public/archives/2017/05/index.html","hash":"0277b00973603217bd32f8182807d60608962973","modified":1498142172376},{"_id":"public/archives/2017/06/index.html","hash":"351cf3f6378ae2ac0ca83208ddef854034a488fd","modified":1498142172376},{"_id":"public/categories/技术向/index.html","hash":"cde51c248ecefa15e44bf97c78d46c252ea6ad5a","modified":1498142172376},{"_id":"public/categories/iOS合集/index.html","hash":"6492780a7e0b314b90238c450caec4c10c39554b","modified":1498142172376},{"_id":"public/categories/知识簿/index.html","hash":"fcdbd327a17bb741e17eb93f18fb6ab180a652e2","modified":1498142172376},{"_id":"public/categories/自言语/index.html","hash":"2a640d59f8dbb501b80890e135eb93c1131524dd","modified":1498142172376},{"_id":"public/categories/面试经/index.html","hash":"fe680b0a5e54101f43a5520ad3daca469756e871","modified":1498142172376},{"_id":"public/index.html","hash":"a9452a9f48065a9b09258139be7d3bf25321c9df","modified":1498142172376},{"_id":"public/page/2/index.html","hash":"b9e909f420c4715d4b242423d8e13b19a5838c39","modified":1498142172386},{"_id":"public/CNAME","hash":"021dfe8deafedc694ee2b5ea0c414cea400c3f09","modified":1498142172386},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1498142172387},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1498142172387},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1498142172387},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1498142172387},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1498142172387},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1498142172387},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1498142172387},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1498142172387},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1498142172387},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1498142172387},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1498142172387},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1498142172387},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1498142172387},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1498142172387},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1498142172387},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1498142172387},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1498142172387},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1498142172387},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1498142172387},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1498142172387},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1498142172387},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1498142172387},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1498142172387},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1498142172387},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1498142172387},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1498142172387},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1498142172387},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1498142172387},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1498142172387},{"_id":"public/css/prism.css","hash":"bed3a85b4fb53bc89e65e42ec62b9ce3e907fc80","modified":1498142172388},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1498142172395},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1498142172402},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1498142172405},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1498142172405},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1498142172405},{"_id":"public/img/avatar.png","hash":"c30250810c3ec54ced20a73183cf15ad21f1509e","modified":1498142172405},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1498142172405},{"_id":"public/img/sidebar_header.png","hash":"b663eb0be63536641b7f1b655fa95fb8ba64d19b","modified":1498142172405},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1498142172406},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1498142172406},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1498142172406},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1498142172406},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1498142172406},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1498142172406},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1498142172406},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1498142172406},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1498142172406},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1498142172406},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1498142172411},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1498142172411},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1498142172411},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1498142172411},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1498142172411},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1498142172411},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1498142172411},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1498142172411},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1498142172411},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1498142172412},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1498142172412},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1498142172412},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1498142172412},{"_id":"public/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1498142172412},{"_id":"public/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1498142172412},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1498142172412},{"_id":"public/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1498142172412},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1498142172412},{"_id":"public/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1498142172412},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1498142172412},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1498142172412},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1498142172412},{"_id":"public/img/icon.png","hash":"753b59adc9686900c8a2653077d04f74737ab786","modified":1498142172422},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1498142172427},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1498142172443},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1498142172443},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1498142172443},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1498142172444},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1498142172444},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1498142172445}],"Category":[{"name":"技术向","_id":"cj48j61l300039quzebml4awr"},{"name":"iOS合集","_id":"cj48j61ld00079quzxjk1rgki"},{"name":"知识簿","_id":"cj48j61lk000b9quzfew18wtr"},{"name":"自言语","_id":"cj48j61m3000s9quzaptnvgb3"},{"name":"面试经","_id":"cj48j61m5000v9quzo3a1i3hm"}],"Data":[],"Page":[{"title":"About Me","date":"2017-06-06T01:11:31.000Z","_content":"\n## 关于我\n----\n\nAben，\n93年生人，\n\n虽然向往自由主义，\n可一直过着不太自由的生活\n\n人已奔三，焦虑渐重\n\n\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2017-06-06 09:11:31\n---\n\n## 关于我\n----\n\nAben，\n93年生人，\n\n虽然向往自由主义，\n可一直过着不太自由的生活\n\n人已奔三，焦虑渐重\n\n\n","updated":"2017-06-21T14:24:35.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj48j61kx00019quz2er3jf36","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><hr>\n<p>Aben，<br>93年生人，</p>\n<p>虽然向往自由主义，<br>可一直过着不太自由的生活</p>\n<p>人已奔三，焦虑渐重</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><hr>\n<p>Aben，<br>93年生人，</p>\n<p>虽然向往自由主义，<br>可一直过着不太自由的生活</p>\n<p>人已奔三，焦虑渐重</p>\n"}],"Post":[{"title":"2017 WWDC","date":"2017-06-14T12:09:38.000Z","_content":"![](http://oqepgj2jp.bkt.clouddn.com/wwdc.jpg)\n\n#### 前言\n\n每年的 WWDC 都是 iOS 开发者集体高潮的时刻。第一天的 WWDC 带来了全新的 iOS 11、MacOS、tvOS 和 watchOS，革命性的 AR 和 ML 应用，以及更强的 iPad、“硬件神兽” iMac Pro 和智能音箱 HomePod。我想从开发者的角度，聊聊这次大会给我的印象和感受。欢迎大家在评论中谈谈自己的看法。\n\n#### 机器学习\n\n恐怕没有哪个词的频率高过 Machine Learning，它也是贯穿各个平台的关键词汇：watchOS 的表盘，macOS 上照片流的分类，Siri 的上下文理解、翻译、预测，手写笔记的直接识别和搜索支持，甚至 Mac 系列芯片和 Metal 的更新都表示支持机器学习。iPhone 上人脸识别甚至比 Google Pixel 快出6倍。可以看出机器学习已经完完全全得融入到了 Apple 的全平台、全应用、全硬件。\n\n而作为开发者，最令我激动的是 MLKit 的发布。苹果带来了自己的模型，你只要不停的运用数据喂养它即可。这意味着我们今后的 App 将变得更加动态化 -- 随着用户使用的增多，App 将越来越智能和强大。\n\n原来的路线是 App 发布 -> 用户反馈 -> 线下产品经理分析 -> 程序员优化 -> App 更新；今后的路线可能是 App 发布 -> 用户反馈 -> 机器学习 -> App 更新。这次 Apple 还推出了急速审核（40分钟过审，摩拜单车团队已验证）和灰度发布的两大功能，也许就是为了给机器学习能自主的更新 App 铺路。目前苹果公布的 API 主要支持视觉识别、自然语言以及游戏 AI。\n\n#### 相关链接：\n- [Build more intelligent apps with machine learning](https://developer.apple.com/machine-learning/)\n- [Machine Learning API (Core ML)](https://developer.apple.com/documentation/coreml)\n- [Introducing Core ML](https://developer.apple.com/videos/play/wwdc2017/703/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc1.png)\n\n#### 虚拟现实和增强现实\n\n这些年虚拟现实遭遇了过山车式的变化。先是遭到资本疯狂追逐，大厂如三星、HTC 重金投入，索尼也趁势推出了 PlayStation VR；然后是 Pokemon Go 的大火，仿佛虚拟现实和增强现实的元年已经到来；突然，Facebook 的 Oculus 线下200家体验店关门；乐视的虚拟现实部门倒闭走人；直到上个月的 Google IO，Day Dream 的更新也表现平平。大家都认为，VR/AR 只是个概念炒作，充其量在游戏上起到锦上添花的效果。\n直到今天。如同当年普鲁士一统德意志，苹果姗姗来迟，却在一出场就技惊四座。\nMetal 2 十倍于当前性能的图像处理技术，芯片的升级和“硬件神兽” iMac Pro 的出现，让苹果在 AR/VR 上的雄心彰显无遗。现场的星球大战 VR 以及 iOS 11 即时战场 AR 展示完全颠覆了我对 AR 的认知 -- 要知道，这可是无需沉重的头套、专用的手机，直接用 iPad 即可完成的事情。\n同样， 推出了全新的 ARKit 来供开发者使用。配合 iPhone 和 iPad 上强大的传感器以及全新的 GPU、CPU，我们开发者可以使用 ARSession 这个共享单例来在摄像头上实现 2D 和 3D 的宏大场景构建。\n\n#### 相关链接：\n\n- [Metal 2](https://developer.apple.com/metal/)\n- [Introducing ARKit](https://developer.apple.com/arkit/)\n- [Augmented Reality API (ARKit)](https://developer.apple.com/documentation/arkit)\n- [VR with Metal 2](https://developer.apple.com/videos/play/wwdc2017/603/)\n- [Introducing ARKit: Augmented Reality for iOS](https://developer.apple.com/videos/play/wwdc2017/602/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc2.png)\n\n#### Swift 和 Xcode 9\n\nSwift 毫无疑问是开发者关心的头等大事。作为苹果的野心，Swift 引入了很多非常先进的思路。然而令我有点失望的是，这次 Keynote 却对 Swift 和 Xcode 9 只字未提。\n不过从现场看来，Swift 这次的更新主要是 API 的优化上，对现有的标准库进行了11项更新和1处新增，主要集中在基本数据类型和文件系统上。\nXcode 上，目前发现的更新主要是多个模拟器同时运行（鸡肋，估计会卡），本地化，runtime debug 工具，持续集成，和源码管理。\n我们只能期待秋季的苹果发布会上 Swift 4 进一步的更新了。有意思的是，之前 Swift 之父 Christ Lattner 写了篇总结文：[Chris Lattner 对 Swift 3 的总结与对 Swift 4 的展望](https://segmentfault.com/a/1190000006909760)。另外大家如果关心 [swift-evolution](https://github.com/apple/swift-evolution) 这个开源库，Swift 4 的新功能应该可见一斑。\n\n#### 相关链接\n\n- [Introducing Swift 4](https://developer.apple.com/swift/)\n- [Localizing with Xcode 9](https://developer.apple.com/videos/play/wwdc2017/401/)\n- [What's New in Signing for Xcode and Xcode Server](https://developer.apple.com/wwdc17/403)\n- [Debugging with Xcode 9](https://developer.apple.com/videos/play/wwdc2017/404/)\n- [Finding Bugs Using Xcode Runtime Tools](https://developer.apple.com/videos/play/wwdc2017/406/)\n\n\n#### iOS 11\n\n这次 iOS 11 更新可以说是全面彻底。从基本的功能升级到 App 新功能添加，再到 iPad 平台 UI 重构。主要集中在这几个方面。\niPad\n为 iPad 全新打造的 iOS 系统，多任务、分屏 UI，Docker 工具栏。虚拟现实和增强现实的引入，以及对机器学习的支持。总体来说，消费者很开心，开发者又有新的东西可玩了。同时我觉得 iPad 越来越向 Macbook 看齐了。\n#### App\nApp Store 全新设计\nFiles 文件管理软件放出\n开放  Music\n Pay 新的转账功能，注意 NFC API 接口开放，是不是为了  Pay 更方便接入其它 App？\n 地图继续追赶 Google 地图\niMessage 花里胡哨扩展中\nHomeKit 追加音响（HomePod）支持\n\n#### 新功能\nDrag and Drop (梦想成真！)\n拍照和截屏（扫描文件这个功能真是又重创了一大波 App）\n中国特殊加成：二维码和上海话识别\n\n#### 相关 Session\n- [Updating Your App for iOS 11](https://developer.apple.com/videos/play/wwdc2017/204/)\n- [Building Great Document-based Apps in iOS 11](https://developer.apple.com/videos/play/wwdc2017/229/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc3.png)\n\n#### tvOS, watchOS 4, MacOS\n这三个平台的更新可以说是泛善可陈（除了 Machine Learning 和 AR）。基本上就是，更多的内容（Amazon 的加入）、更炫更方便的 UI（运动界面和音乐界面）、以及更拽的名字（对，新 MacOS 叫 High）。\n值得一提的是  File System。其实这个文件系统去年就宣布了，不过并不在 Keynote 之中。今年苹果用它全面替代了古老的 HFS+，取而代之的是更高的性能、更好的安全性、更多的空间。这主要是 copy-on-write 和空间共享技术的运用。\n 同时开放了 [FileProvider API](https://developer.apple.com/documentation/fileprovider)，开发者可以用它在新的  File System 基础上实现对文件各种基本操作，还能通过它对应的 extension 实现诸如 drag and drop 这样跨 App 的功能。\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc4.png)\n\n#### 相关链接\n- [What's new in  File System](https://developer.apple.com/videos/play/wwdc2017/715/)\n- [File Provider Enhancements](https://developer.apple.com/videos/play/wwdc2017/243/)\n\n#### 总结\n\n这次的 WWDC，苹果可以说是打了一个漂亮的翻身仗：在人工智能方面挑战 Google，在虚拟、增强现实方面加入战局震慑 Facebook，并重夺工业界顶峰的宝座。 watchOS 和 tvOS 的丰富，虽然进步并不明显，但好歹补足了短板。iOS 11 让 iPad 这个日趋边缘的产品逐渐焕发出了生机。后面的几天，应该会有更多精彩的 Session，给开发上带来更多的启示。\n\n","source":"_posts/2017-WWDC.md","raw":"---\ntitle: 2017 WWDC\ndate: 2017-06-14 20:09:38\ncategories: \n\t- 技术向\n---\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc.jpg)\n\n#### 前言\n\n每年的 WWDC 都是 iOS 开发者集体高潮的时刻。第一天的 WWDC 带来了全新的 iOS 11、MacOS、tvOS 和 watchOS，革命性的 AR 和 ML 应用，以及更强的 iPad、“硬件神兽” iMac Pro 和智能音箱 HomePod。我想从开发者的角度，聊聊这次大会给我的印象和感受。欢迎大家在评论中谈谈自己的看法。\n\n#### 机器学习\n\n恐怕没有哪个词的频率高过 Machine Learning，它也是贯穿各个平台的关键词汇：watchOS 的表盘，macOS 上照片流的分类，Siri 的上下文理解、翻译、预测，手写笔记的直接识别和搜索支持，甚至 Mac 系列芯片和 Metal 的更新都表示支持机器学习。iPhone 上人脸识别甚至比 Google Pixel 快出6倍。可以看出机器学习已经完完全全得融入到了 Apple 的全平台、全应用、全硬件。\n\n而作为开发者，最令我激动的是 MLKit 的发布。苹果带来了自己的模型，你只要不停的运用数据喂养它即可。这意味着我们今后的 App 将变得更加动态化 -- 随着用户使用的增多，App 将越来越智能和强大。\n\n原来的路线是 App 发布 -> 用户反馈 -> 线下产品经理分析 -> 程序员优化 -> App 更新；今后的路线可能是 App 发布 -> 用户反馈 -> 机器学习 -> App 更新。这次 Apple 还推出了急速审核（40分钟过审，摩拜单车团队已验证）和灰度发布的两大功能，也许就是为了给机器学习能自主的更新 App 铺路。目前苹果公布的 API 主要支持视觉识别、自然语言以及游戏 AI。\n\n#### 相关链接：\n- [Build more intelligent apps with machine learning](https://developer.apple.com/machine-learning/)\n- [Machine Learning API (Core ML)](https://developer.apple.com/documentation/coreml)\n- [Introducing Core ML](https://developer.apple.com/videos/play/wwdc2017/703/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc1.png)\n\n#### 虚拟现实和增强现实\n\n这些年虚拟现实遭遇了过山车式的变化。先是遭到资本疯狂追逐，大厂如三星、HTC 重金投入，索尼也趁势推出了 PlayStation VR；然后是 Pokemon Go 的大火，仿佛虚拟现实和增强现实的元年已经到来；突然，Facebook 的 Oculus 线下200家体验店关门；乐视的虚拟现实部门倒闭走人；直到上个月的 Google IO，Day Dream 的更新也表现平平。大家都认为，VR/AR 只是个概念炒作，充其量在游戏上起到锦上添花的效果。\n直到今天。如同当年普鲁士一统德意志，苹果姗姗来迟，却在一出场就技惊四座。\nMetal 2 十倍于当前性能的图像处理技术，芯片的升级和“硬件神兽” iMac Pro 的出现，让苹果在 AR/VR 上的雄心彰显无遗。现场的星球大战 VR 以及 iOS 11 即时战场 AR 展示完全颠覆了我对 AR 的认知 -- 要知道，这可是无需沉重的头套、专用的手机，直接用 iPad 即可完成的事情。\n同样， 推出了全新的 ARKit 来供开发者使用。配合 iPhone 和 iPad 上强大的传感器以及全新的 GPU、CPU，我们开发者可以使用 ARSession 这个共享单例来在摄像头上实现 2D 和 3D 的宏大场景构建。\n\n#### 相关链接：\n\n- [Metal 2](https://developer.apple.com/metal/)\n- [Introducing ARKit](https://developer.apple.com/arkit/)\n- [Augmented Reality API (ARKit)](https://developer.apple.com/documentation/arkit)\n- [VR with Metal 2](https://developer.apple.com/videos/play/wwdc2017/603/)\n- [Introducing ARKit: Augmented Reality for iOS](https://developer.apple.com/videos/play/wwdc2017/602/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc2.png)\n\n#### Swift 和 Xcode 9\n\nSwift 毫无疑问是开发者关心的头等大事。作为苹果的野心，Swift 引入了很多非常先进的思路。然而令我有点失望的是，这次 Keynote 却对 Swift 和 Xcode 9 只字未提。\n不过从现场看来，Swift 这次的更新主要是 API 的优化上，对现有的标准库进行了11项更新和1处新增，主要集中在基本数据类型和文件系统上。\nXcode 上，目前发现的更新主要是多个模拟器同时运行（鸡肋，估计会卡），本地化，runtime debug 工具，持续集成，和源码管理。\n我们只能期待秋季的苹果发布会上 Swift 4 进一步的更新了。有意思的是，之前 Swift 之父 Christ Lattner 写了篇总结文：[Chris Lattner 对 Swift 3 的总结与对 Swift 4 的展望](https://segmentfault.com/a/1190000006909760)。另外大家如果关心 [swift-evolution](https://github.com/apple/swift-evolution) 这个开源库，Swift 4 的新功能应该可见一斑。\n\n#### 相关链接\n\n- [Introducing Swift 4](https://developer.apple.com/swift/)\n- [Localizing with Xcode 9](https://developer.apple.com/videos/play/wwdc2017/401/)\n- [What's New in Signing for Xcode and Xcode Server](https://developer.apple.com/wwdc17/403)\n- [Debugging with Xcode 9](https://developer.apple.com/videos/play/wwdc2017/404/)\n- [Finding Bugs Using Xcode Runtime Tools](https://developer.apple.com/videos/play/wwdc2017/406/)\n\n\n#### iOS 11\n\n这次 iOS 11 更新可以说是全面彻底。从基本的功能升级到 App 新功能添加，再到 iPad 平台 UI 重构。主要集中在这几个方面。\niPad\n为 iPad 全新打造的 iOS 系统，多任务、分屏 UI，Docker 工具栏。虚拟现实和增强现实的引入，以及对机器学习的支持。总体来说，消费者很开心，开发者又有新的东西可玩了。同时我觉得 iPad 越来越向 Macbook 看齐了。\n#### App\nApp Store 全新设计\nFiles 文件管理软件放出\n开放  Music\n Pay 新的转账功能，注意 NFC API 接口开放，是不是为了  Pay 更方便接入其它 App？\n 地图继续追赶 Google 地图\niMessage 花里胡哨扩展中\nHomeKit 追加音响（HomePod）支持\n\n#### 新功能\nDrag and Drop (梦想成真！)\n拍照和截屏（扫描文件这个功能真是又重创了一大波 App）\n中国特殊加成：二维码和上海话识别\n\n#### 相关 Session\n- [Updating Your App for iOS 11](https://developer.apple.com/videos/play/wwdc2017/204/)\n- [Building Great Document-based Apps in iOS 11](https://developer.apple.com/videos/play/wwdc2017/229/)\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc3.png)\n\n#### tvOS, watchOS 4, MacOS\n这三个平台的更新可以说是泛善可陈（除了 Machine Learning 和 AR）。基本上就是，更多的内容（Amazon 的加入）、更炫更方便的 UI（运动界面和音乐界面）、以及更拽的名字（对，新 MacOS 叫 High）。\n值得一提的是  File System。其实这个文件系统去年就宣布了，不过并不在 Keynote 之中。今年苹果用它全面替代了古老的 HFS+，取而代之的是更高的性能、更好的安全性、更多的空间。这主要是 copy-on-write 和空间共享技术的运用。\n 同时开放了 [FileProvider API](https://developer.apple.com/documentation/fileprovider)，开发者可以用它在新的  File System 基础上实现对文件各种基本操作，还能通过它对应的 extension 实现诸如 drag and drop 这样跨 App 的功能。\n\n![](http://oqepgj2jp.bkt.clouddn.com/wwdc4.png)\n\n#### 相关链接\n- [What's new in  File System](https://developer.apple.com/videos/play/wwdc2017/715/)\n- [File Provider Enhancements](https://developer.apple.com/videos/play/wwdc2017/243/)\n\n#### 总结\n\n这次的 WWDC，苹果可以说是打了一个漂亮的翻身仗：在人工智能方面挑战 Google，在虚拟、增强现实方面加入战局震慑 Facebook，并重夺工业界顶峰的宝座。 watchOS 和 tvOS 的丰富，虽然进步并不明显，但好歹补足了短板。iOS 11 让 iPad 这个日趋边缘的产品逐渐焕发出了生机。后面的几天，应该会有更多精彩的 Session，给开发上带来更多的启示。\n\n","slug":"2017-WWDC","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61ks00009quzn09dfcnh","content":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc.jpg\" alt=\"\"></p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>每年的 WWDC 都是 iOS 开发者集体高潮的时刻。第一天的 WWDC 带来了全新的 iOS 11、MacOS、tvOS 和 watchOS，革命性的 AR 和 ML 应用，以及更强的 iPad、“硬件神兽” iMac Pro 和智能音箱 HomePod。我想从开发者的角度，聊聊这次大会给我的印象和感受。欢迎大家在评论中谈谈自己的看法。</p>\n<h4 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h4><p>恐怕没有哪个词的频率高过 Machine Learning，它也是贯穿各个平台的关键词汇：watchOS 的表盘，macOS 上照片流的分类，Siri 的上下文理解、翻译、预测，手写笔记的直接识别和搜索支持，甚至 Mac 系列芯片和 Metal 的更新都表示支持机器学习。iPhone 上人脸识别甚至比 Google Pixel 快出6倍。可以看出机器学习已经完完全全得融入到了 Apple 的全平台、全应用、全硬件。</p>\n<p>而作为开发者，最令我激动的是 MLKit 的发布。苹果带来了自己的模型，你只要不停的运用数据喂养它即可。这意味着我们今后的 App 将变得更加动态化 – 随着用户使用的增多，App 将越来越智能和强大。</p>\n<p>原来的路线是 App 发布 -&gt; 用户反馈 -&gt; 线下产品经理分析 -&gt; 程序员优化 -&gt; App 更新；今后的路线可能是 App 发布 -&gt; 用户反馈 -&gt; 机器学习 -&gt; App 更新。这次 Apple 还推出了急速审核（40分钟过审，摩拜单车团队已验证）和灰度发布的两大功能，也许就是为了给机器学习能自主的更新 App 铺路。目前苹果公布的 API 主要支持视觉识别、自然语言以及游戏 AI。</p>\n<h4 id=\"相关链接：\"><a href=\"#相关链接：\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h4><ul>\n<li><a href=\"https://developer.apple.com/machine-learning/\" target=\"_blank\" rel=\"external\">Build more intelligent apps with machine learning</a></li>\n<li><a href=\"https://developer.apple.com/documentation/coreml\" target=\"_blank\" rel=\"external\">Machine Learning API (Core ML)</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/703/\" target=\"_blank\" rel=\"external\">Introducing Core ML</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc1.png\" alt=\"\"></p>\n<h4 id=\"虚拟现实和增强现实\"><a href=\"#虚拟现实和增强现实\" class=\"headerlink\" title=\"虚拟现实和增强现实\"></a>虚拟现实和增强现实</h4><p>这些年虚拟现实遭遇了过山车式的变化。先是遭到资本疯狂追逐，大厂如三星、HTC 重金投入，索尼也趁势推出了 PlayStation VR；然后是 Pokemon Go 的大火，仿佛虚拟现实和增强现实的元年已经到来；突然，Facebook 的 Oculus 线下200家体验店关门；乐视的虚拟现实部门倒闭走人；直到上个月的 Google IO，Day Dream 的更新也表现平平。大家都认为，VR/AR 只是个概念炒作，充其量在游戏上起到锦上添花的效果。<br>直到今天。如同当年普鲁士一统德意志，苹果姗姗来迟，却在一出场就技惊四座。<br>Metal 2 十倍于当前性能的图像处理技术，芯片的升级和“硬件神兽” iMac Pro 的出现，让苹果在 AR/VR 上的雄心彰显无遗。现场的星球大战 VR 以及 iOS 11 即时战场 AR 展示完全颠覆了我对 AR 的认知 – 要知道，这可是无需沉重的头套、专用的手机，直接用 iPad 即可完成的事情。<br>同样， 推出了全新的 ARKit 来供开发者使用。配合 iPhone 和 iPad 上强大的传感器以及全新的 GPU、CPU，我们开发者可以使用 ARSession 这个共享单例来在摄像头上实现 2D 和 3D 的宏大场景构建。</p>\n<h4 id=\"相关链接：-1\"><a href=\"#相关链接：-1\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h4><ul>\n<li><a href=\"https://developer.apple.com/metal/\" target=\"_blank\" rel=\"external\">Metal 2</a></li>\n<li><a href=\"https://developer.apple.com/arkit/\" target=\"_blank\" rel=\"external\">Introducing ARKit</a></li>\n<li><a href=\"https://developer.apple.com/documentation/arkit\" target=\"_blank\" rel=\"external\">Augmented Reality API (ARKit)</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/603/\" target=\"_blank\" rel=\"external\">VR with Metal 2</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/602/\" target=\"_blank\" rel=\"external\">Introducing ARKit: Augmented Reality for iOS</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc2.png\" alt=\"\"></p>\n<h4 id=\"Swift-和-Xcode-9\"><a href=\"#Swift-和-Xcode-9\" class=\"headerlink\" title=\"Swift 和 Xcode 9\"></a>Swift 和 Xcode 9</h4><p>Swift 毫无疑问是开发者关心的头等大事。作为苹果的野心，Swift 引入了很多非常先进的思路。然而令我有点失望的是，这次 Keynote 却对 Swift 和 Xcode 9 只字未提。<br>不过从现场看来，Swift 这次的更新主要是 API 的优化上，对现有的标准库进行了11项更新和1处新增，主要集中在基本数据类型和文件系统上。<br>Xcode 上，目前发现的更新主要是多个模拟器同时运行（鸡肋，估计会卡），本地化，runtime debug 工具，持续集成，和源码管理。<br>我们只能期待秋季的苹果发布会上 Swift 4 进一步的更新了。有意思的是，之前 Swift 之父 Christ Lattner 写了篇总结文：<a href=\"https://segmentfault.com/a/1190000006909760\" target=\"_blank\" rel=\"external\">Chris Lattner 对 Swift 3 的总结与对 Swift 4 的展望</a>。另外大家如果关心 <a href=\"https://github.com/apple/swift-evolution\" target=\"_blank\" rel=\"external\">swift-evolution</a> 这个开源库，Swift 4 的新功能应该可见一斑。</p>\n<h4 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h4><ul>\n<li><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"external\">Introducing Swift 4</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/401/\" target=\"_blank\" rel=\"external\">Localizing with Xcode 9</a></li>\n<li><a href=\"https://developer.apple.com/wwdc17/403\" target=\"_blank\" rel=\"external\">What’s New in Signing for Xcode and Xcode Server</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/404/\" target=\"_blank\" rel=\"external\">Debugging with Xcode 9</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/406/\" target=\"_blank\" rel=\"external\">Finding Bugs Using Xcode Runtime Tools</a></li>\n</ul>\n<h4 id=\"iOS-11\"><a href=\"#iOS-11\" class=\"headerlink\" title=\"iOS 11\"></a>iOS 11</h4><p>这次 iOS 11 更新可以说是全面彻底。从基本的功能升级到 App 新功能添加，再到 iPad 平台 UI 重构。主要集中在这几个方面。<br>iPad<br>为 iPad 全新打造的 iOS 系统，多任务、分屏 UI，Docker 工具栏。虚拟现实和增强现实的引入，以及对机器学习的支持。总体来说，消费者很开心，开发者又有新的东西可玩了。同时我觉得 iPad 越来越向 Macbook 看齐了。</p>\n<h4 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h4><p>App Store 全新设计<br>Files 文件管理软件放出<br>开放  Music<br> Pay 新的转账功能，注意 NFC API 接口开放，是不是为了  Pay 更方便接入其它 App？<br> 地图继续追赶 Google 地图<br>iMessage 花里胡哨扩展中<br>HomeKit 追加音响（HomePod）支持</p>\n<h4 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h4><p>Drag and Drop (梦想成真！)<br>拍照和截屏（扫描文件这个功能真是又重创了一大波 App）<br>中国特殊加成：二维码和上海话识别</p>\n<h4 id=\"相关-Session\"><a href=\"#相关-Session\" class=\"headerlink\" title=\"相关 Session\"></a>相关 Session</h4><ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/204/\" target=\"_blank\" rel=\"external\">Updating Your App for iOS 11</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/229/\" target=\"_blank\" rel=\"external\">Building Great Document-based Apps in iOS 11</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc3.png\" alt=\"\"></p>\n<h4 id=\"tvOS-watchOS-4-MacOS\"><a href=\"#tvOS-watchOS-4-MacOS\" class=\"headerlink\" title=\"tvOS, watchOS 4, MacOS\"></a>tvOS, watchOS 4, MacOS</h4><p>这三个平台的更新可以说是泛善可陈（除了 Machine Learning 和 AR）。基本上就是，更多的内容（Amazon 的加入）、更炫更方便的 UI（运动界面和音乐界面）、以及更拽的名字（对，新 MacOS 叫 High）。<br>值得一提的是  File System。其实这个文件系统去年就宣布了，不过并不在 Keynote 之中。今年苹果用它全面替代了古老的 HFS+，取而代之的是更高的性能、更好的安全性、更多的空间。这主要是 copy-on-write 和空间共享技术的运用。<br> 同时开放了 <a href=\"https://developer.apple.com/documentation/fileprovider\" target=\"_blank\" rel=\"external\">FileProvider API</a>，开发者可以用它在新的  File System 基础上实现对文件各种基本操作，还能通过它对应的 extension 实现诸如 drag and drop 这样跨 App 的功能。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc4.png\" alt=\"\"></p>\n<h4 id=\"相关链接-1\"><a href=\"#相关链接-1\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h4><ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/715/\" target=\"_blank\" rel=\"external\">What’s new in  File System</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/243/\" target=\"_blank\" rel=\"external\">File Provider Enhancements</a></li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这次的 WWDC，苹果可以说是打了一个漂亮的翻身仗：在人工智能方面挑战 Google，在虚拟、增强现实方面加入战局震慑 Facebook，并重夺工业界顶峰的宝座。 watchOS 和 tvOS 的丰富，虽然进步并不明显，但好歹补足了短板。iOS 11 让 iPad 这个日趋边缘的产品逐渐焕发出了生机。后面的几天，应该会有更多精彩的 Session，给开发上带来更多的启示。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc.jpg\" alt=\"\"></p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>每年的 WWDC 都是 iOS 开发者集体高潮的时刻。第一天的 WWDC 带来了全新的 iOS 11、MacOS、tvOS 和 watchOS，革命性的 AR 和 ML 应用，以及更强的 iPad、“硬件神兽” iMac Pro 和智能音箱 HomePod。我想从开发者的角度，聊聊这次大会给我的印象和感受。欢迎大家在评论中谈谈自己的看法。</p>\n<h4 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h4><p>恐怕没有哪个词的频率高过 Machine Learning，它也是贯穿各个平台的关键词汇：watchOS 的表盘，macOS 上照片流的分类，Siri 的上下文理解、翻译、预测，手写笔记的直接识别和搜索支持，甚至 Mac 系列芯片和 Metal 的更新都表示支持机器学习。iPhone 上人脸识别甚至比 Google Pixel 快出6倍。可以看出机器学习已经完完全全得融入到了 Apple 的全平台、全应用、全硬件。</p>\n<p>而作为开发者，最令我激动的是 MLKit 的发布。苹果带来了自己的模型，你只要不停的运用数据喂养它即可。这意味着我们今后的 App 将变得更加动态化 – 随着用户使用的增多，App 将越来越智能和强大。</p>\n<p>原来的路线是 App 发布 -&gt; 用户反馈 -&gt; 线下产品经理分析 -&gt; 程序员优化 -&gt; App 更新；今后的路线可能是 App 发布 -&gt; 用户反馈 -&gt; 机器学习 -&gt; App 更新。这次 Apple 还推出了急速审核（40分钟过审，摩拜单车团队已验证）和灰度发布的两大功能，也许就是为了给机器学习能自主的更新 App 铺路。目前苹果公布的 API 主要支持视觉识别、自然语言以及游戏 AI。</p>\n<h4 id=\"相关链接：\"><a href=\"#相关链接：\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h4><ul>\n<li><a href=\"https://developer.apple.com/machine-learning/\" target=\"_blank\" rel=\"external\">Build more intelligent apps with machine learning</a></li>\n<li><a href=\"https://developer.apple.com/documentation/coreml\" target=\"_blank\" rel=\"external\">Machine Learning API (Core ML)</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/703/\" target=\"_blank\" rel=\"external\">Introducing Core ML</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc1.png\" alt=\"\"></p>\n<h4 id=\"虚拟现实和增强现实\"><a href=\"#虚拟现实和增强现实\" class=\"headerlink\" title=\"虚拟现实和增强现实\"></a>虚拟现实和增强现实</h4><p>这些年虚拟现实遭遇了过山车式的变化。先是遭到资本疯狂追逐，大厂如三星、HTC 重金投入，索尼也趁势推出了 PlayStation VR；然后是 Pokemon Go 的大火，仿佛虚拟现实和增强现实的元年已经到来；突然，Facebook 的 Oculus 线下200家体验店关门；乐视的虚拟现实部门倒闭走人；直到上个月的 Google IO，Day Dream 的更新也表现平平。大家都认为，VR/AR 只是个概念炒作，充其量在游戏上起到锦上添花的效果。<br>直到今天。如同当年普鲁士一统德意志，苹果姗姗来迟，却在一出场就技惊四座。<br>Metal 2 十倍于当前性能的图像处理技术，芯片的升级和“硬件神兽” iMac Pro 的出现，让苹果在 AR/VR 上的雄心彰显无遗。现场的星球大战 VR 以及 iOS 11 即时战场 AR 展示完全颠覆了我对 AR 的认知 – 要知道，这可是无需沉重的头套、专用的手机，直接用 iPad 即可完成的事情。<br>同样， 推出了全新的 ARKit 来供开发者使用。配合 iPhone 和 iPad 上强大的传感器以及全新的 GPU、CPU，我们开发者可以使用 ARSession 这个共享单例来在摄像头上实现 2D 和 3D 的宏大场景构建。</p>\n<h4 id=\"相关链接：-1\"><a href=\"#相关链接：-1\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h4><ul>\n<li><a href=\"https://developer.apple.com/metal/\" target=\"_blank\" rel=\"external\">Metal 2</a></li>\n<li><a href=\"https://developer.apple.com/arkit/\" target=\"_blank\" rel=\"external\">Introducing ARKit</a></li>\n<li><a href=\"https://developer.apple.com/documentation/arkit\" target=\"_blank\" rel=\"external\">Augmented Reality API (ARKit)</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/603/\" target=\"_blank\" rel=\"external\">VR with Metal 2</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/602/\" target=\"_blank\" rel=\"external\">Introducing ARKit: Augmented Reality for iOS</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc2.png\" alt=\"\"></p>\n<h4 id=\"Swift-和-Xcode-9\"><a href=\"#Swift-和-Xcode-9\" class=\"headerlink\" title=\"Swift 和 Xcode 9\"></a>Swift 和 Xcode 9</h4><p>Swift 毫无疑问是开发者关心的头等大事。作为苹果的野心，Swift 引入了很多非常先进的思路。然而令我有点失望的是，这次 Keynote 却对 Swift 和 Xcode 9 只字未提。<br>不过从现场看来，Swift 这次的更新主要是 API 的优化上，对现有的标准库进行了11项更新和1处新增，主要集中在基本数据类型和文件系统上。<br>Xcode 上，目前发现的更新主要是多个模拟器同时运行（鸡肋，估计会卡），本地化，runtime debug 工具，持续集成，和源码管理。<br>我们只能期待秋季的苹果发布会上 Swift 4 进一步的更新了。有意思的是，之前 Swift 之父 Christ Lattner 写了篇总结文：<a href=\"https://segmentfault.com/a/1190000006909760\" target=\"_blank\" rel=\"external\">Chris Lattner 对 Swift 3 的总结与对 Swift 4 的展望</a>。另外大家如果关心 <a href=\"https://github.com/apple/swift-evolution\" target=\"_blank\" rel=\"external\">swift-evolution</a> 这个开源库，Swift 4 的新功能应该可见一斑。</p>\n<h4 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h4><ul>\n<li><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"external\">Introducing Swift 4</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/401/\" target=\"_blank\" rel=\"external\">Localizing with Xcode 9</a></li>\n<li><a href=\"https://developer.apple.com/wwdc17/403\" target=\"_blank\" rel=\"external\">What’s New in Signing for Xcode and Xcode Server</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/404/\" target=\"_blank\" rel=\"external\">Debugging with Xcode 9</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/406/\" target=\"_blank\" rel=\"external\">Finding Bugs Using Xcode Runtime Tools</a></li>\n</ul>\n<h4 id=\"iOS-11\"><a href=\"#iOS-11\" class=\"headerlink\" title=\"iOS 11\"></a>iOS 11</h4><p>这次 iOS 11 更新可以说是全面彻底。从基本的功能升级到 App 新功能添加，再到 iPad 平台 UI 重构。主要集中在这几个方面。<br>iPad<br>为 iPad 全新打造的 iOS 系统，多任务、分屏 UI，Docker 工具栏。虚拟现实和增强现实的引入，以及对机器学习的支持。总体来说，消费者很开心，开发者又有新的东西可玩了。同时我觉得 iPad 越来越向 Macbook 看齐了。</p>\n<h4 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h4><p>App Store 全新设计<br>Files 文件管理软件放出<br>开放  Music<br> Pay 新的转账功能，注意 NFC API 接口开放，是不是为了  Pay 更方便接入其它 App？<br> 地图继续追赶 Google 地图<br>iMessage 花里胡哨扩展中<br>HomeKit 追加音响（HomePod）支持</p>\n<h4 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h4><p>Drag and Drop (梦想成真！)<br>拍照和截屏（扫描文件这个功能真是又重创了一大波 App）<br>中国特殊加成：二维码和上海话识别</p>\n<h4 id=\"相关-Session\"><a href=\"#相关-Session\" class=\"headerlink\" title=\"相关 Session\"></a>相关 Session</h4><ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/204/\" target=\"_blank\" rel=\"external\">Updating Your App for iOS 11</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/229/\" target=\"_blank\" rel=\"external\">Building Great Document-based Apps in iOS 11</a></li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc3.png\" alt=\"\"></p>\n<h4 id=\"tvOS-watchOS-4-MacOS\"><a href=\"#tvOS-watchOS-4-MacOS\" class=\"headerlink\" title=\"tvOS, watchOS 4, MacOS\"></a>tvOS, watchOS 4, MacOS</h4><p>这三个平台的更新可以说是泛善可陈（除了 Machine Learning 和 AR）。基本上就是，更多的内容（Amazon 的加入）、更炫更方便的 UI（运动界面和音乐界面）、以及更拽的名字（对，新 MacOS 叫 High）。<br>值得一提的是  File System。其实这个文件系统去年就宣布了，不过并不在 Keynote 之中。今年苹果用它全面替代了古老的 HFS+，取而代之的是更高的性能、更好的安全性、更多的空间。这主要是 copy-on-write 和空间共享技术的运用。<br> 同时开放了 <a href=\"https://developer.apple.com/documentation/fileprovider\" target=\"_blank\" rel=\"external\">FileProvider API</a>，开发者可以用它在新的  File System 基础上实现对文件各种基本操作，还能通过它对应的 extension 实现诸如 drag and drop 这样跨 App 的功能。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wwdc4.png\" alt=\"\"></p>\n<h4 id=\"相关链接-1\"><a href=\"#相关链接-1\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h4><ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/715/\" target=\"_blank\" rel=\"external\">What’s new in  File System</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2017/243/\" target=\"_blank\" rel=\"external\">File Provider Enhancements</a></li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这次的 WWDC，苹果可以说是打了一个漂亮的翻身仗：在人工智能方面挑战 Google，在虚拟、增强现实方面加入战局震慑 Facebook，并重夺工业界顶峰的宝座。 watchOS 和 tvOS 的丰富，虽然进步并不明显，但好歹补足了短板。iOS 11 让 iPad 这个日趋边缘的产品逐渐焕发出了生机。后面的几天，应该会有更多精彩的 Session，给开发上带来更多的启示。</p>\n"},{"title":"GCD小结","date":"2017-05-31T08:21:06.000Z","_content":"## Tip1.线程、任务和队列的概念\n![图一](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_1.png)\n## Tip2.异步、同步 & 并行、串行的特点\n![图二](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_2.png)\n## 小结：一条重要的准则\n\n一般来说，我们使用GCD的最大目的是在新的线程中同时执行多个任务，这意味着我们需要两项条件：\n\n - 能开启新的线程\n - 任务可以同时执行\n> 结合以上两个条件，也就等价“开启新线程的能力 + 任务同步执行的权利”，只有在满足能力与权利这两个条件的前提下，我们才可以在同时执行多个任务。\n\n![图三](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_3.png)\n\n##（一）异步执行 + 并行队列\n#### 实现代码：\n```objectivec\n//异步执行 + 并行队列\n- (void)asyncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@\"---start---\");\n\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n\n    NSLog(@\"---end---\");\n}\n\n```\n\n#### 打印结果：\n\n```objectivec\n ---start---\n  ---end---\n  任务3---<NSThread: 0x600000070f00>{number = 5, name = (null)}\n  任务2---<NSThread: 0x600000070d80>{number = 4, name = (null)}\n  任务1---<NSThread: 0x608000074100>{number = 3, name = (null)}\n```\n#### 解释\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 并行队列意味着\n - 任务之间不需要排队，且具有同时被执行的“权利”\n- 两者组合后的结果\n - 开了三个新线程\n - 函数在执行时，先打印了start和end，再回头执行这三个任务\n - 这三个任务是同时执行的，没有先后，所以打印结果是“任务3-->任务2-->任务1”\n\n#### 步骤图\n\n![图四](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_4.png)\n\n## （二）异步执行 + 串行队列\n\n#### 实现代码：\n\n```objectivec\n//异步执行 + 串行队列\n- (void)asyncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n#### 打印结果：\n\n```objectivec\n---start---\n ---end---\n任务1---<NSThread: 0x608000078480>{number = 3, name = (null)}\n任务2---<NSThread: 0x608000078480>{number = 3, name = (null)}\n任务3---<NSThread: 0x608000078480>{number = 3, name = (null)}\n\n```\n#### 解释:\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 串行队列意味着\n - 任务必须按添加进队列的顺序挨个执行\n- 两者组合后的结果\n - 开了一个新的子线程\n - 函数在执行时，先打印了start和end，再回头执行这三个任务\n - 这三个任务是按顺序执行的，所以打印结果是“任务1-->任务2-->任务3”\n\n\n#### 步骤图\n![图五](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_5.png)\n\n## （三）同步执行 + 并行队列\n#### 实现代码：\n```objectivec\n//同步执行 + 并行队列\n- (void)syncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@\"---start---\");\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n#### 打印结果：\n```objectivec\n  ---start---\n  任务1---<NSThread: 0x608000065400>{number = 1, name = main}\n  任务2---<NSThread: 0x608000065400>{number = 1, name = main}\n  任务3---<NSThread: 0x608000065400>{number = 1, name = main}\n  ---end---\n```\n\n\n- 同步执行执行意味着\n - 不能开启新的线程\n - 任务创建后必须执行完才能往下走\n- 并行队列意味着\n - 任务之间不需要排队，且具有同时被执行的“”\n- 两者组合后的结果\n - 所有任务都只能在主线程中执行\n - 函数在执行时，必须按照代码的书写顺序一行一行地执行完才能继续\n- 注意事项\n - 在这里即便是并行队列，任务可以同时执行，但是由于只存在一个主线程，所以没法把任务分发到不同的线程去同步处理，其结果就是只能在主线程里按顺序挨个挨个执行了\n\n#### 步骤图\n![图六](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_6.png)\n\n## （四）同步执行+ 串行队列\n\n#### 实现代码：\n\n```objectivec\n- (void)syncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n\n#### 打印结果：\n\n```objectivec\n---start---\n任务1---<NSThread: 0x608000065400>{number = 1, name = main}\n任务2---<NSThread: 0x608000065400>{number = 1, name = main}\n任务3---<NSThread: 0x608000065400>{number = 1, name = main}\n---end---\n```\n\n#### 解释\n\n- 这里的执行原理和步骤图跟“同步执行+并发队列”是一样的，只要是同步执行就没法开启新的线程，所以多个任务之间也一样只能按顺序来执行\n\n\n\n##（五）异步执行+主队列\n\n#### 实现代码：\n\n```objectivec\n- (void)asyncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n#### 打印结果：\n\n ```objectivec\n  ---start---\n  ---end---\n  任务1---<NSThread: 0x60800006ff40>{number = 1, name = main}\n  任务2---<NSThread: 0x60800006ff40>{number = 1, name = main}\n  任务3---<NSThread: 0x60800006ff40>{number = 1, name = main}\n ```\n\n\n#### 解释\n\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 主队列跟串行队列的区别\n - 队列中的任务一样要按顺序执行\n - 主队列中的任务必须在主线程中执行，不允许在子线程中执行\n- 以上条件组合后得出结果：\n - 所有任务都可以先跳过，之后再来“按顺序”执行\n\n#### 步骤图\n\n![图七](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_7.png)\n\n##（六）同步执行+主队列（死锁）\n\n#### 实现代码：\n\n ```objectivec\n- (void)syncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@\"---start---\");\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n ```\n\n#### 打印结果：\n\n ```objectivec\n  ---start---\n ```\n\n#### 解释\n\n- 主队列中的任务必须按顺序挨个执行\n- 任务1要等主线程有空的时候（即主队列中的所有任务执行完）才能执行\n- 主线程要执行完“打印end”的任务后才有空\n- “任务1”和“打印end”两个任务互相等待，造成死锁\n\n#### 步骤图\n![图八](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_8.png)\n\n### end.\n\n\n","source":"_posts/GCD小结.md","raw":"---\ntitle: GCD小结\ndate: 2017-05-31 16:21:06\ncategories: \n\t- iOS合集\n---\n## Tip1.线程、任务和队列的概念\n![图一](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_1.png)\n## Tip2.异步、同步 & 并行、串行的特点\n![图二](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_2.png)\n## 小结：一条重要的准则\n\n一般来说，我们使用GCD的最大目的是在新的线程中同时执行多个任务，这意味着我们需要两项条件：\n\n - 能开启新的线程\n - 任务可以同时执行\n> 结合以上两个条件，也就等价“开启新线程的能力 + 任务同步执行的权利”，只有在满足能力与权利这两个条件的前提下，我们才可以在同时执行多个任务。\n\n![图三](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_3.png)\n\n##（一）异步执行 + 并行队列\n#### 实现代码：\n```objectivec\n//异步执行 + 并行队列\n- (void)asyncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@\"---start---\");\n\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n\n    NSLog(@\"---end---\");\n}\n\n```\n\n#### 打印结果：\n\n```objectivec\n ---start---\n  ---end---\n  任务3---<NSThread: 0x600000070f00>{number = 5, name = (null)}\n  任务2---<NSThread: 0x600000070d80>{number = 4, name = (null)}\n  任务1---<NSThread: 0x608000074100>{number = 3, name = (null)}\n```\n#### 解释\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 并行队列意味着\n - 任务之间不需要排队，且具有同时被执行的“权利”\n- 两者组合后的结果\n - 开了三个新线程\n - 函数在执行时，先打印了start和end，再回头执行这三个任务\n - 这三个任务是同时执行的，没有先后，所以打印结果是“任务3-->任务2-->任务1”\n\n#### 步骤图\n\n![图四](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_4.png)\n\n## （二）异步执行 + 串行队列\n\n#### 实现代码：\n\n```objectivec\n//异步执行 + 串行队列\n- (void)asyncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n#### 打印结果：\n\n```objectivec\n---start---\n ---end---\n任务1---<NSThread: 0x608000078480>{number = 3, name = (null)}\n任务2---<NSThread: 0x608000078480>{number = 3, name = (null)}\n任务3---<NSThread: 0x608000078480>{number = 3, name = (null)}\n\n```\n#### 解释:\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 串行队列意味着\n - 任务必须按添加进队列的顺序挨个执行\n- 两者组合后的结果\n - 开了一个新的子线程\n - 函数在执行时，先打印了start和end，再回头执行这三个任务\n - 这三个任务是按顺序执行的，所以打印结果是“任务1-->任务2-->任务3”\n\n\n#### 步骤图\n![图五](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_5.png)\n\n## （三）同步执行 + 并行队列\n#### 实现代码：\n```objectivec\n//同步执行 + 并行队列\n- (void)syncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@\"---start---\");\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n#### 打印结果：\n```objectivec\n  ---start---\n  任务1---<NSThread: 0x608000065400>{number = 1, name = main}\n  任务2---<NSThread: 0x608000065400>{number = 1, name = main}\n  任务3---<NSThread: 0x608000065400>{number = 1, name = main}\n  ---end---\n```\n\n\n- 同步执行执行意味着\n - 不能开启新的线程\n - 任务创建后必须执行完才能往下走\n- 并行队列意味着\n - 任务之间不需要排队，且具有同时被执行的“”\n- 两者组合后的结果\n - 所有任务都只能在主线程中执行\n - 函数在执行时，必须按照代码的书写顺序一行一行地执行完才能继续\n- 注意事项\n - 在这里即便是并行队列，任务可以同时执行，但是由于只存在一个主线程，所以没法把任务分发到不同的线程去同步处理，其结果就是只能在主线程里按顺序挨个挨个执行了\n\n#### 步骤图\n![图六](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_6.png)\n\n## （四）同步执行+ 串行队列\n\n#### 实现代码：\n\n```objectivec\n- (void)syncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(\"标识符\", DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n\n#### 打印结果：\n\n```objectivec\n---start---\n任务1---<NSThread: 0x608000065400>{number = 1, name = main}\n任务2---<NSThread: 0x608000065400>{number = 1, name = main}\n任务3---<NSThread: 0x608000065400>{number = 1, name = main}\n---end---\n```\n\n#### 解释\n\n- 这里的执行原理和步骤图跟“同步执行+并发队列”是一样的，只要是同步执行就没法开启新的线程，所以多个任务之间也一样只能按顺序来执行\n\n\n\n##（五）异步执行+主队列\n\n#### 实现代码：\n\n```objectivec\n- (void)asyncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@\"---start---\");\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n```\n\n#### 打印结果：\n\n ```objectivec\n  ---start---\n  ---end---\n  任务1---<NSThread: 0x60800006ff40>{number = 1, name = main}\n  任务2---<NSThread: 0x60800006ff40>{number = 1, name = main}\n  任务3---<NSThread: 0x60800006ff40>{number = 1, name = main}\n ```\n\n\n#### 解释\n\n- 异步执行意味着\n - 可以开启新的线程\n - 任务可以先绕过不执行，回头再来执行\n- 主队列跟串行队列的区别\n - 队列中的任务一样要按顺序执行\n - 主队列中的任务必须在主线程中执行，不允许在子线程中执行\n- 以上条件组合后得出结果：\n - 所有任务都可以先跳过，之后再来“按顺序”执行\n\n#### 步骤图\n\n![图七](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_7.png)\n\n##（六）同步执行+主队列（死锁）\n\n#### 实现代码：\n\n ```objectivec\n- (void)syncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@\"---start---\");\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务1---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务2---%@\", [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@\"任务3---%@\", [NSThread currentThread]);\n    });\n    NSLog(@\"---end---\");\n}\n ```\n\n#### 打印结果：\n\n ```objectivec\n  ---start---\n ```\n\n#### 解释\n\n- 主队列中的任务必须按顺序挨个执行\n- 任务1要等主线程有空的时候（即主队列中的所有任务执行完）才能执行\n- 主线程要执行完“打印end”的任务后才有空\n- “任务1”和“打印end”两个任务互相等待，造成死锁\n\n#### 步骤图\n![图八](http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_8.png)\n\n### end.\n\n\n","slug":"GCD小结","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61ky00029quzleebshte","content":"<h2 id=\"Tip1-线程、任务和队列的概念\"><a href=\"#Tip1-线程、任务和队列的概念\" class=\"headerlink\" title=\"Tip1.线程、任务和队列的概念\"></a>Tip1.线程、任务和队列的概念</h2><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_1.png\" alt=\"图一\"></p>\n<h2 id=\"Tip2-异步、同步-amp-并行、串行的特点\"><a href=\"#Tip2-异步、同步-amp-并行、串行的特点\" class=\"headerlink\" title=\"Tip2.异步、同步 &amp; 并行、串行的特点\"></a>Tip2.异步、同步 &amp; 并行、串行的特点</h2><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_2.png\" alt=\"图二\"></p>\n<h2 id=\"小结：一条重要的准则\"><a href=\"#小结：一条重要的准则\" class=\"headerlink\" title=\"小结：一条重要的准则\"></a>小结：一条重要的准则</h2><p>一般来说，我们使用GCD的最大目的是在新的线程中同时执行多个任务，这意味着我们需要两项条件：</p>\n<ul>\n<li>能开启新的线程</li>\n<li>任务可以同时执行<blockquote>\n<p>结合以上两个条件，也就等价“开启新线程的能力 + 任务同步执行的权利”，只有在满足能力与权利这两个条件的前提下，我们才可以在同时执行多个任务。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_3.png\" alt=\"图三\"></p>\n<p>##（一）异步执行 + 并行队列</p>\n<h4 id=\"实现代码：\"><a href=\"#实现代码：\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//异步执行 + 并行队列</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>asyncConcurrent<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建一个并行队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_queue_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识符\"</span><span class=\"token punctuation\">,</span> DISPATCH_QUEUE_CONCURRENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用异步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：\"><a href=\"#打印结果：\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"> <span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>end<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  任务<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x600000070f00</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x600000070d80</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000074100</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>并行队列意味着<ul>\n<li>任务之间不需要排队，且具有同时被执行的“权利”</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>开了三个新线程</li>\n<li>函数在执行时，先打印了start和end，再回头执行这三个任务</li>\n<li>这三个任务是同时执行的，没有先后，所以打印结果是“任务3–&gt;任务2–&gt;任务1”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图\"><a href=\"#步骤图\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_4.png\" alt=\"图四\"></p>\n<h2 id=\"（二）异步执行-串行队列\"><a href=\"#（二）异步执行-串行队列\" class=\"headerlink\" title=\"（二）异步执行 + 串行队列\"></a>（二）异步执行 + 串行队列</h2><h4 id=\"实现代码：-1\"><a href=\"#实现代码：-1\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//异步执行 + 串行队列</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>asyncSerial<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建一个串行队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_queue_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识符\"</span><span class=\"token punctuation\">,</span> DISPATCH_QUEUE_SERIAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//使用异步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：-1\"><a href=\"#打印结果：-1\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n <span class=\"token operator\">--</span><span class=\"token operator\">-</span>end<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n任务<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000078480</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n任务<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000078480</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n任务<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000078480</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释:\"></a>解释:</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>串行队列意味着<ul>\n<li>任务必须按添加进队列的顺序挨个执行</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>开了一个新的子线程</li>\n<li>函数在执行时，先打印了start和end，再回头执行这三个任务</li>\n<li>这三个任务是按顺序执行的，所以打印结果是“任务1–&gt;任务2–&gt;任务3”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-1\"><a href=\"#步骤图-1\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_5.png\" alt=\"图五\"></p>\n<h2 id=\"（三）同步执行-并行队列\"><a href=\"#（三）同步执行-并行队列\" class=\"headerlink\" title=\"（三）同步执行 + 并行队列\"></a>（三）同步执行 + 并行队列</h2><h4 id=\"实现代码：-2\"><a href=\"#实现代码：-2\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//同步执行 + 并行队列</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>syncConcurrent<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建一个并行队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_queue_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识符\"</span><span class=\"token punctuation\">,</span> DISPATCH_QUEUE_CONCURRENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//使用同步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：-2\"><a href=\"#打印结果：-2\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  任务<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>end<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n</code></pre>\n<ul>\n<li>同步执行执行意味着<ul>\n<li>不能开启新的线程</li>\n<li>任务创建后必须执行完才能往下走</li>\n</ul>\n</li>\n<li>并行队列意味着<ul>\n<li>任务之间不需要排队，且具有同时被执行的“”</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>所有任务都只能在主线程中执行</li>\n<li>函数在执行时，必须按照代码的书写顺序一行一行地执行完才能继续</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>在这里即便是并行队列，任务可以同时执行，但是由于只存在一个主线程，所以没法把任务分发到不同的线程去同步处理，其结果就是只能在主线程里按顺序挨个挨个执行了</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-2\"><a href=\"#步骤图-2\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_6.png\" alt=\"图六\"></p>\n<h2 id=\"（四）同步执行-串行队列\"><a href=\"#（四）同步执行-串行队列\" class=\"headerlink\" title=\"（四）同步执行+ 串行队列\"></a>（四）同步执行+ 串行队列</h2><h4 id=\"实现代码：-3\"><a href=\"#实现代码：-3\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>syncSerial<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建一个串行队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_queue_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识符\"</span><span class=\"token punctuation\">,</span> DISPATCH_QUEUE_SERIAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//使用异步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：-3\"><a href=\"#打印结果：-3\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n任务<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n任务<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n任务<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x608000065400</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span>end<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n</code></pre>\n<h4 id=\"解释-2\"><a href=\"#解释-2\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>这里的执行原理和步骤图跟“同步执行+并发队列”是一样的，只要是同步执行就没法开启新的线程，所以多个任务之间也一样只能按顺序来执行</li>\n</ul>\n<p>##（五）异步执行+主队列</p>\n<h4 id=\"实现代码：-4\"><a href=\"#实现代码：-4\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>asyncMain<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取主队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//使用异步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：-4\"><a href=\"#打印结果：-4\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>end<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  任务<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x60800006ff40</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x60800006ff40</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n  任务<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span>NSThread<span class=\"token punctuation\">:</span> <span class=\"token number\">0x60800006ff40</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> main<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"解释-3\"><a href=\"#解释-3\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>主队列跟串行队列的区别<ul>\n<li>队列中的任务一样要按顺序执行</li>\n<li>主队列中的任务必须在主线程中执行，不允许在子线程中执行</li>\n</ul>\n</li>\n<li>以上条件组合后得出结果：<ul>\n<li>所有任务都可以先跳过，之后再来“按顺序”执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-3\"><a href=\"#步骤图-3\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_7.png\" alt=\"图七\"></p>\n<p>##（六）同步执行+主队列（死锁）</p>\n<h4 id=\"实现代码：-5\"><a href=\"#实现代码：-5\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>syncMain<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取主队列</span>\n    dispatch_queue_t queue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//使用同步函数封装三个任务</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务1---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务2---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_sync</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"任务3---%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSThread currentThread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"---end---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"打印结果：-5\"><a href=\"#打印结果：-5\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">  <span class=\"token operator\">--</span><span class=\"token operator\">-</span>start<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n</code></pre>\n<h4 id=\"解释-4\"><a href=\"#解释-4\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>主队列中的任务必须按顺序挨个执行</li>\n<li>任务1要等主线程有空的时候（即主队列中的所有任务执行完）才能执行</li>\n<li>主线程要执行完“打印end”的任务后才有空</li>\n<li>“任务1”和“打印end”两个任务互相等待，造成死锁</li>\n</ul>\n<h4 id=\"步骤图-4\"><a href=\"#步骤图-4\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_8.png\" alt=\"图八\"></p>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end.\"></a>end.</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Tip1-线程、任务和队列的概念\"><a href=\"#Tip1-线程、任务和队列的概念\" class=\"headerlink\" title=\"Tip1.线程、任务和队列的概念\"></a>Tip1.线程、任务和队列的概念</h2><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_1.png\" alt=\"图一\"></p>\n<h2 id=\"Tip2-异步、同步-amp-并行、串行的特点\"><a href=\"#Tip2-异步、同步-amp-并行、串行的特点\" class=\"headerlink\" title=\"Tip2.异步、同步 &amp; 并行、串行的特点\"></a>Tip2.异步、同步 &amp; 并行、串行的特点</h2><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_2.png\" alt=\"图二\"></p>\n<h2 id=\"小结：一条重要的准则\"><a href=\"#小结：一条重要的准则\" class=\"headerlink\" title=\"小结：一条重要的准则\"></a>小结：一条重要的准则</h2><p>一般来说，我们使用GCD的最大目的是在新的线程中同时执行多个任务，这意味着我们需要两项条件：</p>\n<ul>\n<li>能开启新的线程</li>\n<li>任务可以同时执行<blockquote>\n<p>结合以上两个条件，也就等价“开启新线程的能力 + 任务同步执行的权利”，只有在满足能力与权利这两个条件的前提下，我们才可以在同时执行多个任务。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_3.png\" alt=\"图三\"></p>\n<p>##（一）异步执行 + 并行队列</p>\n<h4 id=\"实现代码：\"><a href=\"#实现代码：\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">//异步执行 + 并行队列\n- (void)asyncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(&quot;标识符&quot;, DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@&quot;---start---&quot;);\n\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：\"><a href=\"#打印结果：\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\"> ---start---\n  ---end---\n  任务3---&lt;NSThread: 0x600000070f00&gt;{number = 5, name = (null)}\n  任务2---&lt;NSThread: 0x600000070d80&gt;{number = 4, name = (null)}\n  任务1---&lt;NSThread: 0x608000074100&gt;{number = 3, name = (null)}\n</code></pre>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>并行队列意味着<ul>\n<li>任务之间不需要排队，且具有同时被执行的“权利”</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>开了三个新线程</li>\n<li>函数在执行时，先打印了start和end，再回头执行这三个任务</li>\n<li>这三个任务是同时执行的，没有先后，所以打印结果是“任务3–&gt;任务2–&gt;任务1”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图\"><a href=\"#步骤图\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_4.png\" alt=\"图四\"></p>\n<h2 id=\"（二）异步执行-串行队列\"><a href=\"#（二）异步执行-串行队列\" class=\"headerlink\" title=\"（二）异步执行 + 串行队列\"></a>（二）异步执行 + 串行队列</h2><h4 id=\"实现代码：-1\"><a href=\"#实现代码：-1\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">//异步执行 + 串行队列\n- (void)asyncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(&quot;标识符&quot;, DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@&quot;---start---&quot;);\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：-1\"><a href=\"#打印结果：-1\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\">---start---\n ---end---\n任务1---&lt;NSThread: 0x608000078480&gt;{number = 3, name = (null)}\n任务2---&lt;NSThread: 0x608000078480&gt;{number = 3, name = (null)}\n任务3---&lt;NSThread: 0x608000078480&gt;{number = 3, name = (null)}\n</code></pre>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释:\"></a>解释:</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>串行队列意味着<ul>\n<li>任务必须按添加进队列的顺序挨个执行</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>开了一个新的子线程</li>\n<li>函数在执行时，先打印了start和end，再回头执行这三个任务</li>\n<li>这三个任务是按顺序执行的，所以打印结果是“任务1–&gt;任务2–&gt;任务3”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-1\"><a href=\"#步骤图-1\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_5.png\" alt=\"图五\"></p>\n<h2 id=\"（三）同步执行-并行队列\"><a href=\"#（三）同步执行-并行队列\" class=\"headerlink\" title=\"（三）同步执行 + 并行队列\"></a>（三）同步执行 + 并行队列</h2><h4 id=\"实现代码：-2\"><a href=\"#实现代码：-2\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">//同步执行 + 并行队列\n- (void)syncConcurrent{\n    //创建一个并行队列\n    dispatch_queue_t queue = dispatch_queue_create(&quot;标识符&quot;, DISPATCH_QUEUE_CONCURRENT);\n\n    NSLog(@&quot;---start---&quot;);\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：-2\"><a href=\"#打印结果：-2\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\">  ---start---\n  任务1---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n  任务2---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n  任务3---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n  ---end---\n</code></pre>\n<ul>\n<li>同步执行执行意味着<ul>\n<li>不能开启新的线程</li>\n<li>任务创建后必须执行完才能往下走</li>\n</ul>\n</li>\n<li>并行队列意味着<ul>\n<li>任务之间不需要排队，且具有同时被执行的“”</li>\n</ul>\n</li>\n<li>两者组合后的结果<ul>\n<li>所有任务都只能在主线程中执行</li>\n<li>函数在执行时，必须按照代码的书写顺序一行一行地执行完才能继续</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>在这里即便是并行队列，任务可以同时执行，但是由于只存在一个主线程，所以没法把任务分发到不同的线程去同步处理，其结果就是只能在主线程里按顺序挨个挨个执行了</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-2\"><a href=\"#步骤图-2\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_6.png\" alt=\"图六\"></p>\n<h2 id=\"（四）同步执行-串行队列\"><a href=\"#（四）同步执行-串行队列\" class=\"headerlink\" title=\"（四）同步执行+ 串行队列\"></a>（四）同步执行+ 串行队列</h2><h4 id=\"实现代码：-3\"><a href=\"#实现代码：-3\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">- (void)syncSerial{\n    //创建一个串行队列\n    dispatch_queue_t queue = dispatch_queue_create(&quot;标识符&quot;, DISPATCH_QUEUE_SERIAL);\n\n    NSLog(@&quot;---start---&quot;);\n    //使用异步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：-3\"><a href=\"#打印结果：-3\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\">---start---\n任务1---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n任务2---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n任务3---&lt;NSThread: 0x608000065400&gt;{number = 1, name = main}\n---end---\n</code></pre>\n<h4 id=\"解释-2\"><a href=\"#解释-2\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>这里的执行原理和步骤图跟“同步执行+并发队列”是一样的，只要是同步执行就没法开启新的线程，所以多个任务之间也一样只能按顺序来执行</li>\n</ul>\n<p>##（五）异步执行+主队列</p>\n<h4 id=\"实现代码：-4\"><a href=\"#实现代码：-4\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">- (void)asyncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@&quot;---start---&quot;);\n    //使用异步函数封装三个任务\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：-4\"><a href=\"#打印结果：-4\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\">  ---start---\n  ---end---\n  任务1---&lt;NSThread: 0x60800006ff40&gt;{number = 1, name = main}\n  任务2---&lt;NSThread: 0x60800006ff40&gt;{number = 1, name = main}\n  任务3---&lt;NSThread: 0x60800006ff40&gt;{number = 1, name = main}\n</code></pre>\n<h4 id=\"解释-3\"><a href=\"#解释-3\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>异步执行意味着<ul>\n<li>可以开启新的线程</li>\n<li>任务可以先绕过不执行，回头再来执行</li>\n</ul>\n</li>\n<li>主队列跟串行队列的区别<ul>\n<li>队列中的任务一样要按顺序执行</li>\n<li>主队列中的任务必须在主线程中执行，不允许在子线程中执行</li>\n</ul>\n</li>\n<li>以上条件组合后得出结果：<ul>\n<li>所有任务都可以先跳过，之后再来“按顺序”执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤图-3\"><a href=\"#步骤图-3\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_7.png\" alt=\"图七\"></p>\n<p>##（六）同步执行+主队列（死锁）</p>\n<h4 id=\"实现代码：-5\"><a href=\"#实现代码：-5\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h4><pre><code class=\"objectivec\">- (void)syncMain{\n    //获取主队列\n    dispatch_queue_t queue = dispatch_get_main_queue();\n\n    NSLog(@&quot;---start---&quot;);\n    //使用同步函数封装三个任务\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务1---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务2---%@&quot;, [NSThread currentThread]);\n    });\n    dispatch_sync(queue, ^{\n        NSLog(@&quot;任务3---%@&quot;, [NSThread currentThread]);\n    });\n    NSLog(@&quot;---end---&quot;);\n}\n</code></pre>\n<h4 id=\"打印结果：-5\"><a href=\"#打印结果：-5\" class=\"headerlink\" title=\"打印结果：\"></a>打印结果：</h4><pre><code class=\"objectivec\">  ---start---\n</code></pre>\n<h4 id=\"解释-4\"><a href=\"#解释-4\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>主队列中的任务必须按顺序挨个执行</li>\n<li>任务1要等主线程有空的时候（即主队列中的所有任务执行完）才能执行</li>\n<li>主线程要执行完“打印end”的任务后才有空</li>\n<li>“任务1”和“打印end”两个任务互相等待，造成死锁</li>\n</ul>\n<h4 id=\"步骤图-4\"><a href=\"#步骤图-4\" class=\"headerlink\" title=\"步骤图\"></a>步骤图</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gcd%E5%B0%8F%E7%BB%93_8.png\" alt=\"图八\"></p>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end.\"></a>end.</h3>"},{"title":"GIF的秘密","date":"2017-06-13T14:10:27.000Z","_content":"#### GIF\n\nGIF是一种使用LZW压缩，支持多张图像的容器。支持256色，透明通道为1bit。作为互联网表情包的载体，GIF这项80年代的技术依然生生不息。\n但它的弊端也是显而易见的：易出现毛边，色彩表现低劣，文件压缩比不高。针对这些问题，Mozilla发布了APNG来代替老旧的GIF技术，同时许多开源组件也用WebP格式来代替GIF。\n\n#### GIF在iOS的尴尬处境\n\n长久以来，iOS一直被吐槽不能用GIF。造成这一局面的主要原因是：\n\n- iOS关于照片的场景不会自动播放GIF,也没有角标。\n- 一些应用将GIF视为静态图像去操作，导致用户保持了一个GIF后，结果应用将其保存成JPG。\n- iOS只能通过imageI/O去操作GIF数据，UIKit对其绝缘。\n\n#### GIF的存储结构\n\n由于历史的原因，GIF有两个版本，但它们的文件结构是一样的，都是由不同用途的数据块构成，可分为控制块和数据块。控制块里是决定GIF表现的参数，数据块里的数据由前面的控制块里的参数来解释。\n一个GIF文件的内部结构如下图：\n![GIF结构](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%861.png)\n**Header**：包含文件签名与版本号。\n**Trailer**: 文件结束标识符。\n**GIF Data**: Header 与 trailer 之间就是GIF文件的数据。\n我们从一个简单的GIF图入手，它包含两张图像：\n![GIF图](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%868.gif\n)\n\n这是它的十六进制数据,我用颜色区分了不同的数据块：\n![数据块](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%862.png\n)\n\n#### Header\n\nGIF文件的开头是 Header 数据块，长度为6字节，ASCII值为“GIF87a”或\"GIF89a\",前三位为GIF签名，后三位为不同年份的版本号。\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%863.png\n)\n利用这点，在iOS中判断二进制文件是否为GIF时，可以简单去判断它的前四位是否是\"GIF8\"。事实上绝大多数图像都可以用文件签名来判断类型。\n\n#### GIF 内容\n\nGIF数据包含多个数据块，其结构如下:\n**逻辑屏幕**描述符\n\n> 0A000A00 B30000\n\n这一数据块由7个字节组成，前四个字节分别是图像渲染区域的宽高。GIF的数据是按照大端序存储的，0x0A00为10，所以这个GIF的宽高均为10。\n接下来是一个压缩字节，第一个 Bit 为标志位，表示全局颜色列表是否存在。接下来三个Bit表示图像调色板中每个颜色的原色所占用的Bit数，011表示占用4个Bit，111占用8个Bit，以此类推。调色板最多只包含由24-Bit颜色中选出的256个颜色（实际有很多优化方案能提高颜色分辨率，如加入局部调色板）。第五个Bit为标志位，表示颜色列表排序方式。若为1，表示颜色列表是按照颜色在图像中出现的频率降序排列。随后三个Bit表示全局颜色列表的大小，计算方法是2^N+1 ，其中N为这三个Bit的二进制数值。\n第六个字节是表示背景色在全局颜色列表中的索引，若无全局颜色列表则此字节无效。在GIF的图像数据中，没有被指定颜色的像素会被背景色填充。\n最后一个字节是像素的宽高比，大多数时候这个值都是0，若值为N, 则图像的宽高比：\n\n```\naspectRatio = (pixelAspectRatio + 15) / 64\n```\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%864.png\n)\n\n\n#### 全局颜色列表\n\n> 000000 80000000 80008080 00000080 80008000 8080C0C0 C0808080 FF000000 FF00FFFF 000000FF FF00FF00 FFFFFFFF FF\n\n由前面的逻辑屏幕描述符可知，全局颜色列表的大小是16，每个颜色占三个字节，按照RGB排列，所以它占有48个字节。数据流中，颜色是按照列表中的索引存储的。\n应用程序扩展\n\n>21FF0B 4E455453 43415045 322E3003 01000000\n\nGIF中扩展块都以0x21开始，后一个字节是扩展标签，标识扩展用途。\n应用程序扩展的标签是0xFF，它包含有应用程序的标识信息和应用程序数据。其中 Netscape 应用程序扩展常用于控制GIF的动画循环次数。Netscape 扩展长19个字节，前14个是应用程序的ACSII信息，后四个是数据子块，用于指定GIF的循环次数, 按无符号整型存储，0表示无限循环。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%865.png\n)\n\n\n#### 图形控制扩展\n\n> 21F90409 32000F00\n\n图形控制扩展块属于\"89a\"版本的定义。它在一个图像数据块的最前端，用来指定图像的透明度与动画属性。图形控制扩展的开端两字节是0x21F9，其中0x21表示这是一个扩展，F9表示扩展用于图形控制。第三个字节是块大小(它到结束符之间的数据)。第四个字节是压缩字段，前三个Bit保留，四到六Bit是disposal method。第四、五个字节是图像控制扩展后面的图像的动画时间，以无符号整型存储。第六个字节是透明色索引，之后是块结束符0x00。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%866.png\n)\n\n\n#### 图像描述符\n\n> 2C000000 000A000A 0000\n\n图像描述符位于GIF中每一个图像数据的前端，由0x2C开始，长度为10个字节。第一个字节是图像描述符的标识0x2c，后面八个字节表示图像的frame（left, top, width, height），用来在动画中局部更新图像。最后一个是压缩字节，主要是关于局部颜色列表的信息，其中第二个Bit表示图像的存储方式是交织还是连续。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%867.png\n)\n\n#### 局部颜色列表\n\n如果上面的局部颜色列表标志位为1，那么局部颜色列表会排列在图像描述符后面，它只对紧跟在它之后的图像数据有效。如果局部颜色列表标志位为0，那么图像数据将使用全局颜色列表索引颜色。局部颜色列表的大小计算方法和像素颜色格式与全局颜色列表相同。\n\n#### 图像数据\n\n> 041C 1080472B 0549DA9B BAAE58E7 4D4F288E E629A519 697E1C0C 92DB1301 00\n\nGIF的图像数据是经过LZW压缩的二进制流，通过解码可以将其按照颜色列表中的颜色进行像素填充。第一个字节是LZW最小编码大小，用来进行数据解码。第二个字节是图像数据的大小，之后的都是图像数据，直到块结束符。\n\n#### 结束符\n\n> 3B\n\n#### GIF的动画原理\n\nGIF动画的循环次数是由应用扩展来控制的，而GIF动画每一帧的过渡方式是由图形控制扩展控制,图像描述符控制图像绘制的区域。\n图形控制扩展中控制动画的参数分别是：`disposal method`，`user input flag`，`delay time`，`transparency color`。\n\n`disposal method`\n`disposal method`占3Bit，能够表示0-7。\n\n- disposal method = 1\n\n解码器不会清理画布，直接将下一幅图像渲染上一幅图像上。\n\n- disposal method = 2\n解码器会以背景色清理画布，然后渲染下一幅图像。背景色在逻辑屏幕描述符中设置。\n\ndisposal method = 3\n解码器会将画布设置为上之前的状态，然后渲染下一幅图像。\n\n- disposal method = 4-7\n保留值\n\n**user input flag**\n当user input flag为1时，GIF会在有用户输入事件（鼠标、键盘）时才会过渡到下一幅图像。\n\n**delay time**\ndelay time占两个字节，为无符号整数，控制当前帧的展示时间，单位是0.01秒。\n\n**transparency color**\n如果图形控制扩展的透明色标志位为1，那么解码器会通过透明色索引在颜色列表中找到改颜色，标记为透明，当渲染图像时，标记为透明色的颜色将不会绘制，显示下面的背景。\n\n**图像渲染区域**\nGIF中图像描述符指定了当前帧需要渲染的区域，这样GIF的过渡动画就只用绘制两帧之间不同的区域，前提是`diposal method`的值为1。\n\n\n","source":"_posts/GIF的秘密.md","raw":"---\ntitle: GIF的秘密\ndate: 2017-06-13 22:10:27\ncategories: \n\t- 知识簿\n---\n#### GIF\n\nGIF是一种使用LZW压缩，支持多张图像的容器。支持256色，透明通道为1bit。作为互联网表情包的载体，GIF这项80年代的技术依然生生不息。\n但它的弊端也是显而易见的：易出现毛边，色彩表现低劣，文件压缩比不高。针对这些问题，Mozilla发布了APNG来代替老旧的GIF技术，同时许多开源组件也用WebP格式来代替GIF。\n\n#### GIF在iOS的尴尬处境\n\n长久以来，iOS一直被吐槽不能用GIF。造成这一局面的主要原因是：\n\n- iOS关于照片的场景不会自动播放GIF,也没有角标。\n- 一些应用将GIF视为静态图像去操作，导致用户保持了一个GIF后，结果应用将其保存成JPG。\n- iOS只能通过imageI/O去操作GIF数据，UIKit对其绝缘。\n\n#### GIF的存储结构\n\n由于历史的原因，GIF有两个版本，但它们的文件结构是一样的，都是由不同用途的数据块构成，可分为控制块和数据块。控制块里是决定GIF表现的参数，数据块里的数据由前面的控制块里的参数来解释。\n一个GIF文件的内部结构如下图：\n![GIF结构](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%861.png)\n**Header**：包含文件签名与版本号。\n**Trailer**: 文件结束标识符。\n**GIF Data**: Header 与 trailer 之间就是GIF文件的数据。\n我们从一个简单的GIF图入手，它包含两张图像：\n![GIF图](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%868.gif\n)\n\n这是它的十六进制数据,我用颜色区分了不同的数据块：\n![数据块](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%862.png\n)\n\n#### Header\n\nGIF文件的开头是 Header 数据块，长度为6字节，ASCII值为“GIF87a”或\"GIF89a\",前三位为GIF签名，后三位为不同年份的版本号。\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%863.png\n)\n利用这点，在iOS中判断二进制文件是否为GIF时，可以简单去判断它的前四位是否是\"GIF8\"。事实上绝大多数图像都可以用文件签名来判断类型。\n\n#### GIF 内容\n\nGIF数据包含多个数据块，其结构如下:\n**逻辑屏幕**描述符\n\n> 0A000A00 B30000\n\n这一数据块由7个字节组成，前四个字节分别是图像渲染区域的宽高。GIF的数据是按照大端序存储的，0x0A00为10，所以这个GIF的宽高均为10。\n接下来是一个压缩字节，第一个 Bit 为标志位，表示全局颜色列表是否存在。接下来三个Bit表示图像调色板中每个颜色的原色所占用的Bit数，011表示占用4个Bit，111占用8个Bit，以此类推。调色板最多只包含由24-Bit颜色中选出的256个颜色（实际有很多优化方案能提高颜色分辨率，如加入局部调色板）。第五个Bit为标志位，表示颜色列表排序方式。若为1，表示颜色列表是按照颜色在图像中出现的频率降序排列。随后三个Bit表示全局颜色列表的大小，计算方法是2^N+1 ，其中N为这三个Bit的二进制数值。\n第六个字节是表示背景色在全局颜色列表中的索引，若无全局颜色列表则此字节无效。在GIF的图像数据中，没有被指定颜色的像素会被背景色填充。\n最后一个字节是像素的宽高比，大多数时候这个值都是0，若值为N, 则图像的宽高比：\n\n```\naspectRatio = (pixelAspectRatio + 15) / 64\n```\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%864.png\n)\n\n\n#### 全局颜色列表\n\n> 000000 80000000 80008080 00000080 80008000 8080C0C0 C0808080 FF000000 FF00FFFF 000000FF FF00FF00 FFFFFFFF FF\n\n由前面的逻辑屏幕描述符可知，全局颜色列表的大小是16，每个颜色占三个字节，按照RGB排列，所以它占有48个字节。数据流中，颜色是按照列表中的索引存储的。\n应用程序扩展\n\n>21FF0B 4E455453 43415045 322E3003 01000000\n\nGIF中扩展块都以0x21开始，后一个字节是扩展标签，标识扩展用途。\n应用程序扩展的标签是0xFF，它包含有应用程序的标识信息和应用程序数据。其中 Netscape 应用程序扩展常用于控制GIF的动画循环次数。Netscape 扩展长19个字节，前14个是应用程序的ACSII信息，后四个是数据子块，用于指定GIF的循环次数, 按无符号整型存储，0表示无限循环。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%865.png\n)\n\n\n#### 图形控制扩展\n\n> 21F90409 32000F00\n\n图形控制扩展块属于\"89a\"版本的定义。它在一个图像数据块的最前端，用来指定图像的透明度与动画属性。图形控制扩展的开端两字节是0x21F9，其中0x21表示这是一个扩展，F9表示扩展用于图形控制。第三个字节是块大小(它到结束符之间的数据)。第四个字节是压缩字段，前三个Bit保留，四到六Bit是disposal method。第四、五个字节是图像控制扩展后面的图像的动画时间，以无符号整型存储。第六个字节是透明色索引，之后是块结束符0x00。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%866.png\n)\n\n\n#### 图像描述符\n\n> 2C000000 000A000A 0000\n\n图像描述符位于GIF中每一个图像数据的前端，由0x2C开始，长度为10个字节。第一个字节是图像描述符的标识0x2c，后面八个字节表示图像的frame（left, top, width, height），用来在动画中局部更新图像。最后一个是压缩字节，主要是关于局部颜色列表的信息，其中第二个Bit表示图像的存储方式是交织还是连续。\n\n![](http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%867.png\n)\n\n#### 局部颜色列表\n\n如果上面的局部颜色列表标志位为1，那么局部颜色列表会排列在图像描述符后面，它只对紧跟在它之后的图像数据有效。如果局部颜色列表标志位为0，那么图像数据将使用全局颜色列表索引颜色。局部颜色列表的大小计算方法和像素颜色格式与全局颜色列表相同。\n\n#### 图像数据\n\n> 041C 1080472B 0549DA9B BAAE58E7 4D4F288E E629A519 697E1C0C 92DB1301 00\n\nGIF的图像数据是经过LZW压缩的二进制流，通过解码可以将其按照颜色列表中的颜色进行像素填充。第一个字节是LZW最小编码大小，用来进行数据解码。第二个字节是图像数据的大小，之后的都是图像数据，直到块结束符。\n\n#### 结束符\n\n> 3B\n\n#### GIF的动画原理\n\nGIF动画的循环次数是由应用扩展来控制的，而GIF动画每一帧的过渡方式是由图形控制扩展控制,图像描述符控制图像绘制的区域。\n图形控制扩展中控制动画的参数分别是：`disposal method`，`user input flag`，`delay time`，`transparency color`。\n\n`disposal method`\n`disposal method`占3Bit，能够表示0-7。\n\n- disposal method = 1\n\n解码器不会清理画布，直接将下一幅图像渲染上一幅图像上。\n\n- disposal method = 2\n解码器会以背景色清理画布，然后渲染下一幅图像。背景色在逻辑屏幕描述符中设置。\n\ndisposal method = 3\n解码器会将画布设置为上之前的状态，然后渲染下一幅图像。\n\n- disposal method = 4-7\n保留值\n\n**user input flag**\n当user input flag为1时，GIF会在有用户输入事件（鼠标、键盘）时才会过渡到下一幅图像。\n\n**delay time**\ndelay time占两个字节，为无符号整数，控制当前帧的展示时间，单位是0.01秒。\n\n**transparency color**\n如果图形控制扩展的透明色标志位为1，那么解码器会通过透明色索引在颜色列表中找到改颜色，标记为透明，当渲染图像时，标记为透明色的颜色将不会绘制，显示下面的背景。\n\n**图像渲染区域**\nGIF中图像描述符指定了当前帧需要渲染的区域，这样GIF的过渡动画就只用绘制两帧之间不同的区域，前提是`diposal method`的值为1。\n\n\n","slug":"GIF的秘密","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61l600049quzrvl0wxig","content":"<h4 id=\"GIF\"><a href=\"#GIF\" class=\"headerlink\" title=\"GIF\"></a>GIF</h4><p>GIF是一种使用LZW压缩，支持多张图像的容器。支持256色，透明通道为1bit。作为互联网表情包的载体，GIF这项80年代的技术依然生生不息。<br>但它的弊端也是显而易见的：易出现毛边，色彩表现低劣，文件压缩比不高。针对这些问题，Mozilla发布了APNG来代替老旧的GIF技术，同时许多开源组件也用WebP格式来代替GIF。</p>\n<h4 id=\"GIF在iOS的尴尬处境\"><a href=\"#GIF在iOS的尴尬处境\" class=\"headerlink\" title=\"GIF在iOS的尴尬处境\"></a>GIF在iOS的尴尬处境</h4><p>长久以来，iOS一直被吐槽不能用GIF。造成这一局面的主要原因是：</p>\n<ul>\n<li>iOS关于照片的场景不会自动播放GIF,也没有角标。</li>\n<li>一些应用将GIF视为静态图像去操作，导致用户保持了一个GIF后，结果应用将其保存成JPG。</li>\n<li>iOS只能通过imageI/O去操作GIF数据，UIKit对其绝缘。</li>\n</ul>\n<h4 id=\"GIF的存储结构\"><a href=\"#GIF的存储结构\" class=\"headerlink\" title=\"GIF的存储结构\"></a>GIF的存储结构</h4><p>由于历史的原因，GIF有两个版本，但它们的文件结构是一样的，都是由不同用途的数据块构成，可分为控制块和数据块。控制块里是决定GIF表现的参数，数据块里的数据由前面的控制块里的参数来解释。<br>一个GIF文件的内部结构如下图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%861.png\" alt=\"GIF结构\"><br><strong>Header</strong>：包含文件签名与版本号。<br><strong>Trailer</strong>: 文件结束标识符。<br><strong>GIF Data</strong>: Header 与 trailer 之间就是GIF文件的数据。<br>我们从一个简单的GIF图入手，它包含两张图像：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%868.gif\" alt=\"GIF图\"></p>\n<p>这是它的十六进制数据,我用颜色区分了不同的数据块：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%862.png\" alt=\"数据块\"></p>\n<h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>GIF文件的开头是 Header 数据块，长度为6字节，ASCII值为“GIF87a”或”GIF89a”,前三位为GIF签名，后三位为不同年份的版本号。<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%863.png\" alt=\"\"><br>利用这点，在iOS中判断二进制文件是否为GIF时，可以简单去判断它的前四位是否是”GIF8”。事实上绝大多数图像都可以用文件签名来判断类型。</p>\n<h4 id=\"GIF-内容\"><a href=\"#GIF-内容\" class=\"headerlink\" title=\"GIF 内容\"></a>GIF 内容</h4><p>GIF数据包含多个数据块，其结构如下:<br><strong>逻辑屏幕</strong>描述符</p>\n<blockquote>\n<p>0A000A00 B30000</p>\n</blockquote>\n<p>这一数据块由7个字节组成，前四个字节分别是图像渲染区域的宽高。GIF的数据是按照大端序存储的，0x0A00为10，所以这个GIF的宽高均为10。<br>接下来是一个压缩字节，第一个 Bit 为标志位，表示全局颜色列表是否存在。接下来三个Bit表示图像调色板中每个颜色的原色所占用的Bit数，011表示占用4个Bit，111占用8个Bit，以此类推。调色板最多只包含由24-Bit颜色中选出的256个颜色（实际有很多优化方案能提高颜色分辨率，如加入局部调色板）。第五个Bit为标志位，表示颜色列表排序方式。若为1，表示颜色列表是按照颜色在图像中出现的频率降序排列。随后三个Bit表示全局颜色列表的大小，计算方法是2^N+1 ，其中N为这三个Bit的二进制数值。<br>第六个字节是表示背景色在全局颜色列表中的索引，若无全局颜色列表则此字节无效。在GIF的图像数据中，没有被指定颜色的像素会被背景色填充。<br>最后一个字节是像素的宽高比，大多数时候这个值都是0，若值为N, 则图像的宽高比：</p>\n<pre><code>aspectRatio = (pixelAspectRatio + 15) / 64\n</code></pre><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%864.png\" alt=\"\"></p>\n<h4 id=\"全局颜色列表\"><a href=\"#全局颜色列表\" class=\"headerlink\" title=\"全局颜色列表\"></a>全局颜色列表</h4><blockquote>\n<p>000000 80000000 80008080 00000080 80008000 8080C0C0 C0808080 FF000000 FF00FFFF 000000FF FF00FF00 FFFFFFFF FF</p>\n</blockquote>\n<p>由前面的逻辑屏幕描述符可知，全局颜色列表的大小是16，每个颜色占三个字节，按照RGB排列，所以它占有48个字节。数据流中，颜色是按照列表中的索引存储的。<br>应用程序扩展</p>\n<blockquote>\n<p>21FF0B 4E455453 43415045 322E3003 01000000</p>\n</blockquote>\n<p>GIF中扩展块都以0x21开始，后一个字节是扩展标签，标识扩展用途。<br>应用程序扩展的标签是0xFF，它包含有应用程序的标识信息和应用程序数据。其中 Netscape 应用程序扩展常用于控制GIF的动画循环次数。Netscape 扩展长19个字节，前14个是应用程序的ACSII信息，后四个是数据子块，用于指定GIF的循环次数, 按无符号整型存储，0表示无限循环。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%865.png\" alt=\"\"></p>\n<h4 id=\"图形控制扩展\"><a href=\"#图形控制扩展\" class=\"headerlink\" title=\"图形控制扩展\"></a>图形控制扩展</h4><blockquote>\n<p>21F90409 32000F00</p>\n</blockquote>\n<p>图形控制扩展块属于”89a”版本的定义。它在一个图像数据块的最前端，用来指定图像的透明度与动画属性。图形控制扩展的开端两字节是0x21F9，其中0x21表示这是一个扩展，F9表示扩展用于图形控制。第三个字节是块大小(它到结束符之间的数据)。第四个字节是压缩字段，前三个Bit保留，四到六Bit是disposal method。第四、五个字节是图像控制扩展后面的图像的动画时间，以无符号整型存储。第六个字节是透明色索引，之后是块结束符0x00。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%866.png\" alt=\"\"></p>\n<h4 id=\"图像描述符\"><a href=\"#图像描述符\" class=\"headerlink\" title=\"图像描述符\"></a>图像描述符</h4><blockquote>\n<p>2C000000 000A000A 0000</p>\n</blockquote>\n<p>图像描述符位于GIF中每一个图像数据的前端，由0x2C开始，长度为10个字节。第一个字节是图像描述符的标识0x2c，后面八个字节表示图像的frame（left, top, width, height），用来在动画中局部更新图像。最后一个是压缩字节，主要是关于局部颜色列表的信息，其中第二个Bit表示图像的存储方式是交织还是连续。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%867.png\" alt=\"\"></p>\n<h4 id=\"局部颜色列表\"><a href=\"#局部颜色列表\" class=\"headerlink\" title=\"局部颜色列表\"></a>局部颜色列表</h4><p>如果上面的局部颜色列表标志位为1，那么局部颜色列表会排列在图像描述符后面，它只对紧跟在它之后的图像数据有效。如果局部颜色列表标志位为0，那么图像数据将使用全局颜色列表索引颜色。局部颜色列表的大小计算方法和像素颜色格式与全局颜色列表相同。</p>\n<h4 id=\"图像数据\"><a href=\"#图像数据\" class=\"headerlink\" title=\"图像数据\"></a>图像数据</h4><blockquote>\n<p>041C 1080472B 0549DA9B BAAE58E7 4D4F288E E629A519 697E1C0C 92DB1301 00</p>\n</blockquote>\n<p>GIF的图像数据是经过LZW压缩的二进制流，通过解码可以将其按照颜色列表中的颜色进行像素填充。第一个字节是LZW最小编码大小，用来进行数据解码。第二个字节是图像数据的大小，之后的都是图像数据，直到块结束符。</p>\n<h4 id=\"结束符\"><a href=\"#结束符\" class=\"headerlink\" title=\"结束符\"></a>结束符</h4><blockquote>\n<p>3B</p>\n</blockquote>\n<h4 id=\"GIF的动画原理\"><a href=\"#GIF的动画原理\" class=\"headerlink\" title=\"GIF的动画原理\"></a>GIF的动画原理</h4><p>GIF动画的循环次数是由应用扩展来控制的，而GIF动画每一帧的过渡方式是由图形控制扩展控制,图像描述符控制图像绘制的区域。<br>图形控制扩展中控制动画的参数分别是：<code>disposal method</code>，<code>user input flag</code>，<code>delay time</code>，<code>transparency color</code>。</p>\n<p><code>disposal method</code><br><code>disposal method</code>占3Bit，能够表示0-7。</p>\n<ul>\n<li>disposal method = 1</li>\n</ul>\n<p>解码器不会清理画布，直接将下一幅图像渲染上一幅图像上。</p>\n<ul>\n<li>disposal method = 2<br>解码器会以背景色清理画布，然后渲染下一幅图像。背景色在逻辑屏幕描述符中设置。</li>\n</ul>\n<p>disposal method = 3<br>解码器会将画布设置为上之前的状态，然后渲染下一幅图像。</p>\n<ul>\n<li>disposal method = 4-7<br>保留值</li>\n</ul>\n<p><strong>user input flag</strong><br>当user input flag为1时，GIF会在有用户输入事件（鼠标、键盘）时才会过渡到下一幅图像。</p>\n<p><strong>delay time</strong><br>delay time占两个字节，为无符号整数，控制当前帧的展示时间，单位是0.01秒。</p>\n<p><strong>transparency color</strong><br>如果图形控制扩展的透明色标志位为1，那么解码器会通过透明色索引在颜色列表中找到改颜色，标记为透明，当渲染图像时，标记为透明色的颜色将不会绘制，显示下面的背景。</p>\n<p><strong>图像渲染区域</strong><br>GIF中图像描述符指定了当前帧需要渲染的区域，这样GIF的过渡动画就只用绘制两帧之间不同的区域，前提是<code>diposal method</code>的值为1。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"GIF\"><a href=\"#GIF\" class=\"headerlink\" title=\"GIF\"></a>GIF</h4><p>GIF是一种使用LZW压缩，支持多张图像的容器。支持256色，透明通道为1bit。作为互联网表情包的载体，GIF这项80年代的技术依然生生不息。<br>但它的弊端也是显而易见的：易出现毛边，色彩表现低劣，文件压缩比不高。针对这些问题，Mozilla发布了APNG来代替老旧的GIF技术，同时许多开源组件也用WebP格式来代替GIF。</p>\n<h4 id=\"GIF在iOS的尴尬处境\"><a href=\"#GIF在iOS的尴尬处境\" class=\"headerlink\" title=\"GIF在iOS的尴尬处境\"></a>GIF在iOS的尴尬处境</h4><p>长久以来，iOS一直被吐槽不能用GIF。造成这一局面的主要原因是：</p>\n<ul>\n<li>iOS关于照片的场景不会自动播放GIF,也没有角标。</li>\n<li>一些应用将GIF视为静态图像去操作，导致用户保持了一个GIF后，结果应用将其保存成JPG。</li>\n<li>iOS只能通过imageI/O去操作GIF数据，UIKit对其绝缘。</li>\n</ul>\n<h4 id=\"GIF的存储结构\"><a href=\"#GIF的存储结构\" class=\"headerlink\" title=\"GIF的存储结构\"></a>GIF的存储结构</h4><p>由于历史的原因，GIF有两个版本，但它们的文件结构是一样的，都是由不同用途的数据块构成，可分为控制块和数据块。控制块里是决定GIF表现的参数，数据块里的数据由前面的控制块里的参数来解释。<br>一个GIF文件的内部结构如下图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%861.png\" alt=\"GIF结构\"><br><strong>Header</strong>：包含文件签名与版本号。<br><strong>Trailer</strong>: 文件结束标识符。<br><strong>GIF Data</strong>: Header 与 trailer 之间就是GIF文件的数据。<br>我们从一个简单的GIF图入手，它包含两张图像：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%868.gif\" alt=\"GIF图\"></p>\n<p>这是它的十六进制数据,我用颜色区分了不同的数据块：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%862.png\" alt=\"数据块\"></p>\n<h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>GIF文件的开头是 Header 数据块，长度为6字节，ASCII值为“GIF87a”或”GIF89a”,前三位为GIF签名，后三位为不同年份的版本号。<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%863.png\" alt=\"\"><br>利用这点，在iOS中判断二进制文件是否为GIF时，可以简单去判断它的前四位是否是”GIF8”。事实上绝大多数图像都可以用文件签名来判断类型。</p>\n<h4 id=\"GIF-内容\"><a href=\"#GIF-内容\" class=\"headerlink\" title=\"GIF 内容\"></a>GIF 内容</h4><p>GIF数据包含多个数据块，其结构如下:<br><strong>逻辑屏幕</strong>描述符</p>\n<blockquote>\n<p>0A000A00 B30000</p>\n</blockquote>\n<p>这一数据块由7个字节组成，前四个字节分别是图像渲染区域的宽高。GIF的数据是按照大端序存储的，0x0A00为10，所以这个GIF的宽高均为10。<br>接下来是一个压缩字节，第一个 Bit 为标志位，表示全局颜色列表是否存在。接下来三个Bit表示图像调色板中每个颜色的原色所占用的Bit数，011表示占用4个Bit，111占用8个Bit，以此类推。调色板最多只包含由24-Bit颜色中选出的256个颜色（实际有很多优化方案能提高颜色分辨率，如加入局部调色板）。第五个Bit为标志位，表示颜色列表排序方式。若为1，表示颜色列表是按照颜色在图像中出现的频率降序排列。随后三个Bit表示全局颜色列表的大小，计算方法是2^N+1 ，其中N为这三个Bit的二进制数值。<br>第六个字节是表示背景色在全局颜色列表中的索引，若无全局颜色列表则此字节无效。在GIF的图像数据中，没有被指定颜色的像素会被背景色填充。<br>最后一个字节是像素的宽高比，大多数时候这个值都是0，若值为N, 则图像的宽高比：</p>\n<pre><code>aspectRatio = (pixelAspectRatio + 15) / 64\n</code></pre><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%864.png\" alt=\"\"></p>\n<h4 id=\"全局颜色列表\"><a href=\"#全局颜色列表\" class=\"headerlink\" title=\"全局颜色列表\"></a>全局颜色列表</h4><blockquote>\n<p>000000 80000000 80008080 00000080 80008000 8080C0C0 C0808080 FF000000 FF00FFFF 000000FF FF00FF00 FFFFFFFF FF</p>\n</blockquote>\n<p>由前面的逻辑屏幕描述符可知，全局颜色列表的大小是16，每个颜色占三个字节，按照RGB排列，所以它占有48个字节。数据流中，颜色是按照列表中的索引存储的。<br>应用程序扩展</p>\n<blockquote>\n<p>21FF0B 4E455453 43415045 322E3003 01000000</p>\n</blockquote>\n<p>GIF中扩展块都以0x21开始，后一个字节是扩展标签，标识扩展用途。<br>应用程序扩展的标签是0xFF，它包含有应用程序的标识信息和应用程序数据。其中 Netscape 应用程序扩展常用于控制GIF的动画循环次数。Netscape 扩展长19个字节，前14个是应用程序的ACSII信息，后四个是数据子块，用于指定GIF的循环次数, 按无符号整型存储，0表示无限循环。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%865.png\" alt=\"\"></p>\n<h4 id=\"图形控制扩展\"><a href=\"#图形控制扩展\" class=\"headerlink\" title=\"图形控制扩展\"></a>图形控制扩展</h4><blockquote>\n<p>21F90409 32000F00</p>\n</blockquote>\n<p>图形控制扩展块属于”89a”版本的定义。它在一个图像数据块的最前端，用来指定图像的透明度与动画属性。图形控制扩展的开端两字节是0x21F9，其中0x21表示这是一个扩展，F9表示扩展用于图形控制。第三个字节是块大小(它到结束符之间的数据)。第四个字节是压缩字段，前三个Bit保留，四到六Bit是disposal method。第四、五个字节是图像控制扩展后面的图像的动画时间，以无符号整型存储。第六个字节是透明色索引，之后是块结束符0x00。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%866.png\" alt=\"\"></p>\n<h4 id=\"图像描述符\"><a href=\"#图像描述符\" class=\"headerlink\" title=\"图像描述符\"></a>图像描述符</h4><blockquote>\n<p>2C000000 000A000A 0000</p>\n</blockquote>\n<p>图像描述符位于GIF中每一个图像数据的前端，由0x2C开始，长度为10个字节。第一个字节是图像描述符的标识0x2c，后面八个字节表示图像的frame（left, top, width, height），用来在动画中局部更新图像。最后一个是压缩字节，主要是关于局部颜色列表的信息，其中第二个Bit表示图像的存储方式是交织还是连续。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/gif%E7%9A%84%E7%A7%98%E5%AF%867.png\" alt=\"\"></p>\n<h4 id=\"局部颜色列表\"><a href=\"#局部颜色列表\" class=\"headerlink\" title=\"局部颜色列表\"></a>局部颜色列表</h4><p>如果上面的局部颜色列表标志位为1，那么局部颜色列表会排列在图像描述符后面，它只对紧跟在它之后的图像数据有效。如果局部颜色列表标志位为0，那么图像数据将使用全局颜色列表索引颜色。局部颜色列表的大小计算方法和像素颜色格式与全局颜色列表相同。</p>\n<h4 id=\"图像数据\"><a href=\"#图像数据\" class=\"headerlink\" title=\"图像数据\"></a>图像数据</h4><blockquote>\n<p>041C 1080472B 0549DA9B BAAE58E7 4D4F288E E629A519 697E1C0C 92DB1301 00</p>\n</blockquote>\n<p>GIF的图像数据是经过LZW压缩的二进制流，通过解码可以将其按照颜色列表中的颜色进行像素填充。第一个字节是LZW最小编码大小，用来进行数据解码。第二个字节是图像数据的大小，之后的都是图像数据，直到块结束符。</p>\n<h4 id=\"结束符\"><a href=\"#结束符\" class=\"headerlink\" title=\"结束符\"></a>结束符</h4><blockquote>\n<p>3B</p>\n</blockquote>\n<h4 id=\"GIF的动画原理\"><a href=\"#GIF的动画原理\" class=\"headerlink\" title=\"GIF的动画原理\"></a>GIF的动画原理</h4><p>GIF动画的循环次数是由应用扩展来控制的，而GIF动画每一帧的过渡方式是由图形控制扩展控制,图像描述符控制图像绘制的区域。<br>图形控制扩展中控制动画的参数分别是：<code>disposal method</code>，<code>user input flag</code>，<code>delay time</code>，<code>transparency color</code>。</p>\n<p><code>disposal method</code><br><code>disposal method</code>占3Bit，能够表示0-7。</p>\n<ul>\n<li>disposal method = 1</li>\n</ul>\n<p>解码器不会清理画布，直接将下一幅图像渲染上一幅图像上。</p>\n<ul>\n<li>disposal method = 2<br>解码器会以背景色清理画布，然后渲染下一幅图像。背景色在逻辑屏幕描述符中设置。</li>\n</ul>\n<p>disposal method = 3<br>解码器会将画布设置为上之前的状态，然后渲染下一幅图像。</p>\n<ul>\n<li>disposal method = 4-7<br>保留值</li>\n</ul>\n<p><strong>user input flag</strong><br>当user input flag为1时，GIF会在有用户输入事件（鼠标、键盘）时才会过渡到下一幅图像。</p>\n<p><strong>delay time</strong><br>delay time占两个字节，为无符号整数，控制当前帧的展示时间，单位是0.01秒。</p>\n<p><strong>transparency color</strong><br>如果图形控制扩展的透明色标志位为1，那么解码器会通过透明色索引在颜色列表中找到改颜色，标记为透明，当渲染图像时，标记为透明色的颜色将不会绘制，显示下面的背景。</p>\n<p><strong>图像渲染区域</strong><br>GIF中图像描述符指定了当前帧需要渲染的区域，这样GIF的过渡动画就只用绘制两帧之间不同的区域，前提是<code>diposal method</code>的值为1。</p>\n"},{"title":"NSPredicate 使用小结","date":"2017-06-05T14:37:04.000Z","_content":"> NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。\n\n## 一、NSPredicate 使用\n#### （1）集合中使用NSPredicate\n\nNSArray&NSSet，不可变的集合，有可以通过评估接收到的predicate来返回一个不可变集合的方法filteredArrayUsingPredicate:和filteredSetUsingPredicate:。\n\nNSMutableArray&NSMutableSet，可变集合，可以使用方法filterUsingPredicate:，它可以通过运行接收到的谓词来移除评估结果为FALSE的对象。\n\n#### （2）配合正则表达式使用\n\n```objectivec\n-(BOOL)checkPhoneNumber:(NSString *)phoneNumber{\n    NSString *regex = @\"^[1][3-8]\\\\d{9}$\";\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n    return [pred evaluateWithObject:phoneNumber];\n}\n```\n\n#### （3）Core Data中使用NSPredicate\n\nNSFetchRequest有一个predicate属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（persistent store coordinator）评估，而不像集合那样在内存中被过滤。\n\nself.studentArray 添加200个数据，供筛选，以下是生成self.studentArray的代码\n\n```objectivec\n// 学生对象\n@interface Student :NSObject\n/** 名字 */\n@property (nonatomic, strong) NSString *name;\n/** 班级 */\n@property (nonatomic, assign) NSUInteger class;\n/** 分数 */\n@property (nonatomic, assign) NSUInteger score;\n\n- (instancetype)initWithName:(NSString *)name Class:(NSInteger)class Score:(NSInteger)score;\n@end\n@implementation Student\n\n- (instancetype)initWithName:(NSString *)name\n                       Class:(NSInteger)class\n                       Score:(NSInteger)score{\n    if (self = [super init]) {\n        if (class > 6 || class < 1) class = 1;\n        if (score > 100 || score < 0) score = 0;\n        _name = name;\n        _class = class;\n        _score = score;\n    }\n    return self;\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n@property (nonatomic, strong) NSMutableArray <Student *> *studentArray;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n#pragma mark - - lazy load\n\n- (NSMutableArray<Student *> *)studentArray{\n    if (!_studentArray) {\n        _studentArray = [NSMutableArray arrayWithCapacity:0];\n        for (int i = 0; i < 200; i ++) {\n            NSString *name = [self randomStringWithLength:5];\n            NSInteger score = arc4random() % 100;\n            NSInteger class = arc4random() % 6;\n\n            Student *student = [[Student alloc] initWithName:name\n                                                       Class:class\n                                                       Score:score];\n            [_studentArray addObject:student];\n        }\n    }\n    return _studentArray;\n}\n\n\n/** 获取随机字符串 */\n- (NSString *)randomStringWithLength:(NSInteger)length{\n    char data[length];\n    for (int x=0;x<length;data[x++] = (char)('a' + (arc4random_uniform(26))));\n    return [[NSString alloc] initWithBytes:data length:length encoding:NSUTF8StringEncoding];\n}\n\n@end\n```\n## 二、谓词语法\n\n#### （1）替换\n\n> - %@ 是对值为字符串，数字或者日期的对象的替换值。\n- %K 是key path的替换值。\n- $VARIABLE_NAME 是可以被NSPredicate -predicateWithSubstitutionVariables:替换的值。\n\n```objectivec\n  //（%K,%d =\\== 使用）\n    // 分数为满分\n    NSPredicate *predicateA = [NSPredicate predicateWithFormat:@\"%K = %d\",@\"score\",100];\n    NSArray *caseA = [self.studentArray filteredArrayUsingPredicate:predicateA];\n\n    //（self、BEGINSWITH、[]、$ 使用）\n    // 名字以 ‘a’开头\n    NSPredicate *predicateB = [NSPredicate predicateWithFormat:@\"self.name BEGINSWITH[az] $beginningChar\"];\n    NSArray *caseB = [self.studentArray filteredArrayUsingPredicate:[predicateB predicateWithSubstitutionVariables:@{@\"beginningChar\": @\"a\"}]];\n```\n\n#### （2）比较运算符\n\n> =, == ：左边的表达式和右边的表达式相等。\n>=, => ：左边的表达式大于或者等于右边的表达式。\n<=, =< ：左边的表达式小于等于右边的表达式。\n> ：左边的表达式大于右边的表达式。\n< ：左边的表达式小于右边的表达式。\n!=, <> ：左边的表达式不等于右边的表达式。\nBETWEEN ：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。\n\n```objectivec\n// 比较运算符 =, ==  >=, =>  <=, =< > < !=, <> BETWEEN 使用\n    // 90~100 优等学生\n    NSPredicate *predicateC = [NSPredicate predicateWithFormat:@\"self.score BETWEEN {90,100}\"];\n    NSArray *caseC = [self.studentArray filteredArrayUsingPredicate:predicateC];\n```\n\n#### （5）集合运算符\n\n> ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age < 18。\nALL：指定下列表达式中的所有元素。比如，ALL children.age < 18。\nNONE：指定下列表达式中没有的元素。比如，NONE children.age < 18。它在逻辑上等于NOT (ANY ...)。\nIN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { 'Ben', 'Melissa', 'Nick' }。\n\n\n#### （6）直接量\n\n>FALSE、NO：代表逻辑假\nTRUE、YES：代表逻辑真\nNULL、NIL：代表空值\nSELF：代表正在被判断的对象自身\n\"string\"或'string'：代表字符串\n数组：和c中的写法相同，如：{'one', 'two', 'three'}。\n数值：包括证书、小数和科学计数法表示的形式\n十六进制数：0x开头的数字\n八进制：0o开头的数字\n二进制：0b开头的数字\n\n#### （7）数组操作\n\n> array[index] ：指定数组中特定索引处的元素。\narray[FIRST] ：指定数组中的第一个元素。\narray[LAST] ：指定数组中的最后一个元素。\narray[SIZE] ：指定数组的大小。\n\n####（8）布尔值谓词\n>TRUEPREDICATE ：结果始终为真的谓词。\nFALSEPREDICATE ：结果始终为假的谓词。\n\n####（9）Block谓词\n\n```objectivec\nNSPredicate *shortNamePredicate = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {\n            return [[evaluatedObject firstName] length] <= 5;\n        }];\nNSLog(@\"Short Names: %@\", [people filteredArrayUsingPredicate:shortNamePredicate]);\n```\n\n\n","source":"_posts/NSPredicate-使用小结.md","raw":"---\ntitle: NSPredicate 使用小结\ndate: 2017-06-05 22:37:04\ncategories: \n\t- iOS合集\n---\n> NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。\n\n## 一、NSPredicate 使用\n#### （1）集合中使用NSPredicate\n\nNSArray&NSSet，不可变的集合，有可以通过评估接收到的predicate来返回一个不可变集合的方法filteredArrayUsingPredicate:和filteredSetUsingPredicate:。\n\nNSMutableArray&NSMutableSet，可变集合，可以使用方法filterUsingPredicate:，它可以通过运行接收到的谓词来移除评估结果为FALSE的对象。\n\n#### （2）配合正则表达式使用\n\n```objectivec\n-(BOOL)checkPhoneNumber:(NSString *)phoneNumber{\n    NSString *regex = @\"^[1][3-8]\\\\d{9}$\";\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\n    return [pred evaluateWithObject:phoneNumber];\n}\n```\n\n#### （3）Core Data中使用NSPredicate\n\nNSFetchRequest有一个predicate属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（persistent store coordinator）评估，而不像集合那样在内存中被过滤。\n\nself.studentArray 添加200个数据，供筛选，以下是生成self.studentArray的代码\n\n```objectivec\n// 学生对象\n@interface Student :NSObject\n/** 名字 */\n@property (nonatomic, strong) NSString *name;\n/** 班级 */\n@property (nonatomic, assign) NSUInteger class;\n/** 分数 */\n@property (nonatomic, assign) NSUInteger score;\n\n- (instancetype)initWithName:(NSString *)name Class:(NSInteger)class Score:(NSInteger)score;\n@end\n@implementation Student\n\n- (instancetype)initWithName:(NSString *)name\n                       Class:(NSInteger)class\n                       Score:(NSInteger)score{\n    if (self = [super init]) {\n        if (class > 6 || class < 1) class = 1;\n        if (score > 100 || score < 0) score = 0;\n        _name = name;\n        _class = class;\n        _score = score;\n    }\n    return self;\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n@property (nonatomic, strong) NSMutableArray <Student *> *studentArray;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n#pragma mark - - lazy load\n\n- (NSMutableArray<Student *> *)studentArray{\n    if (!_studentArray) {\n        _studentArray = [NSMutableArray arrayWithCapacity:0];\n        for (int i = 0; i < 200; i ++) {\n            NSString *name = [self randomStringWithLength:5];\n            NSInteger score = arc4random() % 100;\n            NSInteger class = arc4random() % 6;\n\n            Student *student = [[Student alloc] initWithName:name\n                                                       Class:class\n                                                       Score:score];\n            [_studentArray addObject:student];\n        }\n    }\n    return _studentArray;\n}\n\n\n/** 获取随机字符串 */\n- (NSString *)randomStringWithLength:(NSInteger)length{\n    char data[length];\n    for (int x=0;x<length;data[x++] = (char)('a' + (arc4random_uniform(26))));\n    return [[NSString alloc] initWithBytes:data length:length encoding:NSUTF8StringEncoding];\n}\n\n@end\n```\n## 二、谓词语法\n\n#### （1）替换\n\n> - %@ 是对值为字符串，数字或者日期的对象的替换值。\n- %K 是key path的替换值。\n- $VARIABLE_NAME 是可以被NSPredicate -predicateWithSubstitutionVariables:替换的值。\n\n```objectivec\n  //（%K,%d =\\== 使用）\n    // 分数为满分\n    NSPredicate *predicateA = [NSPredicate predicateWithFormat:@\"%K = %d\",@\"score\",100];\n    NSArray *caseA = [self.studentArray filteredArrayUsingPredicate:predicateA];\n\n    //（self、BEGINSWITH、[]、$ 使用）\n    // 名字以 ‘a’开头\n    NSPredicate *predicateB = [NSPredicate predicateWithFormat:@\"self.name BEGINSWITH[az] $beginningChar\"];\n    NSArray *caseB = [self.studentArray filteredArrayUsingPredicate:[predicateB predicateWithSubstitutionVariables:@{@\"beginningChar\": @\"a\"}]];\n```\n\n#### （2）比较运算符\n\n> =, == ：左边的表达式和右边的表达式相等。\n>=, => ：左边的表达式大于或者等于右边的表达式。\n<=, =< ：左边的表达式小于等于右边的表达式。\n> ：左边的表达式大于右边的表达式。\n< ：左边的表达式小于右边的表达式。\n!=, <> ：左边的表达式不等于右边的表达式。\nBETWEEN ：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。\n\n```objectivec\n// 比较运算符 =, ==  >=, =>  <=, =< > < !=, <> BETWEEN 使用\n    // 90~100 优等学生\n    NSPredicate *predicateC = [NSPredicate predicateWithFormat:@\"self.score BETWEEN {90,100}\"];\n    NSArray *caseC = [self.studentArray filteredArrayUsingPredicate:predicateC];\n```\n\n#### （5）集合运算符\n\n> ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age < 18。\nALL：指定下列表达式中的所有元素。比如，ALL children.age < 18。\nNONE：指定下列表达式中没有的元素。比如，NONE children.age < 18。它在逻辑上等于NOT (ANY ...)。\nIN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { 'Ben', 'Melissa', 'Nick' }。\n\n\n#### （6）直接量\n\n>FALSE、NO：代表逻辑假\nTRUE、YES：代表逻辑真\nNULL、NIL：代表空值\nSELF：代表正在被判断的对象自身\n\"string\"或'string'：代表字符串\n数组：和c中的写法相同，如：{'one', 'two', 'three'}。\n数值：包括证书、小数和科学计数法表示的形式\n十六进制数：0x开头的数字\n八进制：0o开头的数字\n二进制：0b开头的数字\n\n#### （7）数组操作\n\n> array[index] ：指定数组中特定索引处的元素。\narray[FIRST] ：指定数组中的第一个元素。\narray[LAST] ：指定数组中的最后一个元素。\narray[SIZE] ：指定数组的大小。\n\n####（8）布尔值谓词\n>TRUEPREDICATE ：结果始终为真的谓词。\nFALSEPREDICATE ：结果始终为假的谓词。\n\n####（9）Block谓词\n\n```objectivec\nNSPredicate *shortNamePredicate = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {\n            return [[evaluatedObject firstName] length] <= 5;\n        }];\nNSLog(@\"Short Names: %@\", [people filteredArrayUsingPredicate:shortNamePredicate]);\n```\n\n\n","slug":"NSPredicate-使用小结","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61l900059quz27utap0f","content":"<blockquote>\n<p>NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。</p>\n</blockquote>\n<h2 id=\"一、NSPredicate-使用\"><a href=\"#一、NSPredicate-使用\" class=\"headerlink\" title=\"一、NSPredicate 使用\"></a>一、NSPredicate 使用</h2><h4 id=\"（1）集合中使用NSPredicate\"><a href=\"#（1）集合中使用NSPredicate\" class=\"headerlink\" title=\"（1）集合中使用NSPredicate\"></a>（1）集合中使用NSPredicate</h4><p>NSArray&amp;NSSet，不可变的集合，有可以通过评估接收到的predicate来返回一个不可变集合的方法filteredArrayUsingPredicate:和filteredSetUsingPredicate:。</p>\n<p>NSMutableArray&amp;NSMutableSet，可变集合，可以使用方法filterUsingPredicate:，它可以通过运行接收到的谓词来移除评估结果为FALSE的对象。</p>\n<h4 id=\"（2）配合正则表达式使用\"><a href=\"#（2）配合正则表达式使用\" class=\"headerlink\" title=\"（2）配合正则表达式使用\"></a>（2）配合正则表达式使用</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>checkPhoneNumber<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>phoneNumber<span class=\"token punctuation\">{</span>\n    NSString <span class=\"token operator\">*</span>regex <span class=\"token operator\">=</span> <span class=\"token string\">@\"^[1][3-8]\\\\d{9}$\"</span><span class=\"token punctuation\">;</span>\n    NSPredicate <span class=\"token operator\">*</span>pred <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"SELF MATCHES %@\"</span><span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>pred evaluateWithObject<span class=\"token punctuation\">:</span>phoneNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"（3）Core-Data中使用NSPredicate\"><a href=\"#（3）Core-Data中使用NSPredicate\" class=\"headerlink\" title=\"（3）Core Data中使用NSPredicate\"></a>（3）Core Data中使用NSPredicate</h4><p>NSFetchRequest有一个predicate属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（persistent store coordinator）评估，而不像集合那样在内存中被过滤。</p>\n<p>self.studentArray 添加200个数据，供筛选，以下是生成self.studentArray的代码</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// 学生对象</span>\n<span class=\"token keyword\">@interface</span> Student <span class=\"token punctuation\">:</span>NSObject\n<span class=\"token comment\" spellcheck=\"true\">/** 名字 */</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> strong<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/** 班级 */</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger class<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/** 分数 */</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger score<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name Class<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>class Score<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>score<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n<span class=\"token keyword\">@implementation</span> Student\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name\n                       Class<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>class\n                       Score<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>score<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>class <span class=\"token operator\">></span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> class <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> class <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">||</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        _name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        _class <span class=\"token operator\">=</span> class<span class=\"token punctuation\">;</span>\n        _score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@interface</span> <span class=\"token function\">ViewController</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> strong<span class=\"token punctuation\">)</span> NSMutableArray <span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>studentArray<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - - lazy load</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSMutableArray<span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>studentArray<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_studentArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _studentArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithCapacity<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            NSString <span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> randomStringWithLength<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            NSInteger score <span class=\"token operator\">=</span> <span class=\"token function\">arc4random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            NSInteger class <span class=\"token operator\">=</span> <span class=\"token function\">arc4random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n            Student <span class=\"token operator\">*</span>student <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Student alloc<span class=\"token punctuation\">]</span> initWithName<span class=\"token punctuation\">:</span>name\n                                                       Class<span class=\"token punctuation\">:</span>class\n                                                       Score<span class=\"token punctuation\">:</span>score<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">[</span>_studentArray addObject<span class=\"token punctuation\">:</span>student<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _studentArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/** 获取随机字符串 */</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>randomStringWithLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>length<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>data<span class=\"token punctuation\">[</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arc4random_uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithBytes<span class=\"token punctuation\">:</span>data length<span class=\"token punctuation\">:</span>length encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<h2 id=\"二、谓词语法\"><a href=\"#二、谓词语法\" class=\"headerlink\" title=\"二、谓词语法\"></a>二、谓词语法</h2><h4 id=\"（1）替换\"><a href=\"#（1）替换\" class=\"headerlink\" title=\"（1）替换\"></a>（1）替换</h4><blockquote>\n<ul>\n<li>%@ 是对值为字符串，数字或者日期的对象的替换值。</li>\n<li>%K 是key path的替换值。</li>\n<li>$VARIABLE_NAME 是可以被NSPredicate -predicateWithSubstitutionVariables:替换的值。</li>\n</ul>\n</blockquote>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">  <span class=\"token comment\" spellcheck=\"true\">//（%K,%d =\\== 使用）</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 分数为满分</span>\n    NSPredicate <span class=\"token operator\">*</span>predicateA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"%K = %d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">@\"score\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSArray <span class=\"token operator\">*</span>caseA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>studentArray filteredArrayUsingPredicate<span class=\"token punctuation\">:</span>predicateA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//（self、BEGINSWITH、[]、$ 使用）</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 名字以 ‘a’开头</span>\n    NSPredicate <span class=\"token operator\">*</span>predicateB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"self.name BEGINSWITH[az] $beginningChar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSArray <span class=\"token operator\">*</span>caseB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>studentArray filteredArrayUsingPredicate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>predicateB predicateWithSubstitutionVariables<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span><span class=\"token string\">@\"beginningChar\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">@\"a\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"（2）比较运算符\"><a href=\"#（2）比较运算符\" class=\"headerlink\" title=\"（2）比较运算符\"></a>（2）比较运算符</h4><blockquote>\n<p>=, == ：左边的表达式和右边的表达式相等。<br>=, =&gt; ：左边的表达式大于或者等于右边的表达式。<br>&lt;=, =&lt; ：左边的表达式小于等于右边的表达式。<br>：左边的表达式大于右边的表达式。<br>&lt; ：左边的表达式小于右边的表达式。<br>!=, &lt;&gt; ：左边的表达式不等于右边的表达式。<br>BETWEEN ：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。</p>\n</blockquote>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// 比较运算符 =, ==  >=, =>  &lt;=, =&lt; > &lt; !=, &lt;> BETWEEN 使用</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 90~100 优等学生</span>\n    NSPredicate <span class=\"token operator\">*</span>predicateC <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"self.score BETWEEN {90,100}\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSArray <span class=\"token operator\">*</span>caseC <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>studentArray filteredArrayUsingPredicate<span class=\"token punctuation\">:</span>predicateC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"（5）集合运算符\"><a href=\"#（5）集合运算符\" class=\"headerlink\" title=\"（5）集合运算符\"></a>（5）集合运算符</h4><blockquote>\n<p>ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age &lt; 18。<br>ALL：指定下列表达式中的所有元素。比如，ALL children.age &lt; 18。<br>NONE：指定下列表达式中没有的元素。比如，NONE children.age &lt; 18。它在逻辑上等于NOT (ANY …)。<br>IN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { ‘Ben’, ‘Melissa’, ‘Nick’ }。</p>\n</blockquote>\n<h4 id=\"（6）直接量\"><a href=\"#（6）直接量\" class=\"headerlink\" title=\"（6）直接量\"></a>（6）直接量</h4><blockquote>\n<p>FALSE、NO：代表逻辑假<br>TRUE、YES：代表逻辑真<br>NULL、NIL：代表空值<br>SELF：代表正在被判断的对象自身<br>“string”或’string’：代表字符串<br>数组：和c中的写法相同，如：{‘one’, ‘two’, ‘three’}。<br>数值：包括证书、小数和科学计数法表示的形式<br>十六进制数：0x开头的数字<br>八进制：0o开头的数字<br>二进制：0b开头的数字</p>\n</blockquote>\n<h4 id=\"（7）数组操作\"><a href=\"#（7）数组操作\" class=\"headerlink\" title=\"（7）数组操作\"></a>（7）数组操作</h4><blockquote>\n<p>array[index] ：指定数组中特定索引处的元素。<br>array[FIRST] ：指定数组中的第一个元素。<br>array[LAST] ：指定数组中的最后一个元素。<br>array[SIZE] ：指定数组的大小。</p>\n</blockquote>\n<p>####（8）布尔值谓词</p>\n<blockquote>\n<p>TRUEPREDICATE ：结果始终为真的谓词。<br>FALSEPREDICATE ：结果始终为假的谓词。</p>\n</blockquote>\n<p>####（9）Block谓词</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSPredicate <span class=\"token operator\">*</span>shortNamePredicate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithBlock<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token function\">BOOL</span><span class=\"token punctuation\">(</span>id evaluatedObject<span class=\"token punctuation\">,</span> NSDictionary <span class=\"token operator\">*</span>bindings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>evaluatedObject firstName<span class=\"token punctuation\">]</span> length<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Short Names: %@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>people filteredArrayUsingPredicate<span class=\"token punctuation\">:</span>shortNamePredicate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。</p>\n</blockquote>\n<h2 id=\"一、NSPredicate-使用\"><a href=\"#一、NSPredicate-使用\" class=\"headerlink\" title=\"一、NSPredicate 使用\"></a>一、NSPredicate 使用</h2><h4 id=\"（1）集合中使用NSPredicate\"><a href=\"#（1）集合中使用NSPredicate\" class=\"headerlink\" title=\"（1）集合中使用NSPredicate\"></a>（1）集合中使用NSPredicate</h4><p>NSArray&amp;NSSet，不可变的集合，有可以通过评估接收到的predicate来返回一个不可变集合的方法filteredArrayUsingPredicate:和filteredSetUsingPredicate:。</p>\n<p>NSMutableArray&amp;NSMutableSet，可变集合，可以使用方法filterUsingPredicate:，它可以通过运行接收到的谓词来移除评估结果为FALSE的对象。</p>\n<h4 id=\"（2）配合正则表达式使用\"><a href=\"#（2）配合正则表达式使用\" class=\"headerlink\" title=\"（2）配合正则表达式使用\"></a>（2）配合正则表达式使用</h4><pre><code class=\"objectivec\">-(BOOL)checkPhoneNumber:(NSString *)phoneNumber{\n    NSString *regex = @&quot;^[1][3-8]\\\\d{9}$&quot;;\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];\n    return [pred evaluateWithObject:phoneNumber];\n}\n</code></pre>\n<h4 id=\"（3）Core-Data中使用NSPredicate\"><a href=\"#（3）Core-Data中使用NSPredicate\" class=\"headerlink\" title=\"（3）Core Data中使用NSPredicate\"></a>（3）Core Data中使用NSPredicate</h4><p>NSFetchRequest有一个predicate属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（persistent store coordinator）评估，而不像集合那样在内存中被过滤。</p>\n<p>self.studentArray 添加200个数据，供筛选，以下是生成self.studentArray的代码</p>\n<pre><code class=\"objectivec\">// 学生对象\n@interface Student :NSObject\n/** 名字 */\n@property (nonatomic, strong) NSString *name;\n/** 班级 */\n@property (nonatomic, assign) NSUInteger class;\n/** 分数 */\n@property (nonatomic, assign) NSUInteger score;\n\n- (instancetype)initWithName:(NSString *)name Class:(NSInteger)class Score:(NSInteger)score;\n@end\n@implementation Student\n\n- (instancetype)initWithName:(NSString *)name\n                       Class:(NSInteger)class\n                       Score:(NSInteger)score{\n    if (self = [super init]) {\n        if (class &gt; 6 || class &lt; 1) class = 1;\n        if (score &gt; 100 || score &lt; 0) score = 0;\n        _name = name;\n        _class = class;\n        _score = score;\n    }\n    return self;\n}\n\n@end\n</code></pre>\n<pre><code class=\"objectivec\">@interface ViewController ()\n@property (nonatomic, strong) NSMutableArray &lt;Student *&gt; *studentArray;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n#pragma mark - - lazy load\n\n- (NSMutableArray&lt;Student *&gt; *)studentArray{\n    if (!_studentArray) {\n        _studentArray = [NSMutableArray arrayWithCapacity:0];\n        for (int i = 0; i &lt; 200; i ++) {\n            NSString *name = [self randomStringWithLength:5];\n            NSInteger score = arc4random() % 100;\n            NSInteger class = arc4random() % 6;\n\n            Student *student = [[Student alloc] initWithName:name\n                                                       Class:class\n                                                       Score:score];\n            [_studentArray addObject:student];\n        }\n    }\n    return _studentArray;\n}\n\n\n/** 获取随机字符串 */\n- (NSString *)randomStringWithLength:(NSInteger)length{\n    char data[length];\n    for (int x=0;x&lt;length;data[x++] = (char)(&#39;a&#39; + (arc4random_uniform(26))));\n    return [[NSString alloc] initWithBytes:data length:length encoding:NSUTF8StringEncoding];\n}\n\n@end\n</code></pre>\n<h2 id=\"二、谓词语法\"><a href=\"#二、谓词语法\" class=\"headerlink\" title=\"二、谓词语法\"></a>二、谓词语法</h2><h4 id=\"（1）替换\"><a href=\"#（1）替换\" class=\"headerlink\" title=\"（1）替换\"></a>（1）替换</h4><blockquote>\n<ul>\n<li>%@ 是对值为字符串，数字或者日期的对象的替换值。</li>\n<li>%K 是key path的替换值。</li>\n<li>$VARIABLE_NAME 是可以被NSPredicate -predicateWithSubstitutionVariables:替换的值。</li>\n</ul>\n</blockquote>\n<pre><code class=\"objectivec\">  //（%K,%d =\\== 使用）\n    // 分数为满分\n    NSPredicate *predicateA = [NSPredicate predicateWithFormat:@&quot;%K = %d&quot;,@&quot;score&quot;,100];\n    NSArray *caseA = [self.studentArray filteredArrayUsingPredicate:predicateA];\n\n    //（self、BEGINSWITH、[]、$ 使用）\n    // 名字以 ‘a’开头\n    NSPredicate *predicateB = [NSPredicate predicateWithFormat:@&quot;self.name BEGINSWITH[az] $beginningChar&quot;];\n    NSArray *caseB = [self.studentArray filteredArrayUsingPredicate:[predicateB predicateWithSubstitutionVariables:@{@&quot;beginningChar&quot;: @&quot;a&quot;}]];\n</code></pre>\n<h4 id=\"（2）比较运算符\"><a href=\"#（2）比较运算符\" class=\"headerlink\" title=\"（2）比较运算符\"></a>（2）比较运算符</h4><blockquote>\n<p>=, == ：左边的表达式和右边的表达式相等。<br>=, =&gt; ：左边的表达式大于或者等于右边的表达式。<br>&lt;=, =&lt; ：左边的表达式小于等于右边的表达式。<br>：左边的表达式大于右边的表达式。<br>&lt; ：左边的表达式小于右边的表达式。<br>!=, &lt;&gt; ：左边的表达式不等于右边的表达式。<br>BETWEEN ：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。</p>\n</blockquote>\n<pre><code class=\"objectivec\">// 比较运算符 =, ==  &gt;=, =&gt;  &lt;=, =&lt; &gt; &lt; !=, &lt;&gt; BETWEEN 使用\n    // 90~100 优等学生\n    NSPredicate *predicateC = [NSPredicate predicateWithFormat:@&quot;self.score BETWEEN {90,100}&quot;];\n    NSArray *caseC = [self.studentArray filteredArrayUsingPredicate:predicateC];\n</code></pre>\n<h4 id=\"（5）集合运算符\"><a href=\"#（5）集合运算符\" class=\"headerlink\" title=\"（5）集合运算符\"></a>（5）集合运算符</h4><blockquote>\n<p>ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age &lt; 18。<br>ALL：指定下列表达式中的所有元素。比如，ALL children.age &lt; 18。<br>NONE：指定下列表达式中没有的元素。比如，NONE children.age &lt; 18。它在逻辑上等于NOT (ANY …)。<br>IN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { ‘Ben’, ‘Melissa’, ‘Nick’ }。</p>\n</blockquote>\n<h4 id=\"（6）直接量\"><a href=\"#（6）直接量\" class=\"headerlink\" title=\"（6）直接量\"></a>（6）直接量</h4><blockquote>\n<p>FALSE、NO：代表逻辑假<br>TRUE、YES：代表逻辑真<br>NULL、NIL：代表空值<br>SELF：代表正在被判断的对象自身<br>“string”或’string’：代表字符串<br>数组：和c中的写法相同，如：{‘one’, ‘two’, ‘three’}。<br>数值：包括证书、小数和科学计数法表示的形式<br>十六进制数：0x开头的数字<br>八进制：0o开头的数字<br>二进制：0b开头的数字</p>\n</blockquote>\n<h4 id=\"（7）数组操作\"><a href=\"#（7）数组操作\" class=\"headerlink\" title=\"（7）数组操作\"></a>（7）数组操作</h4><blockquote>\n<p>array[index] ：指定数组中特定索引处的元素。<br>array[FIRST] ：指定数组中的第一个元素。<br>array[LAST] ：指定数组中的最后一个元素。<br>array[SIZE] ：指定数组的大小。</p>\n</blockquote>\n<p>####（8）布尔值谓词</p>\n<blockquote>\n<p>TRUEPREDICATE ：结果始终为真的谓词。<br>FALSEPREDICATE ：结果始终为假的谓词。</p>\n</blockquote>\n<p>####（9）Block谓词</p>\n<pre><code class=\"objectivec\">NSPredicate *shortNamePredicate = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {\n            return [[evaluatedObject firstName] length] &lt;= 5;\n        }];\nNSLog(@&quot;Short Names: %@&quot;, [people filteredArrayUsingPredicate:shortNamePredicate]);\n</code></pre>\n"},{"title":"RSA加密小结","date":"2017-05-26T15:06:00.000Z","_content":"在iOS中使用RSA加密解密，需要用到`.der`和`.p12`后缀格式的文件，其中`.der`格式的文件存放的是公钥（Public key）用于加密，`.p12`格式的文件存放的是私钥（Private key）用于解密. 首先需要先生成这些文件，然后再将文件导入工程使用！\n\n# 一、使用openssl生成所需秘钥文件\n生成环境是在mac系统下，使用`openssl`进行生成，首先打开终端，按下面这些步骤依次来做：\n\n##### 1. 生成模长为1024bit的私钥文件`private_key.pem`\n```objectivec\nopenssl genrsa -out private_key.pem 1024\n```\n##### 2. 生成证书请求文件`rsaCertReq.csr`\n```objectivec\nopenssl req -new -key private_key.pem -out rsaCerReq.csr\n```\n**注意：这一步会提示输入国家、省份、mail等信息，可以根据实际情况填写，或者全部不用填写，直接全部敲回车.**\n##### 3. 生成证书`rsaCert.crt`，并设置有效时间为1年\n```objectivec\nopenssl x509 -req -days 3650 -in rsaCerReq.csr -signkey private_key.pem -out rsaCert.crt\n```\n\n##### 4. 生成供iOS使用的公钥文件`public_key.der`\n```objectivec\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n```\n##### 5. 生成供iOS使用的私钥文件`private_key.p12`\n```objectivec\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n```\n**注意：这一步会提示给私钥文件设置密码，直接输入想要设置密码即可，然后敲回车，然后再验证刚才设置的密码，再次输入密码，然后敲回车，完毕！\n在解密时，`private_key.p12`文件需要和这里设置的密码配合使用，因此需要牢记此密码.**\n##### 6. 生成供Java使用的公钥`rsa_public_key.pem`\n```objectivec\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\n```\n##### 7. 生成供Java使用的私钥`pkcs8_private_key.pem`\n```objectivec\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\n```\n全部执行成功后，会生成如下文件，其中`public_key.der`和`private_key.p12`就是iOS需要用到的文件，如下图：\n![图1](http://upload-images.jianshu.io/upload_images/1803339-3ef995aa667e40f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 二、将文件导入工程使用\n##### 1.新建工程, 并导入`Security.framework`框架, 如下图:\n![图2](http://upload-images.jianshu.io/upload_images/1803339-37dfec3dba887d42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.导入秘钥文件\n导入`.der`和`.p12`格式的秘钥文件, 如下图:\n![图2](http://upload-images.jianshu.io/upload_images/1803339-5e13a7e8dc3f7027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##### 3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法\n\n新建`RSAEncryptor`类, 如下图:\n![图3](http://upload-images.jianshu.io/upload_images/1803339-dba6f10fd9a54973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面开始上代码,`RSAEncryptor.h`代码如下:\n\n```objectivec\n#import <Foundation/Foundation.h>\n\n@interface RSAEncryptor : NSObject\n\n/**\n *  加密方法\n *\n *  @param str   需要加密的字符串\n *  @param path  '.der'格式的公钥文件路径\n */\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path;\n\n/**\n *  解密方法\n *\n *  @param str       需要解密的字符串\n *  @param path      '.p12'格式的私钥文件路径\n *  @param password  私钥文件密码\n */\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password;\n\n/**\n *  加密方法\n *\n *  @param str    需要加密的字符串\n *  @param pubKey 公钥字符串\n */\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey;\n\n/**\n *  解密方法\n *\n *  @param str     需要解密的字符串\n *  @param privKey 私钥字符串\n */\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey;\n\n@end\n```\n`RSAEncryptor.m`代码如下:\n\n```objectivec\n#import \"RSAEncryptor.h\"\n#import <Security/Security.h>\n\n@implementation RSAEncryptor\n\nstatic NSString *base64_encode_data(NSData *data){\n    data = [data base64EncodedDataWithOptions:0];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\nstatic NSData *base64_decode(NSString *str){\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    return data;\n}\n\n#pragma mark - 使用'.der'公钥文件加密\n\n//加密\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path{\n    if (!str || !path)  return nil;\n    return [self encryptString:str publicKeyRef:[self getPublicKeyRefWithContentsOfFile:path]];\n}\n\n//获取公钥\n+ (SecKeyRef)getPublicKeyRefWithContentsOfFile:(NSString *)filePath{\n    NSData *certData = [NSData dataWithContentsOfFile:filePath];\n    if (!certData) {\n        return nil;\n    }\n    SecCertificateRef cert = SecCertificateCreateWithData(NULL, (CFDataRef)certData);\n    SecKeyRef key = NULL;\n    SecTrustRef trust = NULL;\n    SecPolicyRef policy = NULL;\n    if (cert != NULL) {\n        policy = SecPolicyCreateBasicX509();\n        if (policy) {\n            if (SecTrustCreateWithCertificates((CFTypeRef)cert, policy, &trust) == noErr) {\n                SecTrustResultType result;\n                if (SecTrustEvaluate(trust, &result) == noErr) {\n                    key = SecTrustCopyPublicKey(trust);\n                }\n            }\n        }\n    }\n    if (policy) CFRelease(policy);\n    if (trust) CFRelease(trust);\n    if (cert) CFRelease(cert);\n    return key;\n}\n\n+ (NSString *)encryptString:(NSString *)str publicKeyRef:(SecKeyRef)publicKeyRef{\n    if(![str dataUsingEncoding:NSUTF8StringEncoding]){\n        return nil;\n    }\n    if(!publicKeyRef){\n        return nil;\n    }\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] withKeyRef:publicKeyRef];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n#pragma mark - 使用'.12'私钥文件解密\n\n//解密\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password{\n    if (!str || !path) return nil;\n    if (!password) password = @\"\";\n    return [self decryptString:str privateKeyRef:[self getPrivateKeyRefWithContentsOfFile:path password:password]];\n}\n\n//获取私钥\n+ (SecKeyRef)getPrivateKeyRefWithContentsOfFile:(NSString *)filePath password:(NSString*)password{\n\n    NSData *p12Data = [NSData dataWithContentsOfFile:filePath];\n    if (!p12Data) {\n        return nil;\n    }\n    SecKeyRef privateKeyRef = NULL;\n    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];\n    [options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];\n    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);\n    OSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &items);\n    if (securityError == noErr && CFArrayGetCount(items) > 0) {\n        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);\n        SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);\n        securityError = SecIdentityCopyPrivateKey(identityApp, &privateKeyRef);\n        if (securityError != noErr) {\n            privateKeyRef = NULL;\n        }\n    }\n    CFRelease(items);\n\n    return privateKeyRef;\n}\n\n+ (NSString *)decryptString:(NSString *)str privateKeyRef:(SecKeyRef)privKeyRef{\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    if (!privKeyRef) {\n        return nil;\n    }\n    data = [self decryptData:data withKeyRef:privKeyRef];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n#pragma mark - 使用公钥字符串加密\n\n/* START: Encryption with RSA public key */\n\n//使用公钥字符串加密\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey{\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] publicKey:pubKey];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n+ (NSData *)encryptData:(NSData *)data publicKey:(NSString *)pubKey{\n    if(!data || !pubKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPublicKey:pubKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self encryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPublicKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@\"-----BEGIN PUBLIC KEY-----\"];\n    NSRange epos = [key rangeOfString:@\"-----END PUBLIC KEY-----\"];\n    if(spos.location != NSNotFound && epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\t\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\" \"  withString:@\"\"];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPublicKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @\"RSAUtil_PubKey\";\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *publicKey = [[NSMutableDictionary alloc] init];\n    [publicKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [publicKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)publicKey);\n\n    // Add persistent version of the key to system keychain\n    [publicKey setObject:data forKey:(__bridge id)kSecValueData];\n    [publicKey setObject:(__bridge id) kSecAttrKeyClassPublic forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)publicKey, &persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) && (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [publicKey removeObjectForKey:(__bridge id)kSecValueData];\n    [publicKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)publicKey, (CFTypeRef *)&keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPublicKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 public key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 0;\n\n    if (c_key[idx++] != 0x30) return(nil);\n\n    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    // PKCS #1 rsaEncryption szOID_RSA_RSA\n    static unsigned char seqiod[] =\n    { 0x30,   0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,\n        0x01, 0x05, 0x00 };\n    if (memcmp(&c_key[idx], seqiod, 15)) return(nil);\n\n    idx += 15;\n\n    if (c_key[idx++] != 0x03) return(nil);\n\n    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    if (c_key[idx++] != '\\0') return(nil);\n\n    // Now make a new NSData from this buffer\n    return ([NSData dataWithBytes:&c_key[idx] length:len - idx]);\n}\n\n+ (NSData *)encryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    void *outbuf = malloc(block_size);\n    size_t src_block_size = block_size - 11;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx<srclen; idx+=src_block_size){\n        //NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len > src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyEncrypt(keyRef,\n                               kSecPaddingPKCS1,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &outlen\n                               );\n        if (status != 0) {\n            NSLog(@\"SecKeyEncrypt fail. Error Code: %d\", status);\n            ret = nil;\n            break;\n        }else{\n            [ret appendBytes:outbuf length:outlen];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Encryption with RSA public key */\n\n#pragma mark - 使用私钥字符串解密\n\n/* START: Decryption with RSA private key */\n\n//使用私钥字符串解密\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey{\n    if (!str) return nil;\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    data = [self decryptData:data privateKey:privKey];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n+ (NSData *)decryptData:(NSData *)data privateKey:(NSString *)privKey{\n    if(!data || !privKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPrivateKey:privKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self decryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPrivateKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@\"-----BEGIN RSA PRIVATE KEY-----\"];\n    NSRange epos = [key rangeOfString:@\"-----END RSA PRIVATE KEY-----\"];\n    if(spos.location != NSNotFound && epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\t\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\" \"  withString:@\"\"];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPrivateKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @\"RSAUtil_PrivKey\";\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *privateKey = [[NSMutableDictionary alloc] init];\n    [privateKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [privateKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)privateKey);\n\n    // Add persistent version of the key to system keychain\n    [privateKey setObject:data forKey:(__bridge id)kSecValueData];\n    [privateKey setObject:(__bridge id) kSecAttrKeyClassPrivate forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)privateKey, &persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) && (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [privateKey removeObjectForKey:(__bridge id)kSecValueData];\n    [privateKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)privateKey, (CFTypeRef *)&keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPrivateKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 private key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 22; //magic byte at offset 22\n\n    if (0x04 != c_key[idx++]) return nil;\n\n    //calculate length of the key\n    unsigned int c_len = c_key[idx++];\n    int det = c_len & 0x80;\n    if (!det) {\n        c_len = c_len & 0x7f;\n    } else {\n        int byteCount = c_len & 0x7f;\n        if (byteCount + idx > len) {\n            //rsa length field longer than buffer\n            return nil;\n        }\n        unsigned int accum = 0;\n        unsigned char *ptr = &c_key[idx];\n        idx += byteCount;\n        while (byteCount) {\n            accum = (accum << 8) + *ptr;\n            ptr++;\n            byteCount--;\n        }\n        c_len = accum;\n    }\n\n    // Now make a new NSData from this buffer\n    return [d_key subdataWithRange:NSMakeRange(idx, c_len)];\n}\n\n+ (NSData *)decryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    UInt8 *outbuf = malloc(block_size);\n    size_t src_block_size = block_size;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx<srclen; idx+=src_block_size){\n        //NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len > src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyDecrypt(keyRef,\n                               kSecPaddingNone,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &outlen\n                               );\n        if (status != 0) {\n            NSLog(@\"SecKeyEncrypt fail. Error Code: %d\", status);\n            ret = nil;\n            break;\n        }else{\n            //the actual decrypted data is in the middle, locate it!\n            int idxFirstZero = -1;\n            int idxNextZero = (int)outlen;\n            for ( int i = 0; i < outlen; i++ ) {\n                if ( outbuf[i] == 0 ) {\n                    if ( idxFirstZero < 0 ) {\n                        idxFirstZero = i;\n                    } else {\n                        idxNextZero = i;\n                        break;\n                    }\n                }\n            }\n\n            [ret appendBytes:&outbuf[idxFirstZero+1] length:idxNextZero-idxFirstZero-1];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Decryption with RSA private key */\n\n@end\n```\n##### 4. 测试加密、解密\n\n首先先测试使用`.der`和`.p12`秘钥文件进行加密、解密, 在`ViewController.m`中进行测试, 代码如下:\n\n```objectivec\n#import \"ViewController.h\"\n#import \"RSAEncryptor.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @\"这是一段将要使用'.der'文件加密的字符串!\";\n\n    //使用.der和.p12中的公钥私钥加密解密\n    NSString *public_key_path = [[NSBundle mainBundle] pathForResource:@\"public_key.der\" ofType:nil];\n    NSString *private_key_path = [[NSBundle mainBundle] pathForResource:@\"private_key.p12\" ofType:nil];\n\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKeyWithContentsOfFile:public_key_path];\n    NSLog(@\"加密前:%@\", originalString);\n    NSLog(@\"加密后:%@\", encryptStr);\n    NSLog(@\"解密后:%@\", [RSAEncryptor decryptString:encryptStr privateKeyWithContentsOfFile:private_key_path password:@\"123456\"]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n```\n运行后, 输出信息如下:\n![图4](http://upload-images.jianshu.io/upload_images/1803339-837f26af766fc979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到已经可以成功加密、解密了.\n下面接着测试使用秘钥字符串进行加密、解密, 那么秘钥字符串从哪里来? 可以来这里:[http://web.chacuo.net/netrsakeypair](http://web.chacuo.net/netrsakeypair), 这是一个在线生成RSA秘钥的网站, 生成公钥和秘钥后, 复制出来用于测试. 然后在`ViewController.m`\n中使用`RSAEntryptor.h`\n头文件中对应的加密方法进行加密, `ViewController.m`\n中代码如下:\n\n```objectivec\n#import \"ViewController.h\"\n#import \"RSAEncryptor.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @\"这是一段将要使用'秘钥字符串'进行加密的字符串!\";\n\n    //使用字符串格式的公钥私钥加密解密\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKey:@\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDTbZ6cNH9PgdF60aQKveLz3FTalyzHQwbp601y77SzmGHX3F5NoVUZbdK7UMdoCLK4FBziTewYD9DWvAErXZo9BFuI96bAop8wfl1VkZyyHTcznxNJFGSQd/B70/ExMgMBpEwkAAdyUqIjIdVGh1FQK/4acwS39YXwbS+IlHsPSQIDAQAB\"];\n\n    NSLog(@\"加密前:%@\", originalString);\n    NSLog(@\"加密后:%@\", encryptStr);\n    NSLog(@\"解密后:%@\", [RSAEncryptor decryptString:encryptStr privateKey:@\"MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBANNtnpw0f0+B0XrRpAq94vPcVNqXLMdDBunrTXLvtLOYYdfcXk2hVRlt0rtQx2gIsrgUHOJN7BgP0Na8AStdmj0EW4j3psCinzB+XVWRnLIdNzOfE0kUZJB38HvT8TEyAwGkTCQAB3JSoiMh1UaHUVAr/hpzBLf1hfBtL4iUew9JAgMBAAECgYA1tGeQmAkqofga8XtwuxEWDoaDS9k0+EKeUoXGxzqoT/GyiihuIafjILFhoUA1ndf/yCQaG973sbTDhtfpMwqFNQq13+JAownslTjWgr7Hwf7qplYW92R7CU0v7wFfjqm1t/2FKU9JkHfaHfb7qqESMIbO/VMjER9o4tEx58uXDQJBAO0O4lnWDVjr1gN02cqvxPOtTY6DgFbQDeaAZF8obb6XqvCqGW/AVms3Bh8nVlUwdQ2K/xte8tHxjW9FtBQTLd8CQQDkUncO35gAqUF9Bhsdzrs7nO1J3VjLrM0ITrepqjqtVEvdXZc+1/UrkWVaIigWAXjQCVfmQzScdbznhYXPz5fXAkEAgB3KMRkhL4yNpmKRjhw+ih+ASeRCCSj6Sjfbhx4XaakYZmbXxnChg+JB+bZNz06YBFC5nLZM7y/n61o1f5/56wJBALw+ZVzE6ly5L34114uG04W9x0HcFgau7MiJphFjgUdAtd/H9xfgE4odMRPUD3q9Me9LlMYK6MiKpfm4c2+3dzcCQQC8y37NPgpNEkd9smMwPpSEjPW41aMlfcKvP4Da3z7G5bGlmuICrva9YDAiaAyDGGCK8LxC8K6HpKrFgYrXkRtt\"]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\n```\n\n运行后, 输出信息如下:\n![图5](http://upload-images.jianshu.io/upload_images/1803339-4a11ca319806c3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此, RSA加密演示完毕!\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/RSA加密小结.md","raw":"---\ntitle: RSA加密小结\ndate: 2017-05-26 23:06:00\ncategories: \n\t- 知识簿\n---\n在iOS中使用RSA加密解密，需要用到`.der`和`.p12`后缀格式的文件，其中`.der`格式的文件存放的是公钥（Public key）用于加密，`.p12`格式的文件存放的是私钥（Private key）用于解密. 首先需要先生成这些文件，然后再将文件导入工程使用！\n\n# 一、使用openssl生成所需秘钥文件\n生成环境是在mac系统下，使用`openssl`进行生成，首先打开终端，按下面这些步骤依次来做：\n\n##### 1. 生成模长为1024bit的私钥文件`private_key.pem`\n```objectivec\nopenssl genrsa -out private_key.pem 1024\n```\n##### 2. 生成证书请求文件`rsaCertReq.csr`\n```objectivec\nopenssl req -new -key private_key.pem -out rsaCerReq.csr\n```\n**注意：这一步会提示输入国家、省份、mail等信息，可以根据实际情况填写，或者全部不用填写，直接全部敲回车.**\n##### 3. 生成证书`rsaCert.crt`，并设置有效时间为1年\n```objectivec\nopenssl x509 -req -days 3650 -in rsaCerReq.csr -signkey private_key.pem -out rsaCert.crt\n```\n\n##### 4. 生成供iOS使用的公钥文件`public_key.der`\n```objectivec\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n```\n##### 5. 生成供iOS使用的私钥文件`private_key.p12`\n```objectivec\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n```\n**注意：这一步会提示给私钥文件设置密码，直接输入想要设置密码即可，然后敲回车，然后再验证刚才设置的密码，再次输入密码，然后敲回车，完毕！\n在解密时，`private_key.p12`文件需要和这里设置的密码配合使用，因此需要牢记此密码.**\n##### 6. 生成供Java使用的公钥`rsa_public_key.pem`\n```objectivec\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\n```\n##### 7. 生成供Java使用的私钥`pkcs8_private_key.pem`\n```objectivec\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\n```\n全部执行成功后，会生成如下文件，其中`public_key.der`和`private_key.p12`就是iOS需要用到的文件，如下图：\n![图1](http://upload-images.jianshu.io/upload_images/1803339-3ef995aa667e40f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 二、将文件导入工程使用\n##### 1.新建工程, 并导入`Security.framework`框架, 如下图:\n![图2](http://upload-images.jianshu.io/upload_images/1803339-37dfec3dba887d42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.导入秘钥文件\n导入`.der`和`.p12`格式的秘钥文件, 如下图:\n![图2](http://upload-images.jianshu.io/upload_images/1803339-5e13a7e8dc3f7027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##### 3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法\n\n新建`RSAEncryptor`类, 如下图:\n![图3](http://upload-images.jianshu.io/upload_images/1803339-dba6f10fd9a54973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面开始上代码,`RSAEncryptor.h`代码如下:\n\n```objectivec\n#import <Foundation/Foundation.h>\n\n@interface RSAEncryptor : NSObject\n\n/**\n *  加密方法\n *\n *  @param str   需要加密的字符串\n *  @param path  '.der'格式的公钥文件路径\n */\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path;\n\n/**\n *  解密方法\n *\n *  @param str       需要解密的字符串\n *  @param path      '.p12'格式的私钥文件路径\n *  @param password  私钥文件密码\n */\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password;\n\n/**\n *  加密方法\n *\n *  @param str    需要加密的字符串\n *  @param pubKey 公钥字符串\n */\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey;\n\n/**\n *  解密方法\n *\n *  @param str     需要解密的字符串\n *  @param privKey 私钥字符串\n */\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey;\n\n@end\n```\n`RSAEncryptor.m`代码如下:\n\n```objectivec\n#import \"RSAEncryptor.h\"\n#import <Security/Security.h>\n\n@implementation RSAEncryptor\n\nstatic NSString *base64_encode_data(NSData *data){\n    data = [data base64EncodedDataWithOptions:0];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\nstatic NSData *base64_decode(NSString *str){\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    return data;\n}\n\n#pragma mark - 使用'.der'公钥文件加密\n\n//加密\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path{\n    if (!str || !path)  return nil;\n    return [self encryptString:str publicKeyRef:[self getPublicKeyRefWithContentsOfFile:path]];\n}\n\n//获取公钥\n+ (SecKeyRef)getPublicKeyRefWithContentsOfFile:(NSString *)filePath{\n    NSData *certData = [NSData dataWithContentsOfFile:filePath];\n    if (!certData) {\n        return nil;\n    }\n    SecCertificateRef cert = SecCertificateCreateWithData(NULL, (CFDataRef)certData);\n    SecKeyRef key = NULL;\n    SecTrustRef trust = NULL;\n    SecPolicyRef policy = NULL;\n    if (cert != NULL) {\n        policy = SecPolicyCreateBasicX509();\n        if (policy) {\n            if (SecTrustCreateWithCertificates((CFTypeRef)cert, policy, &trust) == noErr) {\n                SecTrustResultType result;\n                if (SecTrustEvaluate(trust, &result) == noErr) {\n                    key = SecTrustCopyPublicKey(trust);\n                }\n            }\n        }\n    }\n    if (policy) CFRelease(policy);\n    if (trust) CFRelease(trust);\n    if (cert) CFRelease(cert);\n    return key;\n}\n\n+ (NSString *)encryptString:(NSString *)str publicKeyRef:(SecKeyRef)publicKeyRef{\n    if(![str dataUsingEncoding:NSUTF8StringEncoding]){\n        return nil;\n    }\n    if(!publicKeyRef){\n        return nil;\n    }\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] withKeyRef:publicKeyRef];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n#pragma mark - 使用'.12'私钥文件解密\n\n//解密\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password{\n    if (!str || !path) return nil;\n    if (!password) password = @\"\";\n    return [self decryptString:str privateKeyRef:[self getPrivateKeyRefWithContentsOfFile:path password:password]];\n}\n\n//获取私钥\n+ (SecKeyRef)getPrivateKeyRefWithContentsOfFile:(NSString *)filePath password:(NSString*)password{\n\n    NSData *p12Data = [NSData dataWithContentsOfFile:filePath];\n    if (!p12Data) {\n        return nil;\n    }\n    SecKeyRef privateKeyRef = NULL;\n    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];\n    [options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];\n    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);\n    OSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &items);\n    if (securityError == noErr && CFArrayGetCount(items) > 0) {\n        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);\n        SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);\n        securityError = SecIdentityCopyPrivateKey(identityApp, &privateKeyRef);\n        if (securityError != noErr) {\n            privateKeyRef = NULL;\n        }\n    }\n    CFRelease(items);\n\n    return privateKeyRef;\n}\n\n+ (NSString *)decryptString:(NSString *)str privateKeyRef:(SecKeyRef)privKeyRef{\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    if (!privKeyRef) {\n        return nil;\n    }\n    data = [self decryptData:data withKeyRef:privKeyRef];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n#pragma mark - 使用公钥字符串加密\n\n/* START: Encryption with RSA public key */\n\n//使用公钥字符串加密\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey{\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] publicKey:pubKey];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n+ (NSData *)encryptData:(NSData *)data publicKey:(NSString *)pubKey{\n    if(!data || !pubKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPublicKey:pubKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self encryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPublicKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@\"-----BEGIN PUBLIC KEY-----\"];\n    NSRange epos = [key rangeOfString:@\"-----END PUBLIC KEY-----\"];\n    if(spos.location != NSNotFound && epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\t\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\" \"  withString:@\"\"];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPublicKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @\"RSAUtil_PubKey\";\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *publicKey = [[NSMutableDictionary alloc] init];\n    [publicKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [publicKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)publicKey);\n\n    // Add persistent version of the key to system keychain\n    [publicKey setObject:data forKey:(__bridge id)kSecValueData];\n    [publicKey setObject:(__bridge id) kSecAttrKeyClassPublic forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)publicKey, &persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) && (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [publicKey removeObjectForKey:(__bridge id)kSecValueData];\n    [publicKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)publicKey, (CFTypeRef *)&keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPublicKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 public key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 0;\n\n    if (c_key[idx++] != 0x30) return(nil);\n\n    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    // PKCS #1 rsaEncryption szOID_RSA_RSA\n    static unsigned char seqiod[] =\n    { 0x30,   0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,\n        0x01, 0x05, 0x00 };\n    if (memcmp(&c_key[idx], seqiod, 15)) return(nil);\n\n    idx += 15;\n\n    if (c_key[idx++] != 0x03) return(nil);\n\n    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    if (c_key[idx++] != '\\0') return(nil);\n\n    // Now make a new NSData from this buffer\n    return ([NSData dataWithBytes:&c_key[idx] length:len - idx]);\n}\n\n+ (NSData *)encryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    void *outbuf = malloc(block_size);\n    size_t src_block_size = block_size - 11;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx<srclen; idx+=src_block_size){\n        //NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len > src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyEncrypt(keyRef,\n                               kSecPaddingPKCS1,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &outlen\n                               );\n        if (status != 0) {\n            NSLog(@\"SecKeyEncrypt fail. Error Code: %d\", status);\n            ret = nil;\n            break;\n        }else{\n            [ret appendBytes:outbuf length:outlen];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Encryption with RSA public key */\n\n#pragma mark - 使用私钥字符串解密\n\n/* START: Decryption with RSA private key */\n\n//使用私钥字符串解密\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey{\n    if (!str) return nil;\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    data = [self decryptData:data privateKey:privKey];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n+ (NSData *)decryptData:(NSData *)data privateKey:(NSString *)privKey{\n    if(!data || !privKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPrivateKey:privKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self decryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPrivateKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@\"-----BEGIN RSA PRIVATE KEY-----\"];\n    NSRange epos = [key rangeOfString:@\"-----END RSA PRIVATE KEY-----\"];\n    if(spos.location != NSNotFound && epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\"\\t\" withString:@\"\"];\n    key = [key stringByReplacingOccurrencesOfString:@\" \"  withString:@\"\"];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPrivateKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @\"RSAUtil_PrivKey\";\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *privateKey = [[NSMutableDictionary alloc] init];\n    [privateKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [privateKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)privateKey);\n\n    // Add persistent version of the key to system keychain\n    [privateKey setObject:data forKey:(__bridge id)kSecValueData];\n    [privateKey setObject:(__bridge id) kSecAttrKeyClassPrivate forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)privateKey, &persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) && (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [privateKey removeObjectForKey:(__bridge id)kSecValueData];\n    [privateKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)privateKey, (CFTypeRef *)&keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPrivateKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 private key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 22; //magic byte at offset 22\n\n    if (0x04 != c_key[idx++]) return nil;\n\n    //calculate length of the key\n    unsigned int c_len = c_key[idx++];\n    int det = c_len & 0x80;\n    if (!det) {\n        c_len = c_len & 0x7f;\n    } else {\n        int byteCount = c_len & 0x7f;\n        if (byteCount + idx > len) {\n            //rsa length field longer than buffer\n            return nil;\n        }\n        unsigned int accum = 0;\n        unsigned char *ptr = &c_key[idx];\n        idx += byteCount;\n        while (byteCount) {\n            accum = (accum << 8) + *ptr;\n            ptr++;\n            byteCount--;\n        }\n        c_len = accum;\n    }\n\n    // Now make a new NSData from this buffer\n    return [d_key subdataWithRange:NSMakeRange(idx, c_len)];\n}\n\n+ (NSData *)decryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    UInt8 *outbuf = malloc(block_size);\n    size_t src_block_size = block_size;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx<srclen; idx+=src_block_size){\n        //NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len > src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyDecrypt(keyRef,\n                               kSecPaddingNone,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &outlen\n                               );\n        if (status != 0) {\n            NSLog(@\"SecKeyEncrypt fail. Error Code: %d\", status);\n            ret = nil;\n            break;\n        }else{\n            //the actual decrypted data is in the middle, locate it!\n            int idxFirstZero = -1;\n            int idxNextZero = (int)outlen;\n            for ( int i = 0; i < outlen; i++ ) {\n                if ( outbuf[i] == 0 ) {\n                    if ( idxFirstZero < 0 ) {\n                        idxFirstZero = i;\n                    } else {\n                        idxNextZero = i;\n                        break;\n                    }\n                }\n            }\n\n            [ret appendBytes:&outbuf[idxFirstZero+1] length:idxNextZero-idxFirstZero-1];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Decryption with RSA private key */\n\n@end\n```\n##### 4. 测试加密、解密\n\n首先先测试使用`.der`和`.p12`秘钥文件进行加密、解密, 在`ViewController.m`中进行测试, 代码如下:\n\n```objectivec\n#import \"ViewController.h\"\n#import \"RSAEncryptor.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @\"这是一段将要使用'.der'文件加密的字符串!\";\n\n    //使用.der和.p12中的公钥私钥加密解密\n    NSString *public_key_path = [[NSBundle mainBundle] pathForResource:@\"public_key.der\" ofType:nil];\n    NSString *private_key_path = [[NSBundle mainBundle] pathForResource:@\"private_key.p12\" ofType:nil];\n\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKeyWithContentsOfFile:public_key_path];\n    NSLog(@\"加密前:%@\", originalString);\n    NSLog(@\"加密后:%@\", encryptStr);\n    NSLog(@\"解密后:%@\", [RSAEncryptor decryptString:encryptStr privateKeyWithContentsOfFile:private_key_path password:@\"123456\"]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n```\n运行后, 输出信息如下:\n![图4](http://upload-images.jianshu.io/upload_images/1803339-837f26af766fc979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到已经可以成功加密、解密了.\n下面接着测试使用秘钥字符串进行加密、解密, 那么秘钥字符串从哪里来? 可以来这里:[http://web.chacuo.net/netrsakeypair](http://web.chacuo.net/netrsakeypair), 这是一个在线生成RSA秘钥的网站, 生成公钥和秘钥后, 复制出来用于测试. 然后在`ViewController.m`\n中使用`RSAEntryptor.h`\n头文件中对应的加密方法进行加密, `ViewController.m`\n中代码如下:\n\n```objectivec\n#import \"ViewController.h\"\n#import \"RSAEncryptor.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @\"这是一段将要使用'秘钥字符串'进行加密的字符串!\";\n\n    //使用字符串格式的公钥私钥加密解密\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKey:@\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDTbZ6cNH9PgdF60aQKveLz3FTalyzHQwbp601y77SzmGHX3F5NoVUZbdK7UMdoCLK4FBziTewYD9DWvAErXZo9BFuI96bAop8wfl1VkZyyHTcznxNJFGSQd/B70/ExMgMBpEwkAAdyUqIjIdVGh1FQK/4acwS39YXwbS+IlHsPSQIDAQAB\"];\n\n    NSLog(@\"加密前:%@\", originalString);\n    NSLog(@\"加密后:%@\", encryptStr);\n    NSLog(@\"解密后:%@\", [RSAEncryptor decryptString:encryptStr privateKey:@\"MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBANNtnpw0f0+B0XrRpAq94vPcVNqXLMdDBunrTXLvtLOYYdfcXk2hVRlt0rtQx2gIsrgUHOJN7BgP0Na8AStdmj0EW4j3psCinzB+XVWRnLIdNzOfE0kUZJB38HvT8TEyAwGkTCQAB3JSoiMh1UaHUVAr/hpzBLf1hfBtL4iUew9JAgMBAAECgYA1tGeQmAkqofga8XtwuxEWDoaDS9k0+EKeUoXGxzqoT/GyiihuIafjILFhoUA1ndf/yCQaG973sbTDhtfpMwqFNQq13+JAownslTjWgr7Hwf7qplYW92R7CU0v7wFfjqm1t/2FKU9JkHfaHfb7qqESMIbO/VMjER9o4tEx58uXDQJBAO0O4lnWDVjr1gN02cqvxPOtTY6DgFbQDeaAZF8obb6XqvCqGW/AVms3Bh8nVlUwdQ2K/xte8tHxjW9FtBQTLd8CQQDkUncO35gAqUF9Bhsdzrs7nO1J3VjLrM0ITrepqjqtVEvdXZc+1/UrkWVaIigWAXjQCVfmQzScdbznhYXPz5fXAkEAgB3KMRkhL4yNpmKRjhw+ih+ASeRCCSj6Sjfbhx4XaakYZmbXxnChg+JB+bZNz06YBFC5nLZM7y/n61o1f5/56wJBALw+ZVzE6ly5L34114uG04W9x0HcFgau7MiJphFjgUdAtd/H9xfgE4odMRPUD3q9Me9LlMYK6MiKpfm4c2+3dzcCQQC8y37NPgpNEkd9smMwPpSEjPW41aMlfcKvP4Da3z7G5bGlmuICrva9YDAiaAyDGGCK8LxC8K6HpKrFgYrXkRtt\"]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\n```\n\n运行后, 输出信息如下:\n![图5](http://upload-images.jianshu.io/upload_images/1803339-4a11ca319806c3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此, RSA加密演示完毕!\n\n\n\n\n\n\n\n\n\n\n","slug":"RSA加密小结","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lb00069quz11gnpvls","content":"<p>在iOS中使用RSA加密解密，需要用到<code>.der</code>和<code>.p12</code>后缀格式的文件，其中<code>.der</code>格式的文件存放的是公钥（Public key）用于加密，<code>.p12</code>格式的文件存放的是私钥（Private key）用于解密. 首先需要先生成这些文件，然后再将文件导入工程使用！</p>\n<h1 id=\"一、使用openssl生成所需秘钥文件\"><a href=\"#一、使用openssl生成所需秘钥文件\" class=\"headerlink\" title=\"一、使用openssl生成所需秘钥文件\"></a>一、使用openssl生成所需秘钥文件</h1><p>生成环境是在mac系统下，使用<code>openssl</code>进行生成，首先打开终端，按下面这些步骤依次来做：</p>\n<h5 id=\"1-生成模长为1024bit的私钥文件private-key-pem\"><a href=\"#1-生成模长为1024bit的私钥文件private-key-pem\" class=\"headerlink\" title=\"1. 生成模长为1024bit的私钥文件private_key.pem\"></a>1. 生成模长为1024bit的私钥文件<code>private_key.pem</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl genrsa <span class=\"token operator\">-</span>out private_key<span class=\"token punctuation\">.</span>pem <span class=\"token number\">1024</span>\n</code></pre>\n<h5 id=\"2-生成证书请求文件rsaCertReq-csr\"><a href=\"#2-生成证书请求文件rsaCertReq-csr\" class=\"headerlink\" title=\"2. 生成证书请求文件rsaCertReq.csr\"></a>2. 生成证书请求文件<code>rsaCertReq.csr</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl req <span class=\"token operator\">-</span>new <span class=\"token operator\">-</span>key private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>out rsaCerReq<span class=\"token punctuation\">.</span>csr\n</code></pre>\n<p><strong>注意：这一步会提示输入国家、省份、mail等信息，可以根据实际情况填写，或者全部不用填写，直接全部敲回车.</strong></p>\n<h5 id=\"3-生成证书rsaCert-crt，并设置有效时间为1年\"><a href=\"#3-生成证书rsaCert-crt，并设置有效时间为1年\" class=\"headerlink\" title=\"3. 生成证书rsaCert.crt，并设置有效时间为1年\"></a>3. 生成证书<code>rsaCert.crt</code>，并设置有效时间为1年</h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl x509 <span class=\"token operator\">-</span>req <span class=\"token operator\">-</span>days <span class=\"token number\">3650</span> <span class=\"token operator\">-</span><span class=\"token keyword\">in</span> rsaCerReq<span class=\"token punctuation\">.</span>csr <span class=\"token operator\">-</span>signkey private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>out rsaCert<span class=\"token punctuation\">.</span>crt\n</code></pre>\n<h5 id=\"4-生成供iOS使用的公钥文件public-key-der\"><a href=\"#4-生成供iOS使用的公钥文件public-key-der\" class=\"headerlink\" title=\"4. 生成供iOS使用的公钥文件public_key.der\"></a>4. 生成供iOS使用的公钥文件<code>public_key.der</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl x509 <span class=\"token operator\">-</span>outform der <span class=\"token operator\">-</span><span class=\"token keyword\">in</span> rsaCert<span class=\"token punctuation\">.</span>crt <span class=\"token operator\">-</span>out public_key<span class=\"token punctuation\">.</span>der\n</code></pre>\n<h5 id=\"5-生成供iOS使用的私钥文件private-key-p12\"><a href=\"#5-生成供iOS使用的私钥文件private-key-p12\" class=\"headerlink\" title=\"5. 生成供iOS使用的私钥文件private_key.p12\"></a>5. 生成供iOS使用的私钥文件<code>private_key.p12</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl pkcs12 <span class=\"token operator\">-</span>export <span class=\"token operator\">-</span>out private_key<span class=\"token punctuation\">.</span>p12 <span class=\"token operator\">-</span>inkey private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span><span class=\"token keyword\">in</span> rsaCert<span class=\"token punctuation\">.</span>crt\n</code></pre>\n<p><strong>注意：这一步会提示给私钥文件设置密码，直接输入想要设置密码即可，然后敲回车，然后再验证刚才设置的密码，再次输入密码，然后敲回车，完毕！<br>在解密时，<code>private_key.p12</code>文件需要和这里设置的密码配合使用，因此需要牢记此密码.</strong></p>\n<h5 id=\"6-生成供Java使用的公钥rsa-public-key-pem\"><a href=\"#6-生成供Java使用的公钥rsa-public-key-pem\" class=\"headerlink\" title=\"6. 生成供Java使用的公钥rsa_public_key.pem\"></a>6. 生成供Java使用的公钥<code>rsa_public_key.pem</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl rsa <span class=\"token operator\">-</span><span class=\"token keyword\">in</span> private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>out rsa_public_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>pubout\n</code></pre>\n<h5 id=\"7-生成供Java使用的私钥pkcs8-private-key-pem\"><a href=\"#7-生成供Java使用的私钥pkcs8-private-key-pem\" class=\"headerlink\" title=\"7. 生成供Java使用的私钥pkcs8_private_key.pem\"></a>7. 生成供Java使用的私钥<code>pkcs8_private_key.pem</code></h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">openssl pkcs8 <span class=\"token operator\">-</span>topk8 <span class=\"token operator\">-</span><span class=\"token keyword\">in</span> private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>out pkcs8_private_key<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>nocrypt\n</code></pre>\n<p>全部执行成功后，会生成如下文件，其中<code>public_key.der</code>和<code>private_key.p12</code>就是iOS需要用到的文件，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-3ef995aa667e40f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1\"></p>\n<h1 id=\"二、将文件导入工程使用\"><a href=\"#二、将文件导入工程使用\" class=\"headerlink\" title=\"二、将文件导入工程使用\"></a>二、将文件导入工程使用</h1><h5 id=\"1-新建工程-并导入Security-framework框架-如下图\"><a href=\"#1-新建工程-并导入Security-framework框架-如下图\" class=\"headerlink\" title=\"1.新建工程, 并导入Security.framework框架, 如下图:\"></a>1.新建工程, 并导入<code>Security.framework</code>框架, 如下图:</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/1803339-37dfec3dba887d42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图2\"></p>\n<h4 id=\"2-导入秘钥文件\"><a href=\"#2-导入秘钥文件\" class=\"headerlink\" title=\"2.导入秘钥文件\"></a>2.导入秘钥文件</h4><p>导入<code>.der</code>和<code>.p12</code>格式的秘钥文件, 如下图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-5e13a7e8dc3f7027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图2\"></p>\n<h5 id=\"3-新建用于加密、解密的类RSAEncryptor-并实现相关方法\"><a href=\"#3-新建用于加密、解密的类RSAEncryptor-并实现相关方法\" class=\"headerlink\" title=\"3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法\"></a>3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法</h5><p>新建<code>RSAEncryptor</code>类, 如下图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-dba6f10fd9a54973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图3\"><br>下面开始上代码,<code>RSAEncryptor.h</code>代码如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n\n<span class=\"token keyword\">@interface</span> RSAEncryptor <span class=\"token punctuation\">:</span> NSObject\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n *  加密方法\n *\n *  @param str   需要加密的字符串\n *  @param path  '.der'格式的公钥文件路径\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str publicKeyWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>path<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n *  解密方法\n *\n *  @param str       需要解密的字符串\n *  @param path      '.p12'格式的私钥文件路径\n *  @param password  私钥文件密码\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str privateKeyWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>path password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n *  加密方法\n *\n *  @param str    需要加密的字符串\n *  @param pubKey 公钥字符串\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str publicKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pubKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n *  解密方法\n *\n *  @param str     需要解密的字符串\n *  @param privKey 私钥字符串\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str privateKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>privKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p><code>RSAEncryptor.m</code>代码如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"RSAEncryptor.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Security/Security.h></span>\n\n<span class=\"token keyword\">@implementation</span> RSAEncryptor\n\n<span class=\"token keyword\">static</span> NSString <span class=\"token operator\">*</span><span class=\"token function\">base64_encode_data</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>data base64EncodedDataWithOptions<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithData<span class=\"token punctuation\">:</span>data encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> NSData <span class=\"token operator\">*</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSData alloc<span class=\"token punctuation\">]</span> initWithBase64EncodedString<span class=\"token punctuation\">:</span>str options<span class=\"token punctuation\">:</span>NSDataBase64DecodingIgnoreUnknownCharacters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 使用'.der'公钥文件加密</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//加密</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str publicKeyWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>path<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>path<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> encryptString<span class=\"token punctuation\">:</span>str publicKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> getPublicKeyRefWithContentsOfFile<span class=\"token punctuation\">:</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//获取公钥</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>getPublicKeyRefWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>filePath<span class=\"token punctuation\">{</span>\n    NSData <span class=\"token operator\">*</span>certData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSData dataWithContentsOfFile<span class=\"token punctuation\">:</span>filePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>certData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    SecCertificateRef cert <span class=\"token operator\">=</span> <span class=\"token function\">SecCertificateCreateWithData</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CFDataRef<span class=\"token punctuation\">)</span>certData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SecKeyRef key <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    SecTrustRef trust <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    SecPolicyRef policy <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cert <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        policy <span class=\"token operator\">=</span> <span class=\"token function\">SecPolicyCreateBasicX509</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>policy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SecTrustCreateWithCertificates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFTypeRef<span class=\"token punctuation\">)</span>cert<span class=\"token punctuation\">,</span> policy<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>trust<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                SecTrustResultType result<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SecTrustEvaluate</span><span class=\"token punctuation\">(</span>trust<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    key <span class=\"token operator\">=</span> <span class=\"token function\">SecTrustCopyPublicKey</span><span class=\"token punctuation\">(</span>trust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>policy<span class=\"token punctuation\">)</span> <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>policy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trust<span class=\"token punctuation\">)</span> <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>trust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">)</span> <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str publicKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>publicKeyRef<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>str dataUsingEncoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>publicKeyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> encryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>str dataUsingEncoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span> withKeyRef<span class=\"token punctuation\">:</span>publicKeyRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">base64_encode_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 使用'.12'私钥文件解密</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//解密</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str privateKeyWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>path password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>password<span class=\"token punctuation\">)</span> password <span class=\"token operator\">=</span> <span class=\"token string\">@\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> decryptString<span class=\"token punctuation\">:</span>str privateKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> getPrivateKeyRefWithContentsOfFile<span class=\"token punctuation\">:</span>path password<span class=\"token punctuation\">:</span>password<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//获取私钥</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>getPrivateKeyRefWithContentsOfFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>filePath password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password<span class=\"token punctuation\">{</span>\n\n    NSData <span class=\"token operator\">*</span>p12Data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSData dataWithContentsOfFile<span class=\"token punctuation\">:</span>filePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p12Data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    SecKeyRef privateKeyRef <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    NSMutableDictionary <span class=\"token operator\">*</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableDictionary alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>options setObject<span class=\"token punctuation\">:</span> password forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecImportExportPassphrase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CFArrayRef items <span class=\"token operator\">=</span> <span class=\"token function\">CFArrayCreate</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    OSStatus securityError <span class=\"token operator\">=</span> <span class=\"token function\">SecPKCS12Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDataRef<span class=\"token punctuation\">)</span> p12Data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>options<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>securityError <span class=\"token operator\">==</span> noErr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">CFArrayGetCount</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        CFDictionaryRef identityDict <span class=\"token operator\">=</span> <span class=\"token function\">CFArrayGetValueAtIndex</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        SecIdentityRef identityApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SecIdentityRef<span class=\"token punctuation\">)</span><span class=\"token function\">CFDictionaryGetValue</span><span class=\"token punctuation\">(</span>identityDict<span class=\"token punctuation\">,</span> kSecImportItemIdentity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        securityError <span class=\"token operator\">=</span> <span class=\"token function\">SecIdentityCopyPrivateKey</span><span class=\"token punctuation\">(</span>identityApp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>privateKeyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>securityError <span class=\"token operator\">!=</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            privateKeyRef <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> privateKeyRef<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str privateKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>privKeyRef<span class=\"token punctuation\">{</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSData alloc<span class=\"token punctuation\">]</span> initWithBase64EncodedString<span class=\"token punctuation\">:</span>str options<span class=\"token punctuation\">:</span>NSDataBase64DecodingIgnoreUnknownCharacters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>privKeyRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> decryptData<span class=\"token punctuation\">:</span>data withKeyRef<span class=\"token punctuation\">:</span>privKeyRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithData<span class=\"token punctuation\">:</span>data encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 使用公钥字符串加密</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* START: Encryption with RSA public key */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//使用公钥字符串加密</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str publicKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pubKey<span class=\"token punctuation\">{</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> encryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>str dataUsingEncoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span> publicKey<span class=\"token punctuation\">:</span>pubKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">base64_encode_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data publicKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pubKey<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>pubKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    SecKeyRef keyRef <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> addPublicKey<span class=\"token punctuation\">:</span>pubKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> encryptData<span class=\"token punctuation\">:</span>data withKeyRef<span class=\"token punctuation\">:</span>keyRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>addPublicKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">{</span>\n    NSRange spos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key rangeOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"-----BEGIN PUBLIC KEY-----\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSRange epos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key rangeOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"-----END PUBLIC KEY-----\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>spos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound <span class=\"token operator\">&amp;&amp;</span> epos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NSUInteger s <span class=\"token operator\">=</span> spos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">+</span> spos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        NSUInteger e <span class=\"token operator\">=</span> epos<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">;</span>\n        NSRange range <span class=\"token operator\">=</span> <span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token operator\">-</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key substringWithRange<span class=\"token punctuation\">:</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\r\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\n\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\t\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\" \"</span>  withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// This will be base64 encoded, decode it.</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> stripPublicKeyHeader<span class=\"token punctuation\">:</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//a tag to read/write keychain storage</span>\n    NSString <span class=\"token operator\">*</span>tag <span class=\"token operator\">=</span> <span class=\"token string\">@\"RSAUtil_PubKey\"</span><span class=\"token punctuation\">;</span>\n    NSData <span class=\"token operator\">*</span>d_tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSData dataWithBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>tag UTF8String<span class=\"token punctuation\">]</span> length<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>tag length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Delete any old lingering key with the same tag</span>\n    NSMutableDictionary <span class=\"token operator\">*</span>publicKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableDictionary alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecClassKey forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyTypeRSA forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrKeyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span>d_tag forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrApplicationTag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SecItemDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Add persistent version of the key to system keychain</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span>data forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecValueData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyClassPublic forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>\n     kSecAttrKeyClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSNumber numberWithBool<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>\n     kSecReturnPersistentRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    CFTypeRef persistKey <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    OSStatus status <span class=\"token operator\">=</span> <span class=\"token function\">SecItemAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>persistKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>persistKey <span class=\"token operator\">!=</span> nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>persistKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> errSecDuplicateItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>publicKey removeObjectForKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecValueData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey removeObjectForKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecReturnPersistentRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSNumber numberWithBool<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecReturnRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>publicKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyTypeRSA forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrKeyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Now fetch the SecKeyRef version of the key</span>\n    SecKeyRef keyRef <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">SecItemCopyMatching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CFTypeRef <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> noErr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> keyRef<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stripPublicKeyHeader<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>d_key<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Skip ASN.1 public key header</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d_key <span class=\"token operator\">==</span> nil<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>d_key length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c_key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>d_key bytes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>  idx     <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> idx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// PKCS #1 rsaEncryption szOID_RSA_RSA</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> seqiod<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0x0d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> seqiod<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    idx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> idx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Now make a new NSData from this buffer</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>NSData dataWithBytes<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> length<span class=\"token punctuation\">:</span>len <span class=\"token operator\">-</span> idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>encryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data withKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span> keyRef<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>srcbuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>data bytes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t srclen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    size_t block_size <span class=\"token operator\">=</span> <span class=\"token function\">SecKeyGetBlockSize</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>uint8_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>outbuf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size_t src_block_size <span class=\"token operator\">=</span> block_size <span class=\"token operator\">-</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\n    NSMutableData <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableData alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> idx<span class=\"token operator\">&lt;</span>srclen<span class=\"token punctuation\">;</span> idx<span class=\"token operator\">+</span><span class=\"token operator\">=</span>src_block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);</span>\n        size_t data_len <span class=\"token operator\">=</span> srclen <span class=\"token operator\">-</span> idx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data_len <span class=\"token operator\">></span> src_block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            data_len <span class=\"token operator\">=</span> src_block_size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        size_t outlen <span class=\"token operator\">=</span> block_size<span class=\"token punctuation\">;</span>\n        OSStatus status <span class=\"token operator\">=</span> noErr<span class=\"token punctuation\">;</span>\n        status <span class=\"token operator\">=</span> <span class=\"token function\">SecKeyEncrypt</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">,</span>\n                               kSecPaddingPKCS1<span class=\"token punctuation\">,</span>\n                               srcbuf <span class=\"token operator\">+</span> idx<span class=\"token punctuation\">,</span>\n                               data_len<span class=\"token punctuation\">,</span>\n                               outbuf<span class=\"token punctuation\">,</span>\n                               <span class=\"token operator\">&amp;</span>outlen\n                               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"SecKeyEncrypt fail. Error Code: %d\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ret <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>ret appendBytes<span class=\"token punctuation\">:</span>outbuf length<span class=\"token punctuation\">:</span>outlen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>outbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* END: Encryption with RSA public key */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 使用私钥字符串解密</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* START: Decryption with RSA private key */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//使用私钥字符串解密</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str privateKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>privKey<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSData alloc<span class=\"token punctuation\">]</span> initWithBase64EncodedString<span class=\"token punctuation\">:</span>str options<span class=\"token punctuation\">:</span>NSDataBase64DecodingIgnoreUnknownCharacters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> decryptData<span class=\"token punctuation\">:</span>data privateKey<span class=\"token punctuation\">:</span>privKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithData<span class=\"token punctuation\">:</span>data encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data privateKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>privKey<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>privKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    SecKeyRef keyRef <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> addPrivateKey<span class=\"token punctuation\">:</span>privKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> decryptData<span class=\"token punctuation\">:</span>data withKeyRef<span class=\"token punctuation\">:</span>keyRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span>addPrivateKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">{</span>\n    NSRange spos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key rangeOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"-----BEGIN RSA PRIVATE KEY-----\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSRange epos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key rangeOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"-----END RSA PRIVATE KEY-----\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>spos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound <span class=\"token operator\">&amp;&amp;</span> epos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NSUInteger s <span class=\"token operator\">=</span> spos<span class=\"token punctuation\">.</span>location <span class=\"token operator\">+</span> spos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        NSUInteger e <span class=\"token operator\">=</span> epos<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">;</span>\n        NSRange range <span class=\"token operator\">=</span> <span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token operator\">-</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key substringWithRange<span class=\"token punctuation\">:</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\r\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\n\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\\t\"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\" \"</span>  withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// This will be base64 encoded, decode it.</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> stripPrivateKeyHeader<span class=\"token punctuation\">:</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//a tag to read/write keychain storage</span>\n    NSString <span class=\"token operator\">*</span>tag <span class=\"token operator\">=</span> <span class=\"token string\">@\"RSAUtil_PrivKey\"</span><span class=\"token punctuation\">;</span>\n    NSData <span class=\"token operator\">*</span>d_tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSData dataWithBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>tag UTF8String<span class=\"token punctuation\">]</span> length<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>tag length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Delete any old lingering key with the same tag</span>\n    NSMutableDictionary <span class=\"token operator\">*</span>privateKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableDictionary alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecClassKey forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyTypeRSA forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrKeyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span>d_tag forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrApplicationTag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SecItemDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Add persistent version of the key to system keychain</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span>data forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecValueData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyClassPrivate forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>\n     kSecAttrKeyClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSNumber numberWithBool<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>\n     kSecReturnPersistentRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    CFTypeRef persistKey <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    OSStatus status <span class=\"token operator\">=</span> <span class=\"token function\">SecItemAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>privateKey<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>persistKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>persistKey <span class=\"token operator\">!=</span> nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>persistKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> errSecDuplicateItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>privateKey removeObjectForKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecValueData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey removeObjectForKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecReturnPersistentRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSNumber numberWithBool<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecReturnRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>privateKey setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span> kSecAttrKeyTypeRSA forKey<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>__bridge id<span class=\"token punctuation\">)</span>kSecAttrKeyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Now fetch the SecKeyRef version of the key</span>\n    SecKeyRef keyRef <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">SecItemCopyMatching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFDictionaryRef<span class=\"token punctuation\">)</span>privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>CFTypeRef <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> noErr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> keyRef<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stripPrivateKeyHeader<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>d_key<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Skip ASN.1 private key header</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d_key <span class=\"token operator\">==</span> nil<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>d_key length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>c_key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>d_key bytes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>  idx     <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//magic byte at offset 22</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x04</span> <span class=\"token operator\">!=</span> c_key<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//calculate length of the key</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> c_len <span class=\"token operator\">=</span> c_key<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> det <span class=\"token operator\">=</span> c_len <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>det<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c_len <span class=\"token operator\">=</span> c_len <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> byteCount <span class=\"token operator\">=</span> c_len <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>byteCount <span class=\"token operator\">+</span> idx <span class=\"token operator\">></span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//rsa length field longer than buffer</span>\n            <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> accum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c_key<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        idx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> byteCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>byteCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            accum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>accum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n            ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            byteCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        c_len <span class=\"token operator\">=</span> accum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Now make a new NSData from this buffer</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>d_key subdataWithRange<span class=\"token punctuation\">:</span><span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> c_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>decryptData<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data withKeyRef<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SecKeyRef<span class=\"token punctuation\">)</span> keyRef<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>srcbuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>data bytes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t srclen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    size_t block_size <span class=\"token operator\">=</span> <span class=\"token function\">SecKeyGetBlockSize</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>uint8_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    UInt8 <span class=\"token operator\">*</span>outbuf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size_t src_block_size <span class=\"token operator\">=</span> block_size<span class=\"token punctuation\">;</span>\n\n    NSMutableData <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableData alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> idx<span class=\"token operator\">&lt;</span>srclen<span class=\"token punctuation\">;</span> idx<span class=\"token operator\">+</span><span class=\"token operator\">=</span>src_block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//NSLog(@\"%d/%d block_size: %d\", idx, (int)srclen, (int)block_size);</span>\n        size_t data_len <span class=\"token operator\">=</span> srclen <span class=\"token operator\">-</span> idx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data_len <span class=\"token operator\">></span> src_block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            data_len <span class=\"token operator\">=</span> src_block_size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        size_t outlen <span class=\"token operator\">=</span> block_size<span class=\"token punctuation\">;</span>\n        OSStatus status <span class=\"token operator\">=</span> noErr<span class=\"token punctuation\">;</span>\n        status <span class=\"token operator\">=</span> <span class=\"token function\">SecKeyDecrypt</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">,</span>\n                               kSecPaddingNone<span class=\"token punctuation\">,</span>\n                               srcbuf <span class=\"token operator\">+</span> idx<span class=\"token punctuation\">,</span>\n                               data_len<span class=\"token punctuation\">,</span>\n                               outbuf<span class=\"token punctuation\">,</span>\n                               <span class=\"token operator\">&amp;</span>outlen\n                               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"SecKeyEncrypt fail. Error Code: %d\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ret <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//the actual decrypted data is in the middle, locate it!</span>\n            <span class=\"token keyword\">int</span> idxFirstZero <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> idxNextZero <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>outlen<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> outlen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> outbuf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> idxFirstZero <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        idxFirstZero <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        idxNextZero <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">[</span>ret appendBytes<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>outbuf<span class=\"token punctuation\">[</span>idxFirstZero<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> length<span class=\"token punctuation\">:</span>idxNextZero<span class=\"token operator\">-</span>idxFirstZero<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>outbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>keyRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* END: Decryption with RSA private key */</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<h5 id=\"4-测试加密、解密\"><a href=\"#4-测试加密、解密\" class=\"headerlink\" title=\"4. 测试加密、解密\"></a>4. 测试加密、解密</h5><p>首先先测试使用<code>.der</code>和<code>.p12</code>秘钥文件进行加密、解密, 在<code>ViewController.m</code>中进行测试, 代码如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"ViewController.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"RSAEncryptor.h\"</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">ViewController</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//原始数据</span>\n    NSString <span class=\"token operator\">*</span>originalString <span class=\"token operator\">=</span> <span class=\"token string\">@\"这是一段将要使用'.der'文件加密的字符串!\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用.der和.p12中的公钥私钥加密解密</span>\n    NSString <span class=\"token operator\">*</span>public_key_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSBundle mainBundle<span class=\"token punctuation\">]</span> pathForResource<span class=\"token punctuation\">:</span><span class=\"token string\">@\"public_key.der\"</span> ofType<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>private_key_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSBundle mainBundle<span class=\"token punctuation\">]</span> pathForResource<span class=\"token punctuation\">:</span><span class=\"token string\">@\"private_key.p12\"</span> ofType<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    NSString <span class=\"token operator\">*</span>encryptStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>RSAEncryptor encryptString<span class=\"token punctuation\">:</span>originalString publicKeyWithContentsOfFile<span class=\"token punctuation\">:</span>public_key_path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"加密前:%@\"</span><span class=\"token punctuation\">,</span> originalString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"加密后:%@\"</span><span class=\"token punctuation\">,</span> encryptStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"解密后:%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>RSAEncryptor decryptString<span class=\"token punctuation\">:</span>encryptStr privateKeyWithContentsOfFile<span class=\"token punctuation\">:</span>private_key_path password<span class=\"token punctuation\">:</span><span class=\"token string\">@\"123456\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>didReceiveMemoryWarning <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> didReceiveMemoryWarning<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Dispose of any resources that can be recreated.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>运行后, 输出信息如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-837f26af766fc979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图4\"><br>可以看到已经可以成功加密、解密了.<br>下面接着测试使用秘钥字符串进行加密、解密, 那么秘钥字符串从哪里来? 可以来这里:<a href=\"http://web.chacuo.net/netrsakeypair\" target=\"_blank\" rel=\"external\">http://web.chacuo.net/netrsakeypair</a>, 这是一个在线生成RSA秘钥的网站, 生成公钥和秘钥后, 复制出来用于测试. 然后在<code>ViewController.m</code><br>中使用<code>RSAEntryptor.h</code><br>头文件中对应的加密方法进行加密, <code>ViewController.m</code><br>中代码如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"ViewController.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"RSAEncryptor.h\"</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">ViewController</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//原始数据</span>\n    NSString <span class=\"token operator\">*</span>originalString <span class=\"token operator\">=</span> <span class=\"token string\">@\"这是一段将要使用'秘钥字符串'进行加密的字符串!\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用字符串格式的公钥私钥加密解密</span>\n    NSString <span class=\"token operator\">*</span>encryptStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>RSAEncryptor encryptString<span class=\"token punctuation\">:</span>originalString publicKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDTbZ6cNH9PgdF60aQKveLz3FTalyzHQwbp601y77SzmGHX3F5NoVUZbdK7UMdoCLK4FBziTewYD9DWvAErXZo9BFuI96bAop8wfl1VkZyyHTcznxNJFGSQd/B70/ExMgMBpEwkAAdyUqIjIdVGh1FQK/4acwS39YXwbS+IlHsPSQIDAQAB\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"加密前:%@\"</span><span class=\"token punctuation\">,</span> originalString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"加密后:%@\"</span><span class=\"token punctuation\">,</span> encryptStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"解密后:%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>RSAEncryptor decryptString<span class=\"token punctuation\">:</span>encryptStr privateKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBANNtnpw0f0+B0XrRpAq94vPcVNqXLMdDBunrTXLvtLOYYdfcXk2hVRlt0rtQx2gIsrgUHOJN7BgP0Na8AStdmj0EW4j3psCinzB+XVWRnLIdNzOfE0kUZJB38HvT8TEyAwGkTCQAB3JSoiMh1UaHUVAr/hpzBLf1hfBtL4iUew9JAgMBAAECgYA1tGeQmAkqofga8XtwuxEWDoaDS9k0+EKeUoXGxzqoT/GyiihuIafjILFhoUA1ndf/yCQaG973sbTDhtfpMwqFNQq13+JAownslTjWgr7Hwf7qplYW92R7CU0v7wFfjqm1t/2FKU9JkHfaHfb7qqESMIbO/VMjER9o4tEx58uXDQJBAO0O4lnWDVjr1gN02cqvxPOtTY6DgFbQDeaAZF8obb6XqvCqGW/AVms3Bh8nVlUwdQ2K/xte8tHxjW9FtBQTLd8CQQDkUncO35gAqUF9Bhsdzrs7nO1J3VjLrM0ITrepqjqtVEvdXZc+1/UrkWVaIigWAXjQCVfmQzScdbznhYXPz5fXAkEAgB3KMRkhL4yNpmKRjhw+ih+ASeRCCSj6Sjfbhx4XaakYZmbXxnChg+JB+bZNz06YBFC5nLZM7y/n61o1f5/56wJBALw+ZVzE6ly5L34114uG04W9x0HcFgau7MiJphFjgUdAtd/H9xfgE4odMRPUD3q9Me9LlMYK6MiKpfm4c2+3dzcCQQC8y37NPgpNEkd9smMwPpSEjPW41aMlfcKvP4Da3z7G5bGlmuICrva9YDAiaAyDGGCK8LxC8K6HpKrFgYrXkRtt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>didReceiveMemoryWarning <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> didReceiveMemoryWarning<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Dispose of any resources that can be recreated.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>运行后, 输出信息如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-4a11ca319806c3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图5\"><br>至此, RSA加密演示完毕!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在iOS中使用RSA加密解密，需要用到<code>.der</code>和<code>.p12</code>后缀格式的文件，其中<code>.der</code>格式的文件存放的是公钥（Public key）用于加密，<code>.p12</code>格式的文件存放的是私钥（Private key）用于解密. 首先需要先生成这些文件，然后再将文件导入工程使用！</p>\n<h1 id=\"一、使用openssl生成所需秘钥文件\"><a href=\"#一、使用openssl生成所需秘钥文件\" class=\"headerlink\" title=\"一、使用openssl生成所需秘钥文件\"></a>一、使用openssl生成所需秘钥文件</h1><p>生成环境是在mac系统下，使用<code>openssl</code>进行生成，首先打开终端，按下面这些步骤依次来做：</p>\n<h5 id=\"1-生成模长为1024bit的私钥文件private-key-pem\"><a href=\"#1-生成模长为1024bit的私钥文件private-key-pem\" class=\"headerlink\" title=\"1. 生成模长为1024bit的私钥文件private_key.pem\"></a>1. 生成模长为1024bit的私钥文件<code>private_key.pem</code></h5><pre><code class=\"objectivec\">openssl genrsa -out private_key.pem 1024\n</code></pre>\n<h5 id=\"2-生成证书请求文件rsaCertReq-csr\"><a href=\"#2-生成证书请求文件rsaCertReq-csr\" class=\"headerlink\" title=\"2. 生成证书请求文件rsaCertReq.csr\"></a>2. 生成证书请求文件<code>rsaCertReq.csr</code></h5><pre><code class=\"objectivec\">openssl req -new -key private_key.pem -out rsaCerReq.csr\n</code></pre>\n<p><strong>注意：这一步会提示输入国家、省份、mail等信息，可以根据实际情况填写，或者全部不用填写，直接全部敲回车.</strong></p>\n<h5 id=\"3-生成证书rsaCert-crt，并设置有效时间为1年\"><a href=\"#3-生成证书rsaCert-crt，并设置有效时间为1年\" class=\"headerlink\" title=\"3. 生成证书rsaCert.crt，并设置有效时间为1年\"></a>3. 生成证书<code>rsaCert.crt</code>，并设置有效时间为1年</h5><pre><code class=\"objectivec\">openssl x509 -req -days 3650 -in rsaCerReq.csr -signkey private_key.pem -out rsaCert.crt\n</code></pre>\n<h5 id=\"4-生成供iOS使用的公钥文件public-key-der\"><a href=\"#4-生成供iOS使用的公钥文件public-key-der\" class=\"headerlink\" title=\"4. 生成供iOS使用的公钥文件public_key.der\"></a>4. 生成供iOS使用的公钥文件<code>public_key.der</code></h5><pre><code class=\"objectivec\">openssl x509 -outform der -in rsaCert.crt -out public_key.der\n</code></pre>\n<h5 id=\"5-生成供iOS使用的私钥文件private-key-p12\"><a href=\"#5-生成供iOS使用的私钥文件private-key-p12\" class=\"headerlink\" title=\"5. 生成供iOS使用的私钥文件private_key.p12\"></a>5. 生成供iOS使用的私钥文件<code>private_key.p12</code></h5><pre><code class=\"objectivec\">openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n</code></pre>\n<p><strong>注意：这一步会提示给私钥文件设置密码，直接输入想要设置密码即可，然后敲回车，然后再验证刚才设置的密码，再次输入密码，然后敲回车，完毕！<br>在解密时，<code>private_key.p12</code>文件需要和这里设置的密码配合使用，因此需要牢记此密码.</strong></p>\n<h5 id=\"6-生成供Java使用的公钥rsa-public-key-pem\"><a href=\"#6-生成供Java使用的公钥rsa-public-key-pem\" class=\"headerlink\" title=\"6. 生成供Java使用的公钥rsa_public_key.pem\"></a>6. 生成供Java使用的公钥<code>rsa_public_key.pem</code></h5><pre><code class=\"objectivec\">openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\n</code></pre>\n<h5 id=\"7-生成供Java使用的私钥pkcs8-private-key-pem\"><a href=\"#7-生成供Java使用的私钥pkcs8-private-key-pem\" class=\"headerlink\" title=\"7. 生成供Java使用的私钥pkcs8_private_key.pem\"></a>7. 生成供Java使用的私钥<code>pkcs8_private_key.pem</code></h5><pre><code class=\"objectivec\">openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\n</code></pre>\n<p>全部执行成功后，会生成如下文件，其中<code>public_key.der</code>和<code>private_key.p12</code>就是iOS需要用到的文件，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-3ef995aa667e40f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1\"></p>\n<h1 id=\"二、将文件导入工程使用\"><a href=\"#二、将文件导入工程使用\" class=\"headerlink\" title=\"二、将文件导入工程使用\"></a>二、将文件导入工程使用</h1><h5 id=\"1-新建工程-并导入Security-framework框架-如下图\"><a href=\"#1-新建工程-并导入Security-framework框架-如下图\" class=\"headerlink\" title=\"1.新建工程, 并导入Security.framework框架, 如下图:\"></a>1.新建工程, 并导入<code>Security.framework</code>框架, 如下图:</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/1803339-37dfec3dba887d42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图2\"></p>\n<h4 id=\"2-导入秘钥文件\"><a href=\"#2-导入秘钥文件\" class=\"headerlink\" title=\"2.导入秘钥文件\"></a>2.导入秘钥文件</h4><p>导入<code>.der</code>和<code>.p12</code>格式的秘钥文件, 如下图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-5e13a7e8dc3f7027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图2\"></p>\n<h5 id=\"3-新建用于加密、解密的类RSAEncryptor-并实现相关方法\"><a href=\"#3-新建用于加密、解密的类RSAEncryptor-并实现相关方法\" class=\"headerlink\" title=\"3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法\"></a>3.新建用于加密、解密的类RSAEncryptor, 并实现相关方法</h5><p>新建<code>RSAEncryptor</code>类, 如下图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-dba6f10fd9a54973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图3\"><br>下面开始上代码,<code>RSAEncryptor.h</code>代码如下:</p>\n<pre><code class=\"objectivec\">#import &lt;Foundation/Foundation.h&gt;\n\n@interface RSAEncryptor : NSObject\n\n/**\n *  加密方法\n *\n *  @param str   需要加密的字符串\n *  @param path  &#39;.der&#39;格式的公钥文件路径\n */\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path;\n\n/**\n *  解密方法\n *\n *  @param str       需要解密的字符串\n *  @param path      &#39;.p12&#39;格式的私钥文件路径\n *  @param password  私钥文件密码\n */\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password;\n\n/**\n *  加密方法\n *\n *  @param str    需要加密的字符串\n *  @param pubKey 公钥字符串\n */\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey;\n\n/**\n *  解密方法\n *\n *  @param str     需要解密的字符串\n *  @param privKey 私钥字符串\n */\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey;\n\n@end\n</code></pre>\n<p><code>RSAEncryptor.m</code>代码如下:</p>\n<pre><code class=\"objectivec\">#import &quot;RSAEncryptor.h&quot;\n#import &lt;Security/Security.h&gt;\n\n@implementation RSAEncryptor\n\nstatic NSString *base64_encode_data(NSData *data){\n    data = [data base64EncodedDataWithOptions:0];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\nstatic NSData *base64_decode(NSString *str){\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    return data;\n}\n\n#pragma mark - 使用&#39;.der&#39;公钥文件加密\n\n//加密\n+ (NSString *)encryptString:(NSString *)str publicKeyWithContentsOfFile:(NSString *)path{\n    if (!str || !path)  return nil;\n    return [self encryptString:str publicKeyRef:[self getPublicKeyRefWithContentsOfFile:path]];\n}\n\n//获取公钥\n+ (SecKeyRef)getPublicKeyRefWithContentsOfFile:(NSString *)filePath{\n    NSData *certData = [NSData dataWithContentsOfFile:filePath];\n    if (!certData) {\n        return nil;\n    }\n    SecCertificateRef cert = SecCertificateCreateWithData(NULL, (CFDataRef)certData);\n    SecKeyRef key = NULL;\n    SecTrustRef trust = NULL;\n    SecPolicyRef policy = NULL;\n    if (cert != NULL) {\n        policy = SecPolicyCreateBasicX509();\n        if (policy) {\n            if (SecTrustCreateWithCertificates((CFTypeRef)cert, policy, &amp;trust) == noErr) {\n                SecTrustResultType result;\n                if (SecTrustEvaluate(trust, &amp;result) == noErr) {\n                    key = SecTrustCopyPublicKey(trust);\n                }\n            }\n        }\n    }\n    if (policy) CFRelease(policy);\n    if (trust) CFRelease(trust);\n    if (cert) CFRelease(cert);\n    return key;\n}\n\n+ (NSString *)encryptString:(NSString *)str publicKeyRef:(SecKeyRef)publicKeyRef{\n    if(![str dataUsingEncoding:NSUTF8StringEncoding]){\n        return nil;\n    }\n    if(!publicKeyRef){\n        return nil;\n    }\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] withKeyRef:publicKeyRef];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n#pragma mark - 使用&#39;.12&#39;私钥文件解密\n\n//解密\n+ (NSString *)decryptString:(NSString *)str privateKeyWithContentsOfFile:(NSString *)path password:(NSString *)password{\n    if (!str || !path) return nil;\n    if (!password) password = @&quot;&quot;;\n    return [self decryptString:str privateKeyRef:[self getPrivateKeyRefWithContentsOfFile:path password:password]];\n}\n\n//获取私钥\n+ (SecKeyRef)getPrivateKeyRefWithContentsOfFile:(NSString *)filePath password:(NSString*)password{\n\n    NSData *p12Data = [NSData dataWithContentsOfFile:filePath];\n    if (!p12Data) {\n        return nil;\n    }\n    SecKeyRef privateKeyRef = NULL;\n    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];\n    [options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];\n    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);\n    OSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &amp;items);\n    if (securityError == noErr &amp;&amp; CFArrayGetCount(items) &gt; 0) {\n        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);\n        SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);\n        securityError = SecIdentityCopyPrivateKey(identityApp, &amp;privateKeyRef);\n        if (securityError != noErr) {\n            privateKeyRef = NULL;\n        }\n    }\n    CFRelease(items);\n\n    return privateKeyRef;\n}\n\n+ (NSString *)decryptString:(NSString *)str privateKeyRef:(SecKeyRef)privKeyRef{\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    if (!privKeyRef) {\n        return nil;\n    }\n    data = [self decryptData:data withKeyRef:privKeyRef];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n#pragma mark - 使用公钥字符串加密\n\n/* START: Encryption with RSA public key */\n\n//使用公钥字符串加密\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey{\n    NSData *data = [self encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] publicKey:pubKey];\n    NSString *ret = base64_encode_data(data);\n    return ret;\n}\n\n+ (NSData *)encryptData:(NSData *)data publicKey:(NSString *)pubKey{\n    if(!data || !pubKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPublicKey:pubKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self encryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPublicKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@&quot;-----BEGIN PUBLIC KEY-----&quot;];\n    NSRange epos = [key rangeOfString:@&quot;-----END PUBLIC KEY-----&quot;];\n    if(spos.location != NSNotFound &amp;&amp; epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\r&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\n&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\t&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot; &quot;  withString:@&quot;&quot;];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPublicKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @&quot;RSAUtil_PubKey&quot;;\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *publicKey = [[NSMutableDictionary alloc] init];\n    [publicKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [publicKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)publicKey);\n\n    // Add persistent version of the key to system keychain\n    [publicKey setObject:data forKey:(__bridge id)kSecValueData];\n    [publicKey setObject:(__bridge id) kSecAttrKeyClassPublic forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)publicKey, &amp;persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) &amp;&amp; (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [publicKey removeObjectForKey:(__bridge id)kSecValueData];\n    [publicKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)publicKey, (CFTypeRef *)&amp;keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPublicKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 public key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 0;\n\n    if (c_key[idx++] != 0x30) return(nil);\n\n    if (c_key[idx] &gt; 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    // PKCS #1 rsaEncryption szOID_RSA_RSA\n    static unsigned char seqiod[] =\n    { 0x30,   0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,\n        0x01, 0x05, 0x00 };\n    if (memcmp(&amp;c_key[idx], seqiod, 15)) return(nil);\n\n    idx += 15;\n\n    if (c_key[idx++] != 0x03) return(nil);\n\n    if (c_key[idx] &gt; 0x80) idx += c_key[idx] - 0x80 + 1;\n    else idx++;\n\n    if (c_key[idx++] != &#39;\\0&#39;) return(nil);\n\n    // Now make a new NSData from this buffer\n    return ([NSData dataWithBytes:&amp;c_key[idx] length:len - idx]);\n}\n\n+ (NSData *)encryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    void *outbuf = malloc(block_size);\n    size_t src_block_size = block_size - 11;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx&lt;srclen; idx+=src_block_size){\n        //NSLog(@&quot;%d/%d block_size: %d&quot;, idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len &gt; src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyEncrypt(keyRef,\n                               kSecPaddingPKCS1,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &amp;outlen\n                               );\n        if (status != 0) {\n            NSLog(@&quot;SecKeyEncrypt fail. Error Code: %d&quot;, status);\n            ret = nil;\n            break;\n        }else{\n            [ret appendBytes:outbuf length:outlen];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Encryption with RSA public key */\n\n#pragma mark - 使用私钥字符串解密\n\n/* START: Decryption with RSA private key */\n\n//使用私钥字符串解密\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey{\n    if (!str) return nil;\n    NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n    data = [self decryptData:data privateKey:privKey];\n    NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    return ret;\n}\n\n+ (NSData *)decryptData:(NSData *)data privateKey:(NSString *)privKey{\n    if(!data || !privKey){\n        return nil;\n    }\n    SecKeyRef keyRef = [self addPrivateKey:privKey];\n    if(!keyRef){\n        return nil;\n    }\n    return [self decryptData:data withKeyRef:keyRef];\n}\n\n+ (SecKeyRef)addPrivateKey:(NSString *)key{\n    NSRange spos = [key rangeOfString:@&quot;-----BEGIN RSA PRIVATE KEY-----&quot;];\n    NSRange epos = [key rangeOfString:@&quot;-----END RSA PRIVATE KEY-----&quot;];\n    if(spos.location != NSNotFound &amp;&amp; epos.location != NSNotFound){\n        NSUInteger s = spos.location + spos.length;\n        NSUInteger e = epos.location;\n        NSRange range = NSMakeRange(s, e-s);\n        key = [key substringWithRange:range];\n    }\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\r&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\n&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot;\\t&quot; withString:@&quot;&quot;];\n    key = [key stringByReplacingOccurrencesOfString:@&quot; &quot;  withString:@&quot;&quot;];\n\n    // This will be base64 encoded, decode it.\n    NSData *data = base64_decode(key);\n    data = [self stripPrivateKeyHeader:data];\n    if(!data){\n        return nil;\n    }\n\n    //a tag to read/write keychain storage\n    NSString *tag = @&quot;RSAUtil_PrivKey&quot;;\n    NSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n    // Delete any old lingering key with the same tag\n    NSMutableDictionary *privateKey = [[NSMutableDictionary alloc] init];\n    [privateKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n    [privateKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n    SecItemDelete((__bridge CFDictionaryRef)privateKey);\n\n    // Add persistent version of the key to system keychain\n    [privateKey setObject:data forKey:(__bridge id)kSecValueData];\n    [privateKey setObject:(__bridge id) kSecAttrKeyClassPrivate forKey:(__bridge id)\n     kSecAttrKeyClass];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n     kSecReturnPersistentRef];\n\n    CFTypeRef persistKey = nil;\n    OSStatus status = SecItemAdd((__bridge CFDictionaryRef)privateKey, &amp;persistKey);\n    if (persistKey != nil){\n        CFRelease(persistKey);\n    }\n    if ((status != noErr) &amp;&amp; (status != errSecDuplicateItem)) {\n        return nil;\n    }\n\n    [privateKey removeObjectForKey:(__bridge id)kSecValueData];\n    [privateKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n    [privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n    [privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n    // Now fetch the SecKeyRef version of the key\n    SecKeyRef keyRef = nil;\n    status = SecItemCopyMatching((__bridge CFDictionaryRef)privateKey, (CFTypeRef *)&amp;keyRef);\n    if(status != noErr){\n        return nil;\n    }\n    return keyRef;\n}\n\n+ (NSData *)stripPrivateKeyHeader:(NSData *)d_key{\n    // Skip ASN.1 private key header\n    if (d_key == nil) return(nil);\n\n    unsigned long len = [d_key length];\n    if (!len) return(nil);\n\n    unsigned char *c_key = (unsigned char *)[d_key bytes];\n    unsigned int  idx     = 22; //magic byte at offset 22\n\n    if (0x04 != c_key[idx++]) return nil;\n\n    //calculate length of the key\n    unsigned int c_len = c_key[idx++];\n    int det = c_len &amp; 0x80;\n    if (!det) {\n        c_len = c_len &amp; 0x7f;\n    } else {\n        int byteCount = c_len &amp; 0x7f;\n        if (byteCount + idx &gt; len) {\n            //rsa length field longer than buffer\n            return nil;\n        }\n        unsigned int accum = 0;\n        unsigned char *ptr = &amp;c_key[idx];\n        idx += byteCount;\n        while (byteCount) {\n            accum = (accum &lt;&lt; 8) + *ptr;\n            ptr++;\n            byteCount--;\n        }\n        c_len = accum;\n    }\n\n    // Now make a new NSData from this buffer\n    return [d_key subdataWithRange:NSMakeRange(idx, c_len)];\n}\n\n+ (NSData *)decryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n    const uint8_t *srcbuf = (const uint8_t *)[data bytes];\n    size_t srclen = (size_t)data.length;\n\n    size_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n    UInt8 *outbuf = malloc(block_size);\n    size_t src_block_size = block_size;\n\n    NSMutableData *ret = [[NSMutableData alloc] init];\n    for(int idx=0; idx&lt;srclen; idx+=src_block_size){\n        //NSLog(@&quot;%d/%d block_size: %d&quot;, idx, (int)srclen, (int)block_size);\n        size_t data_len = srclen - idx;\n        if(data_len &gt; src_block_size){\n            data_len = src_block_size;\n        }\n\n        size_t outlen = block_size;\n        OSStatus status = noErr;\n        status = SecKeyDecrypt(keyRef,\n                               kSecPaddingNone,\n                               srcbuf + idx,\n                               data_len,\n                               outbuf,\n                               &amp;outlen\n                               );\n        if (status != 0) {\n            NSLog(@&quot;SecKeyEncrypt fail. Error Code: %d&quot;, status);\n            ret = nil;\n            break;\n        }else{\n            //the actual decrypted data is in the middle, locate it!\n            int idxFirstZero = -1;\n            int idxNextZero = (int)outlen;\n            for ( int i = 0; i &lt; outlen; i++ ) {\n                if ( outbuf[i] == 0 ) {\n                    if ( idxFirstZero &lt; 0 ) {\n                        idxFirstZero = i;\n                    } else {\n                        idxNextZero = i;\n                        break;\n                    }\n                }\n            }\n\n            [ret appendBytes:&amp;outbuf[idxFirstZero+1] length:idxNextZero-idxFirstZero-1];\n        }\n    }\n\n    free(outbuf);\n    CFRelease(keyRef);\n    return ret;\n}\n\n/* END: Decryption with RSA private key */\n\n@end\n</code></pre>\n<h5 id=\"4-测试加密、解密\"><a href=\"#4-测试加密、解密\" class=\"headerlink\" title=\"4. 测试加密、解密\"></a>4. 测试加密、解密</h5><p>首先先测试使用<code>.der</code>和<code>.p12</code>秘钥文件进行加密、解密, 在<code>ViewController.m</code>中进行测试, 代码如下:</p>\n<pre><code class=\"objectivec\">#import &quot;ViewController.h&quot;\n#import &quot;RSAEncryptor.h&quot;\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @&quot;这是一段将要使用&#39;.der&#39;文件加密的字符串!&quot;;\n\n    //使用.der和.p12中的公钥私钥加密解密\n    NSString *public_key_path = [[NSBundle mainBundle] pathForResource:@&quot;public_key.der&quot; ofType:nil];\n    NSString *private_key_path = [[NSBundle mainBundle] pathForResource:@&quot;private_key.p12&quot; ofType:nil];\n\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKeyWithContentsOfFile:public_key_path];\n    NSLog(@&quot;加密前:%@&quot;, originalString);\n    NSLog(@&quot;加密后:%@&quot;, encryptStr);\n    NSLog(@&quot;解密后:%@&quot;, [RSAEncryptor decryptString:encryptStr privateKeyWithContentsOfFile:private_key_path password:@&quot;123456&quot;]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n</code></pre>\n<p>运行后, 输出信息如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-837f26af766fc979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图4\"><br>可以看到已经可以成功加密、解密了.<br>下面接着测试使用秘钥字符串进行加密、解密, 那么秘钥字符串从哪里来? 可以来这里:<a href=\"http://web.chacuo.net/netrsakeypair\" target=\"_blank\" rel=\"external\">http://web.chacuo.net/netrsakeypair</a>, 这是一个在线生成RSA秘钥的网站, 生成公钥和秘钥后, 复制出来用于测试. 然后在<code>ViewController.m</code><br>中使用<code>RSAEntryptor.h</code><br>头文件中对应的加密方法进行加密, <code>ViewController.m</code><br>中代码如下:</p>\n<pre><code class=\"objectivec\">#import &quot;ViewController.h&quot;\n#import &quot;RSAEncryptor.h&quot;\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //原始数据\n    NSString *originalString = @&quot;这是一段将要使用&#39;秘钥字符串&#39;进行加密的字符串!&quot;;\n\n    //使用字符串格式的公钥私钥加密解密\n    NSString *encryptStr = [RSAEncryptor encryptString:originalString publicKey:@&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDTbZ6cNH9PgdF60aQKveLz3FTalyzHQwbp601y77SzmGHX3F5NoVUZbdK7UMdoCLK4FBziTewYD9DWvAErXZo9BFuI96bAop8wfl1VkZyyHTcznxNJFGSQd/B70/ExMgMBpEwkAAdyUqIjIdVGh1FQK/4acwS39YXwbS+IlHsPSQIDAQAB&quot;];\n\n    NSLog(@&quot;加密前:%@&quot;, originalString);\n    NSLog(@&quot;加密后:%@&quot;, encryptStr);\n    NSLog(@&quot;解密后:%@&quot;, [RSAEncryptor decryptString:encryptStr privateKey:@&quot;MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBANNtnpw0f0+B0XrRpAq94vPcVNqXLMdDBunrTXLvtLOYYdfcXk2hVRlt0rtQx2gIsrgUHOJN7BgP0Na8AStdmj0EW4j3psCinzB+XVWRnLIdNzOfE0kUZJB38HvT8TEyAwGkTCQAB3JSoiMh1UaHUVAr/hpzBLf1hfBtL4iUew9JAgMBAAECgYA1tGeQmAkqofga8XtwuxEWDoaDS9k0+EKeUoXGxzqoT/GyiihuIafjILFhoUA1ndf/yCQaG973sbTDhtfpMwqFNQq13+JAownslTjWgr7Hwf7qplYW92R7CU0v7wFfjqm1t/2FKU9JkHfaHfb7qqESMIbO/VMjER9o4tEx58uXDQJBAO0O4lnWDVjr1gN02cqvxPOtTY6DgFbQDeaAZF8obb6XqvCqGW/AVms3Bh8nVlUwdQ2K/xte8tHxjW9FtBQTLd8CQQDkUncO35gAqUF9Bhsdzrs7nO1J3VjLrM0ITrepqjqtVEvdXZc+1/UrkWVaIigWAXjQCVfmQzScdbznhYXPz5fXAkEAgB3KMRkhL4yNpmKRjhw+ih+ASeRCCSj6Sjfbhx4XaakYZmbXxnChg+JB+bZNz06YBFC5nLZM7y/n61o1f5/56wJBALw+ZVzE6ly5L34114uG04W9x0HcFgau7MiJphFjgUdAtd/H9xfgE4odMRPUD3q9Me9LlMYK6MiKpfm4c2+3dzcCQQC8y37NPgpNEkd9smMwPpSEjPW41aMlfcKvP4Da3z7G5bGlmuICrva9YDAiaAyDGGCK8LxC8K6HpKrFgYrXkRtt&quot;]);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n</code></pre>\n<p>运行后, 输出信息如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-4a11ca319806c3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图5\"><br>至此, RSA加密演示完毕!</p>\n"},{"title":"OC中的load和initialize方法","date":"2017-06-01T05:58:22.000Z","_content":"## 1.load\n顾名思义，`load`方法在这个文件被程序装载时调用。只要是在`Compile Sources`中出现的文件总是会被装载，这与这个类是否被用到无关，因此`load`方法总是在`main`函数之前调用。\n\n##  (一) 调用规则\n如果一个类实现了load方法，在调用这个方法前会首先调用父类的load方法。而且这个过程是自动完成的，并不需要我们手动实现：\n\n```objectivec\n// In Parent.m\n+ (void)load {\n    NSLog(@\"Load Class Parent\");\n}\n\n// In Child.m，继承自Parent\n+ (void)load {\n    NSLog(@\"Load Class Child\");\n}\n\n// In Child+load.m，Child类的分类\n+ (void)load {\n    NSLog(@\"Load Class Child+load\");\n}\n\n// 运行结果：\n/*\n    2016-02-01 21:28:14.379 load[11789:1435378] Load Class Parent\n    2016-02-01 21:28:14.380 load[11789:1435378] Load Class Child\n    2016-02-01 22:28:14.381 load[11789:1435378] Load Class Child+load\n*/\n```\n\n如果一个类没有实现`load`方法，那么就不会调用它父类的`load`方法，这一点与正常的类继承和方法调用不一样，需要额外注意一下。\n\n##  (二)执行顺序\n`load`方法调用时，系统处于脆弱状态，如果调用别的类的方法，且该方法依赖于那个类的`load`方法进行初始化设置，那么必须确保那个类的`load`方法已经调用了，比如这段代码，打印出的字符串就为`null`：\n\n```objectivec\n// In Child.m\n+ (void)load {\n    NSLog(@\"Load Class Child\");\n\n    Other *other = [Other new];\n    [other originalFunc];\n\n    // 如果不先调用other的load，下面这行代码就无效，打印出null\n    [Other printName];\n}\n\n```\n\n`load`方法的调用顺序其实有迹可循，我们看到demo的项目设置如下：\n![执行顺序](http://oqepgj2jp.bkt.clouddn.com/load%E5%92%8Cinitialize1.jpg)\n\n在`Compile Sources`中，文件的排放顺序就是其装载顺序，自然也就是`load`方法调用的顺序。这一点也证明了load方法中会自动调用父类的方法，因为在demo的输出结果中，`Parent`的`load`方法先于`Child`调用，而它的装载顺序其实在`Child`之后。\n\n虽然在这种简单情况下我们可以辨别出各个类的load方法调用的顺序，但永远不要依赖这个顺序完成你的代码逻辑。一方面，这在后期的开发中极容易导致错误，另一方面，你实际上并不需要这么做。\n\n\n##  (三) 使用场景\n由于调用`load`方法时的环境很不安全，我们应该尽量减少`load`方法的逻辑。另一个原因是`load`方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在`load`方法中。\n\n一个常见的使用场景是在`load`方法中实现Method Swizzle：\n\n```objectivec\n// In Other.m\n+ (void)load {\n    Method originalFunc = class_getInstanceMethod([self class], @selector(originalFunc));\n    Method swizzledFunc = class_getInstanceMethod([self class], @selector(swizzledFunc));\n\n    method_exchangeImplementations(originalFunc, swizzledFunc);\n}\n```\n在`Child`类的`load`方法中，由于还没调用`Other`的`load`方法，所以输出结果是\"Original Output\"，而在main函数中，输出结果自然就变成了\"Swizzled Output\"。\n\n一般来说，除了Method Swizzle，别的逻辑都不应该放在`load`方法中实现。\n\n## 2.initialize\n\n这个方法在第一次给某个类发送消息时调用（比如实例化一个对象），并且只会调用一次。`initialize`方法实际上是一种惰性调用，也就是说如果一个类一直没被用到，那它的 `initialize`方法也不会被调用，这一点有利于节约资源。\n\n\n##  (一) 调用规则\n\n与`load`方法类似的是，在`initialize`方法内部也会调用父类的方法，而且不需要我们显示的写出来。与`load`方法不同之处在于，即使子类没有实现`initialize`方法，也会调用父类的方法，这会导致一个很严重的问题：\n\n```objectivec\n// In Parent.m\n+ (void)initialize {\n    NSLog(@\"Initialize Parent, caller Class %@\", [self class]);\n}\n\n// In Child.m\n// 注释掉initialize方法\n\n// In main.m\nChild *child = [Child new];\n```\n\n运行后发现父类的initialize方法竟然调用了两次：\n\n```objectivec\n2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Parent\n2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Child\n```\n\n这是因为在创建子类对象时，首先要创建父类对象，所以会调用一次父类的`initialize`方法，然后创建子类时，尽管自己没有实现`initialize`方法，但还是会调用到父类的方法。\n\n虽然`initialize`方法对一个类而言只会调用一次，但这里由于出现了两个类，所以调用两次符合规则，但不符合我们的需求。正确使用`initialize`方法的姿势如下：\n\n```objectivec\n// In Parent.m\n+ (void)initialize {\n    if (self == [Parent class]) {\n        NSLog(@\"Initialize Parent, caller Class %@\", [self class]);\n    }\n}\n```\n\n加上判断后，就不会因为子类而调用到自己的`initialize`方法了。\n\n##  (二) 使用场景\n\n`initialize`方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如`NSMutableArray`这种类型的实例化依赖于`runtime`的消息发送，所以显然无法在编译器初始化：\n\n```objectivec\n// In Parent.m\nstatic int someNumber = 0;     // int类型可以在编译期赋值\nstatic NSMutableArray *someObjects;\n\n+ (void)initialize {\n    if (self == [Parent class]) {\n        // 不方便编译期复制的对象在这里赋值\n        someObjects = [[NSMutableArray alloc] init];\n    }\n}\n```\n\n## 总结\n\n`load`和`initialize`方法都会在实例化对象之前调用，以`main`函数为分水岭，前者在`main`函数之前调用，后者在之后调用。这两个方法会被自动调用，不能手动调用它们。\n`load`和`initialize`方法都不用显示的调用父类的方法而是自动调用，即使子类没有initialize方法也会调用父类的方法，而load方法则不会调用父类。\n`load`方法通常用来进行Method Swizzle，initialize方法一般用于初始化全局变量或静态变量。\n`load`和`initialize`方法内部使用了锁，因此它们是线程安全的。实现时要尽可能保持简单，避免阻塞线程，不要再使用锁。\n\n","source":"_posts/OC中的load和initialize方法.md","raw":"---\ntitle: OC中的load和initialize方法\ndate: 2017-06-01 13:58:22\ncategories: \n\t- iOS合集\n---\n## 1.load\n顾名思义，`load`方法在这个文件被程序装载时调用。只要是在`Compile Sources`中出现的文件总是会被装载，这与这个类是否被用到无关，因此`load`方法总是在`main`函数之前调用。\n\n##  (一) 调用规则\n如果一个类实现了load方法，在调用这个方法前会首先调用父类的load方法。而且这个过程是自动完成的，并不需要我们手动实现：\n\n```objectivec\n// In Parent.m\n+ (void)load {\n    NSLog(@\"Load Class Parent\");\n}\n\n// In Child.m，继承自Parent\n+ (void)load {\n    NSLog(@\"Load Class Child\");\n}\n\n// In Child+load.m，Child类的分类\n+ (void)load {\n    NSLog(@\"Load Class Child+load\");\n}\n\n// 运行结果：\n/*\n    2016-02-01 21:28:14.379 load[11789:1435378] Load Class Parent\n    2016-02-01 21:28:14.380 load[11789:1435378] Load Class Child\n    2016-02-01 22:28:14.381 load[11789:1435378] Load Class Child+load\n*/\n```\n\n如果一个类没有实现`load`方法，那么就不会调用它父类的`load`方法，这一点与正常的类继承和方法调用不一样，需要额外注意一下。\n\n##  (二)执行顺序\n`load`方法调用时，系统处于脆弱状态，如果调用别的类的方法，且该方法依赖于那个类的`load`方法进行初始化设置，那么必须确保那个类的`load`方法已经调用了，比如这段代码，打印出的字符串就为`null`：\n\n```objectivec\n// In Child.m\n+ (void)load {\n    NSLog(@\"Load Class Child\");\n\n    Other *other = [Other new];\n    [other originalFunc];\n\n    // 如果不先调用other的load，下面这行代码就无效，打印出null\n    [Other printName];\n}\n\n```\n\n`load`方法的调用顺序其实有迹可循，我们看到demo的项目设置如下：\n![执行顺序](http://oqepgj2jp.bkt.clouddn.com/load%E5%92%8Cinitialize1.jpg)\n\n在`Compile Sources`中，文件的排放顺序就是其装载顺序，自然也就是`load`方法调用的顺序。这一点也证明了load方法中会自动调用父类的方法，因为在demo的输出结果中，`Parent`的`load`方法先于`Child`调用，而它的装载顺序其实在`Child`之后。\n\n虽然在这种简单情况下我们可以辨别出各个类的load方法调用的顺序，但永远不要依赖这个顺序完成你的代码逻辑。一方面，这在后期的开发中极容易导致错误，另一方面，你实际上并不需要这么做。\n\n\n##  (三) 使用场景\n由于调用`load`方法时的环境很不安全，我们应该尽量减少`load`方法的逻辑。另一个原因是`load`方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在`load`方法中。\n\n一个常见的使用场景是在`load`方法中实现Method Swizzle：\n\n```objectivec\n// In Other.m\n+ (void)load {\n    Method originalFunc = class_getInstanceMethod([self class], @selector(originalFunc));\n    Method swizzledFunc = class_getInstanceMethod([self class], @selector(swizzledFunc));\n\n    method_exchangeImplementations(originalFunc, swizzledFunc);\n}\n```\n在`Child`类的`load`方法中，由于还没调用`Other`的`load`方法，所以输出结果是\"Original Output\"，而在main函数中，输出结果自然就变成了\"Swizzled Output\"。\n\n一般来说，除了Method Swizzle，别的逻辑都不应该放在`load`方法中实现。\n\n## 2.initialize\n\n这个方法在第一次给某个类发送消息时调用（比如实例化一个对象），并且只会调用一次。`initialize`方法实际上是一种惰性调用，也就是说如果一个类一直没被用到，那它的 `initialize`方法也不会被调用，这一点有利于节约资源。\n\n\n##  (一) 调用规则\n\n与`load`方法类似的是，在`initialize`方法内部也会调用父类的方法，而且不需要我们显示的写出来。与`load`方法不同之处在于，即使子类没有实现`initialize`方法，也会调用父类的方法，这会导致一个很严重的问题：\n\n```objectivec\n// In Parent.m\n+ (void)initialize {\n    NSLog(@\"Initialize Parent, caller Class %@\", [self class]);\n}\n\n// In Child.m\n// 注释掉initialize方法\n\n// In main.m\nChild *child = [Child new];\n```\n\n运行后发现父类的initialize方法竟然调用了两次：\n\n```objectivec\n2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Parent\n2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Child\n```\n\n这是因为在创建子类对象时，首先要创建父类对象，所以会调用一次父类的`initialize`方法，然后创建子类时，尽管自己没有实现`initialize`方法，但还是会调用到父类的方法。\n\n虽然`initialize`方法对一个类而言只会调用一次，但这里由于出现了两个类，所以调用两次符合规则，但不符合我们的需求。正确使用`initialize`方法的姿势如下：\n\n```objectivec\n// In Parent.m\n+ (void)initialize {\n    if (self == [Parent class]) {\n        NSLog(@\"Initialize Parent, caller Class %@\", [self class]);\n    }\n}\n```\n\n加上判断后，就不会因为子类而调用到自己的`initialize`方法了。\n\n##  (二) 使用场景\n\n`initialize`方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如`NSMutableArray`这种类型的实例化依赖于`runtime`的消息发送，所以显然无法在编译器初始化：\n\n```objectivec\n// In Parent.m\nstatic int someNumber = 0;     // int类型可以在编译期赋值\nstatic NSMutableArray *someObjects;\n\n+ (void)initialize {\n    if (self == [Parent class]) {\n        // 不方便编译期复制的对象在这里赋值\n        someObjects = [[NSMutableArray alloc] init];\n    }\n}\n```\n\n## 总结\n\n`load`和`initialize`方法都会在实例化对象之前调用，以`main`函数为分水岭，前者在`main`函数之前调用，后者在之后调用。这两个方法会被自动调用，不能手动调用它们。\n`load`和`initialize`方法都不用显示的调用父类的方法而是自动调用，即使子类没有initialize方法也会调用父类的方法，而load方法则不会调用父类。\n`load`方法通常用来进行Method Swizzle，initialize方法一般用于初始化全局变量或静态变量。\n`load`和`initialize`方法内部使用了锁，因此它们是线程安全的。实现时要尽可能保持简单，避免阻塞线程，不要再使用锁。\n\n","slug":"OC中的load和initialize方法","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61le00089quzcf67l7g8","content":"<h2 id=\"1-load\"><a href=\"#1-load\" class=\"headerlink\" title=\"1.load\"></a>1.load</h2><p>顾名思义，<code>load</code>方法在这个文件被程序装载时调用。只要是在<code>Compile Sources</code>中出现的文件总是会被装载，这与这个类是否被用到无关，因此<code>load</code>方法总是在<code>main</code>函数之前调用。</p>\n<h2 id=\"一-调用规则\"><a href=\"#一-调用规则\" class=\"headerlink\" title=\"(一) 调用规则\"></a>(一) 调用规则</h2><p>如果一个类实现了load方法，在调用这个方法前会首先调用父类的load方法。而且这个过程是自动完成的，并不需要我们手动实现：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Parent.m</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Load Class Parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In Child.m，继承自Parent</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Load Class Child\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In Child+load.m，Child类的分类</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Load Class Child+load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 运行结果：</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n    2016-02-01 21:28:14.379 load[11789:1435378] Load Class Parent\n    2016-02-01 21:28:14.380 load[11789:1435378] Load Class Child\n    2016-02-01 22:28:14.381 load[11789:1435378] Load Class Child+load\n*/</span>\n</code></pre>\n<p>如果一个类没有实现<code>load</code>方法，那么就不会调用它父类的<code>load</code>方法，这一点与正常的类继承和方法调用不一样，需要额外注意一下。</p>\n<h2 id=\"二-执行顺序\"><a href=\"#二-执行顺序\" class=\"headerlink\" title=\"(二)执行顺序\"></a>(二)执行顺序</h2><p><code>load</code>方法调用时，系统处于脆弱状态，如果调用别的类的方法，且该方法依赖于那个类的<code>load</code>方法进行初始化设置，那么必须确保那个类的<code>load</code>方法已经调用了，比如这段代码，打印出的字符串就为<code>null</code>：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Child.m</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Load Class Child\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Other <span class=\"token operator\">*</span>other <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Other new<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>other originalFunc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 如果不先调用other的load，下面这行代码就无效，打印出null</span>\n    <span class=\"token punctuation\">[</span>Other printName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>load</code>方法的调用顺序其实有迹可循，我们看到demo的项目设置如下：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/load%E5%92%8Cinitialize1.jpg\" alt=\"执行顺序\"></p>\n<p>在<code>Compile Sources</code>中，文件的排放顺序就是其装载顺序，自然也就是<code>load</code>方法调用的顺序。这一点也证明了load方法中会自动调用父类的方法，因为在demo的输出结果中，<code>Parent</code>的<code>load</code>方法先于<code>Child</code>调用，而它的装载顺序其实在<code>Child</code>之后。</p>\n<p>虽然在这种简单情况下我们可以辨别出各个类的load方法调用的顺序，但永远不要依赖这个顺序完成你的代码逻辑。一方面，这在后期的开发中极容易导致错误，另一方面，你实际上并不需要这么做。</p>\n<h2 id=\"三-使用场景\"><a href=\"#三-使用场景\" class=\"headerlink\" title=\"(三) 使用场景\"></a>(三) 使用场景</h2><p>由于调用<code>load</code>方法时的环境很不安全，我们应该尽量减少<code>load</code>方法的逻辑。另一个原因是<code>load</code>方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在<code>load</code>方法中。</p>\n<p>一个常见的使用场景是在<code>load</code>方法中实现Method Swizzle：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Other.m</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">{</span>\n    Method originalFunc <span class=\"token operator\">=</span> <span class=\"token function\">class_getInstanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>originalFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Method swizzledFunc <span class=\"token operator\">=</span> <span class=\"token function\">class_getInstanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>swizzledFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">method_exchangeImplementations</span><span class=\"token punctuation\">(</span>originalFunc<span class=\"token punctuation\">,</span> swizzledFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>Child</code>类的<code>load</code>方法中，由于还没调用<code>Other</code>的<code>load</code>方法，所以输出结果是”Original Output”，而在main函数中，输出结果自然就变成了”Swizzled Output”。</p>\n<p>一般来说，除了Method Swizzle，别的逻辑都不应该放在<code>load</code>方法中实现。</p>\n<h2 id=\"2-initialize\"><a href=\"#2-initialize\" class=\"headerlink\" title=\"2.initialize\"></a>2.initialize</h2><p>这个方法在第一次给某个类发送消息时调用（比如实例化一个对象），并且只会调用一次。<code>initialize</code>方法实际上是一种惰性调用，也就是说如果一个类一直没被用到，那它的 <code>initialize</code>方法也不会被调用，这一点有利于节约资源。</p>\n<h2 id=\"一-调用规则-1\"><a href=\"#一-调用规则-1\" class=\"headerlink\" title=\"(一) 调用规则\"></a>(一) 调用规则</h2><p>与<code>load</code>方法类似的是，在<code>initialize</code>方法内部也会调用父类的方法，而且不需要我们显示的写出来。与<code>load</code>方法不同之处在于，即使子类没有实现<code>initialize</code>方法，也会调用父类的方法，这会导致一个很严重的问题：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Parent.m</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>initialize <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Initialize Parent, caller Class %@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In Child.m</span>\n<span class=\"token comment\" spellcheck=\"true\">// 注释掉initialize方法</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In main.m</span>\nChild <span class=\"token operator\">*</span>child <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Child new<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行后发现父类的initialize方法竟然调用了两次：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token number\">2016</span><span class=\"token operator\">-</span><span class=\"token number\">02</span><span class=\"token operator\">-</span><span class=\"token number\">01</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span><span class=\"token punctuation\">:</span><span class=\"token number\">02.985</span> load<span class=\"token punctuation\">[</span><span class=\"token number\">12772</span><span class=\"token punctuation\">:</span><span class=\"token number\">1509345</span><span class=\"token punctuation\">]</span> Initialize Parent<span class=\"token punctuation\">,</span> caller Class Parent\n<span class=\"token number\">2016</span><span class=\"token operator\">-</span><span class=\"token number\">02</span><span class=\"token operator\">-</span><span class=\"token number\">01</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span><span class=\"token punctuation\">:</span><span class=\"token number\">02.985</span> load<span class=\"token punctuation\">[</span><span class=\"token number\">12772</span><span class=\"token punctuation\">:</span><span class=\"token number\">1509345</span><span class=\"token punctuation\">]</span> Initialize Parent<span class=\"token punctuation\">,</span> caller Class Child\n</code></pre>\n<p>这是因为在创建子类对象时，首先要创建父类对象，所以会调用一次父类的<code>initialize</code>方法，然后创建子类时，尽管自己没有实现<code>initialize</code>方法，但还是会调用到父类的方法。</p>\n<p>虽然<code>initialize</code>方法对一个类而言只会调用一次，但这里由于出现了两个类，所以调用两次符合规则，但不符合我们的需求。正确使用<code>initialize</code>方法的姿势如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Parent.m</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>initialize <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>Parent class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Initialize Parent, caller Class %@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>加上判断后，就不会因为子类而调用到自己的<code>initialize</code>方法了。</p>\n<h2 id=\"二-使用场景\"><a href=\"#二-使用场景\" class=\"headerlink\" title=\"(二) 使用场景\"></a>(二) 使用场景</h2><p><code>initialize</code>方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如<code>NSMutableArray</code>这种类型的实例化依赖于<code>runtime</code>的消息发送，所以显然无法在编译器初始化：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// In Parent.m</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> someNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// int类型可以在编译期赋值</span>\n<span class=\"token keyword\">static</span> NSMutableArray <span class=\"token operator\">*</span>someObjects<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>initialize <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>Parent class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 不方便编译期复制的对象在这里赋值</span>\n        someObjects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableArray alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>load</code>和<code>initialize</code>方法都会在实例化对象之前调用，以<code>main</code>函数为分水岭，前者在<code>main</code>函数之前调用，后者在之后调用。这两个方法会被自动调用，不能手动调用它们。<br><code>load</code>和<code>initialize</code>方法都不用显示的调用父类的方法而是自动调用，即使子类没有initialize方法也会调用父类的方法，而load方法则不会调用父类。<br><code>load</code>方法通常用来进行Method Swizzle，initialize方法一般用于初始化全局变量或静态变量。<br><code>load</code>和<code>initialize</code>方法内部使用了锁，因此它们是线程安全的。实现时要尽可能保持简单，避免阻塞线程，不要再使用锁。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-load\"><a href=\"#1-load\" class=\"headerlink\" title=\"1.load\"></a>1.load</h2><p>顾名思义，<code>load</code>方法在这个文件被程序装载时调用。只要是在<code>Compile Sources</code>中出现的文件总是会被装载，这与这个类是否被用到无关，因此<code>load</code>方法总是在<code>main</code>函数之前调用。</p>\n<h2 id=\"一-调用规则\"><a href=\"#一-调用规则\" class=\"headerlink\" title=\"(一) 调用规则\"></a>(一) 调用规则</h2><p>如果一个类实现了load方法，在调用这个方法前会首先调用父类的load方法。而且这个过程是自动完成的，并不需要我们手动实现：</p>\n<pre><code class=\"objectivec\">// In Parent.m\n+ (void)load {\n    NSLog(@&quot;Load Class Parent&quot;);\n}\n\n// In Child.m，继承自Parent\n+ (void)load {\n    NSLog(@&quot;Load Class Child&quot;);\n}\n\n// In Child+load.m，Child类的分类\n+ (void)load {\n    NSLog(@&quot;Load Class Child+load&quot;);\n}\n\n// 运行结果：\n/*\n    2016-02-01 21:28:14.379 load[11789:1435378] Load Class Parent\n    2016-02-01 21:28:14.380 load[11789:1435378] Load Class Child\n    2016-02-01 22:28:14.381 load[11789:1435378] Load Class Child+load\n*/\n</code></pre>\n<p>如果一个类没有实现<code>load</code>方法，那么就不会调用它父类的<code>load</code>方法，这一点与正常的类继承和方法调用不一样，需要额外注意一下。</p>\n<h2 id=\"二-执行顺序\"><a href=\"#二-执行顺序\" class=\"headerlink\" title=\"(二)执行顺序\"></a>(二)执行顺序</h2><p><code>load</code>方法调用时，系统处于脆弱状态，如果调用别的类的方法，且该方法依赖于那个类的<code>load</code>方法进行初始化设置，那么必须确保那个类的<code>load</code>方法已经调用了，比如这段代码，打印出的字符串就为<code>null</code>：</p>\n<pre><code class=\"objectivec\">// In Child.m\n+ (void)load {\n    NSLog(@&quot;Load Class Child&quot;);\n\n    Other *other = [Other new];\n    [other originalFunc];\n\n    // 如果不先调用other的load，下面这行代码就无效，打印出null\n    [Other printName];\n}\n</code></pre>\n<p><code>load</code>方法的调用顺序其实有迹可循，我们看到demo的项目设置如下：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/load%E5%92%8Cinitialize1.jpg\" alt=\"执行顺序\"></p>\n<p>在<code>Compile Sources</code>中，文件的排放顺序就是其装载顺序，自然也就是<code>load</code>方法调用的顺序。这一点也证明了load方法中会自动调用父类的方法，因为在demo的输出结果中，<code>Parent</code>的<code>load</code>方法先于<code>Child</code>调用，而它的装载顺序其实在<code>Child</code>之后。</p>\n<p>虽然在这种简单情况下我们可以辨别出各个类的load方法调用的顺序，但永远不要依赖这个顺序完成你的代码逻辑。一方面，这在后期的开发中极容易导致错误，另一方面，你实际上并不需要这么做。</p>\n<h2 id=\"三-使用场景\"><a href=\"#三-使用场景\" class=\"headerlink\" title=\"(三) 使用场景\"></a>(三) 使用场景</h2><p>由于调用<code>load</code>方法时的环境很不安全，我们应该尽量减少<code>load</code>方法的逻辑。另一个原因是<code>load</code>方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在<code>load</code>方法中。</p>\n<p>一个常见的使用场景是在<code>load</code>方法中实现Method Swizzle：</p>\n<pre><code class=\"objectivec\">// In Other.m\n+ (void)load {\n    Method originalFunc = class_getInstanceMethod([self class], @selector(originalFunc));\n    Method swizzledFunc = class_getInstanceMethod([self class], @selector(swizzledFunc));\n\n    method_exchangeImplementations(originalFunc, swizzledFunc);\n}\n</code></pre>\n<p>在<code>Child</code>类的<code>load</code>方法中，由于还没调用<code>Other</code>的<code>load</code>方法，所以输出结果是”Original Output”，而在main函数中，输出结果自然就变成了”Swizzled Output”。</p>\n<p>一般来说，除了Method Swizzle，别的逻辑都不应该放在<code>load</code>方法中实现。</p>\n<h2 id=\"2-initialize\"><a href=\"#2-initialize\" class=\"headerlink\" title=\"2.initialize\"></a>2.initialize</h2><p>这个方法在第一次给某个类发送消息时调用（比如实例化一个对象），并且只会调用一次。<code>initialize</code>方法实际上是一种惰性调用，也就是说如果一个类一直没被用到，那它的 <code>initialize</code>方法也不会被调用，这一点有利于节约资源。</p>\n<h2 id=\"一-调用规则-1\"><a href=\"#一-调用规则-1\" class=\"headerlink\" title=\"(一) 调用规则\"></a>(一) 调用规则</h2><p>与<code>load</code>方法类似的是，在<code>initialize</code>方法内部也会调用父类的方法，而且不需要我们显示的写出来。与<code>load</code>方法不同之处在于，即使子类没有实现<code>initialize</code>方法，也会调用父类的方法，这会导致一个很严重的问题：</p>\n<pre><code class=\"objectivec\">// In Parent.m\n+ (void)initialize {\n    NSLog(@&quot;Initialize Parent, caller Class %@&quot;, [self class]);\n}\n\n// In Child.m\n// 注释掉initialize方法\n\n// In main.m\nChild *child = [Child new];\n</code></pre>\n<p>运行后发现父类的initialize方法竟然调用了两次：</p>\n<pre><code class=\"objectivec\">2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Parent\n2016-02-01 22:57:02.985 load[12772:1509345] Initialize Parent, caller Class Child\n</code></pre>\n<p>这是因为在创建子类对象时，首先要创建父类对象，所以会调用一次父类的<code>initialize</code>方法，然后创建子类时，尽管自己没有实现<code>initialize</code>方法，但还是会调用到父类的方法。</p>\n<p>虽然<code>initialize</code>方法对一个类而言只会调用一次，但这里由于出现了两个类，所以调用两次符合规则，但不符合我们的需求。正确使用<code>initialize</code>方法的姿势如下：</p>\n<pre><code class=\"objectivec\">// In Parent.m\n+ (void)initialize {\n    if (self == [Parent class]) {\n        NSLog(@&quot;Initialize Parent, caller Class %@&quot;, [self class]);\n    }\n}\n</code></pre>\n<p>加上判断后，就不会因为子类而调用到自己的<code>initialize</code>方法了。</p>\n<h2 id=\"二-使用场景\"><a href=\"#二-使用场景\" class=\"headerlink\" title=\"(二) 使用场景\"></a>(二) 使用场景</h2><p><code>initialize</code>方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如<code>NSMutableArray</code>这种类型的实例化依赖于<code>runtime</code>的消息发送，所以显然无法在编译器初始化：</p>\n<pre><code class=\"objectivec\">// In Parent.m\nstatic int someNumber = 0;     // int类型可以在编译期赋值\nstatic NSMutableArray *someObjects;\n\n+ (void)initialize {\n    if (self == [Parent class]) {\n        // 不方便编译期复制的对象在这里赋值\n        someObjects = [[NSMutableArray alloc] init];\n    }\n}\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>load</code>和<code>initialize</code>方法都会在实例化对象之前调用，以<code>main</code>函数为分水岭，前者在<code>main</code>函数之前调用，后者在之后调用。这两个方法会被自动调用，不能手动调用它们。<br><code>load</code>和<code>initialize</code>方法都不用显示的调用父类的方法而是自动调用，即使子类没有initialize方法也会调用父类的方法，而load方法则不会调用父类。<br><code>load</code>方法通常用来进行Method Swizzle，initialize方法一般用于初始化全局变量或静态变量。<br><code>load</code>和<code>initialize</code>方法内部使用了锁，因此它们是线程安全的。实现时要尽可能保持简单，避免阻塞线程，不要再使用锁。</p>\n"},{"title":"排序算法","date":"2017-06-15T15:26:06.000Z","_content":"####  1 、 选择排序算法\n插入排序的理解： 首先,找到数组中最小的那个元素 ,其次,将它和数组的第一个元素位置 (如果第一个元 就是最小元 那么它就和自己 )。再次,在剩下的元素中找到最小的元素, 将它与数组的第二个元素交换位置。如此反复, 到将整个数组排序。这种方法叫做做选择排序,因为它在不断地选择剩余元素之中的最小者。\n解析：对于长度为 N 的数组,选择排序需要大约 N^2/2 次比较和 N 次交换。\n\n#### 图解：\n![图一](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951.png)\n\n#### 声明：\n\n```objectivec\n NSMutableArray *selectSort(NSMutableArray *array, int start)\n```\n\n#### 实现：\n\n```objectivec\nNSMutableArray *selectSort(NSMutableArray *array, int start) {\n\n    if (start == array.count ) {\n        return array;\n    }\n\n    int minNum = [array[start] intValue];\n    int minIndex = start;\n    for (int i = start ; i < array.count; i ++) {\n        if (minNum > [array[i] intValue]) {\n            minNum = [array[i] intValue];\n            minIndex = i;\n        }\n    }\n\n    [array exchangeObjectAtIndex:start withObjectAtIndex:minIndex];\n    array = selectSort(array, start + 1);\n    return array;\n}\n```\n\n#### 调用：\n\n```objectivec\n    NSArray *array = @[@(1), @(4), @(8), @(9), @(5), @(7), @(2)];\n    array = selectSort([array mutableCopy], 0);\n```\n\n#### 输出过程：\n\n```objectivec\n第一次：1, 4, 8, 9, 5, 7, 2\n第二次：1, 2, 8, 9, 5, 7, 4\n第三次：1, 2, 4, 9, 5, 7, 8\n第四次：1, 2, 4, 5, 9, 7, 8\n第五次：1, 2, 4, 5, 7, 9, 8\n最后输出： 1, 2, 4, 5, 7, 8, 9\n```\n\n- 选择排序优势：稳定，它的比较次数基本上不会改变，数据移动比较少。\n\n- 选择排序劣势：操作级别了指数级，不会因是否有序数组而改变排序时间，时间只会与数组长度有关系。\n\n\n#### 2、插入排序\n插入排序的理解：由数组的第2个位置开始比较，若果前方位置的元素比较大，则交换位置，若自己元素较大，而继续下一个元素，如此排列，那么被操作的那个元素前方位置的所有元素皆为有序。\n解析：对于随机排列的长度为 N 且主键不重复的数组,平均情况下插入排序需要~ N^2/4 次比较以及~ N^2/4 次交换。最坏情况下需要~ N^2/2 次比较和~ N^2/2 次交换,最好情况下需要 N-1次比较和 0 次交换。\n插入排序需要的交换操作和数组中倒置的数量相同,需要的比较次数大于等于倒置的数量,小于等于倒置的数量加上数组的大小再减一。\n\n#### 图解：\n\n![图二](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%952.png)\n\n\n#### 声明：\n\n```objectivec\nNSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start)\n```\n\n#### 实现：\n\n```objectivec\nNSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start) {\n\n    if (start == mArray.count) {\n        return mArray;\n    }\n\n    for (NSInteger i = start; i > 0; i --) {\n        if (mArray[i] < mArray[i-1]) {\n            int temp = [mArray[i] intValue];\n            int k =  (int)(i - 1);\n\n            while (k >= 0 && [mArray[k] intValue] > temp) {\n                mArray[k + 1] = mArray[k];\n                k -= 1;\n            }\n            mArray[k+1] = @(temp);\n        }\n    }\n\n    InsetSort(mArray, start + 1);\n\n    return mArray;\n}\n```\n\n#### 调用：\n\n```objectivec\nNSMutableArray *mArray = [@[@(49),   @(38),   @(65),   @(97),   @(26),   @(13),   @(27),   @(49),   @(55),   @(4)] mutableCopy];\nmArray = InsetSort(mArray, 1);\n```\n\n#### 输出过程：\n\n```objectivec\n第一次：38，49，65，97，26，13，27，49，55，4\n第二次：38，49，65，97，26，13，27，49，55，4\n第三次：38，49，65，97，26，13，27，49，55，4\n第四次：26，38，49，65，97，13，27，49，55，4\n第五次：13，26，38，49，65，97，27，49，55，4\n第六次：13，26，27，38，49，65，97，49，55，4\n第七次：13，26，27，38，49，49，65，97，55，4\n第八次：13，26，27，38，49，49，55，65，97，4\n最后输出：4， 13， 26， 27， 38， 49，49， 55， 65， 97\n```\n\n- 插入排序优势：对于有序数组或部分有序数组，此排序方法是十分高效的，很适合小规模的数组，很多高级的排序算法都会利用到插入排序。\n\n- 插入排序劣势：若果最少的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了，最后的元素都要比较改元素位置减一次。\n\n#### 3、希尔排序\n希尔排序为什么产生：希尔排序是以插入排序为基础的一种快速的排序算法。因为在大规模乱序数组中使用插入排序很慢，因为它只会交换相邻的两个元素，因此，如果越小的元素越是靠后，那么操作的复杂度将会大大提升，所以，人们把插入排序进行了改良，变成了希尔排序。\n希尔排序的思想：希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组为 h 有序数组。换句话说,一个 h 有序数组就是 h 个互相独 的有序数组编织在一起 成的一个数组。在进行排序时,如果 h 很大,我们就能将元素动到很远的地方,为实现更小的 h 有序创造方便。用这种方式,对于任意以 1 结尾的 h 序列,我们都能够将数组排序。这就是希尔排序。\n\n#### 图解：\n\n![图三](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%953.png)\n\n最后一个算法，用的C语言。\n\n#### 声明：\n\n```objectivec\n\n    void ShellSort(Array array)\nvoid exchange(Array array, int N, int M) {\n    int temp = array->a[N];\n    array->a[N] = array->a[M];\n    array->a[M] = temp;\n}\n\nstruct ArrayNode {\n    int a[kMaxLimit];\n    int count;\n};\n\nvoid pushNumInArray(Array array, int Num) {\n    if (array->count > 10) {\n        printf(\"数组越界了\");\n        return;\n    }\n\n    array->a[array->count] = Num;\n    array->count += 1;\n}\n\nvoid ShellSort(Array array) {\n    for (int gap = array->count / 2; gap > 0; gap/=2) {\n        for (int i = 0; i < gap; i ++) {\n\n            if (array->a[i + gap] < array->a[i]) {\n                for (int j = i + gap; j < array->count; j += gap) {\n                    if (array->a[j] < array->a[j - gap]) {\n                        // 交换\n                        exchange(array, j, j-gap);\n                    }\n                }\n            }\n\n        }\n    }\n}\n```\n\n\n#### 调用:\n\n```objectivec\n   Array array = malloc(sizeof(struct ArrayNode));\n   array->count = 0;\n\nfor (int i = 0; i < 10; i ++) {\n    pushNumInArray(array, arc4random() % 100);\n }\n\n  // 希尔排序\n  ShellSort(array);\n\n  for (int i = 0; i < array->count; i ++) {\n     printf(\"%d\\n\",array->a[i]);\n }\n```\n\n\n#### 输出过程：\n\n```objectivec\n原数组: 49   38   65   97   26   13   27   49   55   4\n第一次输出：gap = 5 / 2 = 2，数组为： 13   27   49   55   4    49   38   65   97   26\n第二次输出：gap = 2 / 2 = 1，数组为：4   26   13   27   38    49   49   55   97   65\n第三次输出：gap = 1 / 2 = 0，数组为：4   13   26   27   38    49   49   55   65   97\n```\n\n\n- 希尔排序优势：希尔排序优化了插入排序，在性能上比选择排序和插入排序快得多，而这种优势会随着数组越大变得越为明显。而且算法代码短简单，非常容易实现，所以我们基本上所有排序工作一开始都是用希尔排序，若在实际中不够快，我们再改成快速排序等更为高级的算法。\n\n- 希尔排序劣势： 排序时间复杂度的下界是n*log2n。希尔排序没有快速排序算法快 O(n(logn))，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。\n\n\n\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2017-06-15 23:26:06\ncategories: \n\t- 知识簿\n---\n####  1 、 选择排序算法\n插入排序的理解： 首先,找到数组中最小的那个元素 ,其次,将它和数组的第一个元素位置 (如果第一个元 就是最小元 那么它就和自己 )。再次,在剩下的元素中找到最小的元素, 将它与数组的第二个元素交换位置。如此反复, 到将整个数组排序。这种方法叫做做选择排序,因为它在不断地选择剩余元素之中的最小者。\n解析：对于长度为 N 的数组,选择排序需要大约 N^2/2 次比较和 N 次交换。\n\n#### 图解：\n![图一](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951.png)\n\n#### 声明：\n\n```objectivec\n NSMutableArray *selectSort(NSMutableArray *array, int start)\n```\n\n#### 实现：\n\n```objectivec\nNSMutableArray *selectSort(NSMutableArray *array, int start) {\n\n    if (start == array.count ) {\n        return array;\n    }\n\n    int minNum = [array[start] intValue];\n    int minIndex = start;\n    for (int i = start ; i < array.count; i ++) {\n        if (minNum > [array[i] intValue]) {\n            minNum = [array[i] intValue];\n            minIndex = i;\n        }\n    }\n\n    [array exchangeObjectAtIndex:start withObjectAtIndex:minIndex];\n    array = selectSort(array, start + 1);\n    return array;\n}\n```\n\n#### 调用：\n\n```objectivec\n    NSArray *array = @[@(1), @(4), @(8), @(9), @(5), @(7), @(2)];\n    array = selectSort([array mutableCopy], 0);\n```\n\n#### 输出过程：\n\n```objectivec\n第一次：1, 4, 8, 9, 5, 7, 2\n第二次：1, 2, 8, 9, 5, 7, 4\n第三次：1, 2, 4, 9, 5, 7, 8\n第四次：1, 2, 4, 5, 9, 7, 8\n第五次：1, 2, 4, 5, 7, 9, 8\n最后输出： 1, 2, 4, 5, 7, 8, 9\n```\n\n- 选择排序优势：稳定，它的比较次数基本上不会改变，数据移动比较少。\n\n- 选择排序劣势：操作级别了指数级，不会因是否有序数组而改变排序时间，时间只会与数组长度有关系。\n\n\n#### 2、插入排序\n插入排序的理解：由数组的第2个位置开始比较，若果前方位置的元素比较大，则交换位置，若自己元素较大，而继续下一个元素，如此排列，那么被操作的那个元素前方位置的所有元素皆为有序。\n解析：对于随机排列的长度为 N 且主键不重复的数组,平均情况下插入排序需要~ N^2/4 次比较以及~ N^2/4 次交换。最坏情况下需要~ N^2/2 次比较和~ N^2/2 次交换,最好情况下需要 N-1次比较和 0 次交换。\n插入排序需要的交换操作和数组中倒置的数量相同,需要的比较次数大于等于倒置的数量,小于等于倒置的数量加上数组的大小再减一。\n\n#### 图解：\n\n![图二](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%952.png)\n\n\n#### 声明：\n\n```objectivec\nNSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start)\n```\n\n#### 实现：\n\n```objectivec\nNSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start) {\n\n    if (start == mArray.count) {\n        return mArray;\n    }\n\n    for (NSInteger i = start; i > 0; i --) {\n        if (mArray[i] < mArray[i-1]) {\n            int temp = [mArray[i] intValue];\n            int k =  (int)(i - 1);\n\n            while (k >= 0 && [mArray[k] intValue] > temp) {\n                mArray[k + 1] = mArray[k];\n                k -= 1;\n            }\n            mArray[k+1] = @(temp);\n        }\n    }\n\n    InsetSort(mArray, start + 1);\n\n    return mArray;\n}\n```\n\n#### 调用：\n\n```objectivec\nNSMutableArray *mArray = [@[@(49),   @(38),   @(65),   @(97),   @(26),   @(13),   @(27),   @(49),   @(55),   @(4)] mutableCopy];\nmArray = InsetSort(mArray, 1);\n```\n\n#### 输出过程：\n\n```objectivec\n第一次：38，49，65，97，26，13，27，49，55，4\n第二次：38，49，65，97，26，13，27，49，55，4\n第三次：38，49，65，97，26，13，27，49，55，4\n第四次：26，38，49，65，97，13，27，49，55，4\n第五次：13，26，38，49，65，97，27，49，55，4\n第六次：13，26，27，38，49，65，97，49，55，4\n第七次：13，26，27，38，49，49，65，97，55，4\n第八次：13，26，27，38，49，49，55，65，97，4\n最后输出：4， 13， 26， 27， 38， 49，49， 55， 65， 97\n```\n\n- 插入排序优势：对于有序数组或部分有序数组，此排序方法是十分高效的，很适合小规模的数组，很多高级的排序算法都会利用到插入排序。\n\n- 插入排序劣势：若果最少的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了，最后的元素都要比较改元素位置减一次。\n\n#### 3、希尔排序\n希尔排序为什么产生：希尔排序是以插入排序为基础的一种快速的排序算法。因为在大规模乱序数组中使用插入排序很慢，因为它只会交换相邻的两个元素，因此，如果越小的元素越是靠后，那么操作的复杂度将会大大提升，所以，人们把插入排序进行了改良，变成了希尔排序。\n希尔排序的思想：希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组为 h 有序数组。换句话说,一个 h 有序数组就是 h 个互相独 的有序数组编织在一起 成的一个数组。在进行排序时,如果 h 很大,我们就能将元素动到很远的地方,为实现更小的 h 有序创造方便。用这种方式,对于任意以 1 结尾的 h 序列,我们都能够将数组排序。这就是希尔排序。\n\n#### 图解：\n\n![图三](http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%953.png)\n\n最后一个算法，用的C语言。\n\n#### 声明：\n\n```objectivec\n\n    void ShellSort(Array array)\nvoid exchange(Array array, int N, int M) {\n    int temp = array->a[N];\n    array->a[N] = array->a[M];\n    array->a[M] = temp;\n}\n\nstruct ArrayNode {\n    int a[kMaxLimit];\n    int count;\n};\n\nvoid pushNumInArray(Array array, int Num) {\n    if (array->count > 10) {\n        printf(\"数组越界了\");\n        return;\n    }\n\n    array->a[array->count] = Num;\n    array->count += 1;\n}\n\nvoid ShellSort(Array array) {\n    for (int gap = array->count / 2; gap > 0; gap/=2) {\n        for (int i = 0; i < gap; i ++) {\n\n            if (array->a[i + gap] < array->a[i]) {\n                for (int j = i + gap; j < array->count; j += gap) {\n                    if (array->a[j] < array->a[j - gap]) {\n                        // 交换\n                        exchange(array, j, j-gap);\n                    }\n                }\n            }\n\n        }\n    }\n}\n```\n\n\n#### 调用:\n\n```objectivec\n   Array array = malloc(sizeof(struct ArrayNode));\n   array->count = 0;\n\nfor (int i = 0; i < 10; i ++) {\n    pushNumInArray(array, arc4random() % 100);\n }\n\n  // 希尔排序\n  ShellSort(array);\n\n  for (int i = 0; i < array->count; i ++) {\n     printf(\"%d\\n\",array->a[i]);\n }\n```\n\n\n#### 输出过程：\n\n```objectivec\n原数组: 49   38   65   97   26   13   27   49   55   4\n第一次输出：gap = 5 / 2 = 2，数组为： 13   27   49   55   4    49   38   65   97   26\n第二次输出：gap = 2 / 2 = 1，数组为：4   26   13   27   38    49   49   55   97   65\n第三次输出：gap = 1 / 2 = 0，数组为：4   13   26   27   38    49   49   55   65   97\n```\n\n\n- 希尔排序优势：希尔排序优化了插入排序，在性能上比选择排序和插入排序快得多，而这种优势会随着数组越大变得越为明显。而且算法代码短简单，非常容易实现，所以我们基本上所有排序工作一开始都是用希尔排序，若在实际中不够快，我们再改成快速排序等更为高级的算法。\n\n- 希尔排序劣势： 排序时间复杂度的下界是n*log2n。希尔排序没有快速排序算法快 O(n(logn))，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。\n\n\n\n","slug":"排序算法","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lj000a9quz2i5iqhrm","content":"<h4 id=\"1-、-选择排序算法\"><a href=\"#1-、-选择排序算法\" class=\"headerlink\" title=\"1 、 选择排序算法\"></a>1 、 选择排序算法</h4><p>插入排序的理解： 首先,找到数组中最小的那个元素 ,其次,将它和数组的第一个元素位置 (如果第一个元 就是最小元 那么它就和自己 )。再次,在剩下的元素中找到最小的元素, 将它与数组的第二个元素交换位置。如此反复, 到将整个数组排序。这种方法叫做做选择排序,因为它在不断地选择剩余元素之中的最小者。<br>解析：对于长度为 N 的数组,选择排序需要大约 N^2/2 次比较和 N 次交换。</p>\n<h4 id=\"图解：\"><a href=\"#图解：\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951.png\" alt=\"图一\"></p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"> NSMutableArray <span class=\"token operator\">*</span><span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>NSMutableArray <span class=\"token operator\">*</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableArray <span class=\"token operator\">*</span><span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>NSMutableArray <span class=\"token operator\">*</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minNum <span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>array exchangeObjectAtIndex<span class=\"token punctuation\">:</span>start withObjectAtIndex<span class=\"token punctuation\">:</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array <span class=\"token operator\">=</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"调用：\"><a href=\"#调用：\" class=\"headerlink\" title=\"调用：\"></a>调用：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">    NSArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array <span class=\"token operator\">=</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>array mutableCopy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"输出过程：\"><a href=\"#输出过程：\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">第一次：<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n第二次：<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n第三次：<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span>\n第四次：<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span>\n第五次：<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span>\n最后输出： <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span>\n</code></pre>\n<ul>\n<li><p>选择排序优势：稳定，它的比较次数基本上不会改变，数据移动比较少。</p>\n</li>\n<li><p>选择排序劣势：操作级别了指数级，不会因是否有序数组而改变排序时间，时间只会与数组长度有关系。</p>\n</li>\n</ul>\n<h4 id=\"2、插入排序\"><a href=\"#2、插入排序\" class=\"headerlink\" title=\"2、插入排序\"></a>2、插入排序</h4><p>插入排序的理解：由数组的第2个位置开始比较，若果前方位置的元素比较大，则交换位置，若自己元素较大，而继续下一个元素，如此排列，那么被操作的那个元素前方位置的所有元素皆为有序。<br>解析：对于随机排列的长度为 N 且主键不重复的数组,平均情况下插入排序需要~ N^2/4 次比较以及~ N^2/4 次交换。最坏情况下需要~ N^2/2 次比较和~ N^2/2 次交换,最好情况下需要 N-1次比较和 0 次交换。<br>插入排序需要的交换操作和数组中倒置的数量相同,需要的比较次数大于等于倒置的数量,小于等于倒置的数量加上数组的大小再减一。</p>\n<h4 id=\"图解：-1\"><a href=\"#图解：-1\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%952.png\" alt=\"图二\"></p>\n<h4 id=\"声明：-1\"><a href=\"#声明：-1\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableArray <span class=\"token operator\">*</span><span class=\"token function\">InsetSort</span><span class=\"token punctuation\">(</span>NSMutableArray <span class=\"token operator\">*</span>mArray<span class=\"token punctuation\">,</span> NSInteger start<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"实现：-1\"><a href=\"#实现：-1\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableArray <span class=\"token operator\">*</span><span class=\"token function\">InsetSort</span><span class=\"token punctuation\">(</span>NSMutableArray <span class=\"token operator\">*</span>mArray<span class=\"token punctuation\">,</span> NSInteger start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> mArray<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mArray<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>NSInteger i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mArray<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span>mArray<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mArray<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mArray<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                k <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            mArray<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">InsetSort</span><span class=\"token punctuation\">(</span>mArray<span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> mArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"调用：-1\"><a href=\"#调用：-1\" class=\"headerlink\" title=\"调用：\"></a>调用：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableArray <span class=\"token operator\">*</span>mArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">49</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">49</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> mutableCopy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmArray <span class=\"token operator\">=</span> <span class=\"token function\">InsetSort</span><span class=\"token punctuation\">(</span>mArray<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"输出过程：-1\"><a href=\"#输出过程：-1\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">第一次：<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">26</span>，<span class=\"token number\">13</span>，<span class=\"token number\">27</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第二次：<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">26</span>，<span class=\"token number\">13</span>，<span class=\"token number\">27</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第三次：<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">26</span>，<span class=\"token number\">13</span>，<span class=\"token number\">27</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第四次：<span class=\"token number\">26</span>，<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">13</span>，<span class=\"token number\">27</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第五次：<span class=\"token number\">13</span>，<span class=\"token number\">26</span>，<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">27</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第六次：<span class=\"token number\">13</span>，<span class=\"token number\">26</span>，<span class=\"token number\">27</span>，<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第七次：<span class=\"token number\">13</span>，<span class=\"token number\">26</span>，<span class=\"token number\">27</span>，<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">49</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">55</span>，<span class=\"token number\">4</span>\n第八次：<span class=\"token number\">13</span>，<span class=\"token number\">26</span>，<span class=\"token number\">27</span>，<span class=\"token number\">38</span>，<span class=\"token number\">49</span>，<span class=\"token number\">49</span>，<span class=\"token number\">55</span>，<span class=\"token number\">65</span>，<span class=\"token number\">97</span>，<span class=\"token number\">4</span>\n最后输出：<span class=\"token number\">4</span>， <span class=\"token number\">13</span>， <span class=\"token number\">26</span>， <span class=\"token number\">27</span>， <span class=\"token number\">38</span>， <span class=\"token number\">49</span>，<span class=\"token number\">49</span>， <span class=\"token number\">55</span>， <span class=\"token number\">65</span>， <span class=\"token number\">97</span>\n</code></pre>\n<ul>\n<li><p>插入排序优势：对于有序数组或部分有序数组，此排序方法是十分高效的，很适合小规模的数组，很多高级的排序算法都会利用到插入排序。</p>\n</li>\n<li><p>插入排序劣势：若果最少的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了，最后的元素都要比较改元素位置减一次。</p>\n</li>\n</ul>\n<h4 id=\"3、希尔排序\"><a href=\"#3、希尔排序\" class=\"headerlink\" title=\"3、希尔排序\"></a>3、希尔排序</h4><p>希尔排序为什么产生：希尔排序是以插入排序为基础的一种快速的排序算法。因为在大规模乱序数组中使用插入排序很慢，因为它只会交换相邻的两个元素，因此，如果越小的元素越是靠后，那么操作的复杂度将会大大提升，所以，人们把插入排序进行了改良，变成了希尔排序。<br>希尔排序的思想：希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组为 h 有序数组。换句话说,一个 h 有序数组就是 h 个互相独 的有序数组编织在一起 成的一个数组。在进行排序时,如果 h 很大,我们就能将元素动到很远的地方,为实现更小的 h 有序创造方便。用这种方式,对于任意以 1 结尾的 h 序列,我们都能够将数组排序。这就是希尔排序。</p>\n<h4 id=\"图解：-2\"><a href=\"#图解：-2\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%953.png\" alt=\"图三\"></p>\n<p>最后一个算法，用的C语言。</p>\n<h4 id=\"声明：-2\"><a href=\"#声明：-2\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">\n    <span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>Array array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>Array array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> ArrayNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>kMaxLimit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushNumInArray</span><span class=\"token punctuation\">(</span>Array array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> Num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token operator\">-></span>count <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组越界了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>array<span class=\"token operator\">-></span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">;</span>\n    array<span class=\"token operator\">-></span>count <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>Array array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> array<span class=\"token operator\">-></span>count <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap<span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+</span><span class=\"token operator\">=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 交换</span>\n                        <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用:\"></a>调用:</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">   Array array <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ArrayNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pushNumInArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token function\">arc4random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 希尔排序</span>\n  <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>array<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"输出过程：-2\"><a href=\"#输出过程：-2\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\">原数组<span class=\"token punctuation\">:</span> <span class=\"token number\">49</span>   <span class=\"token number\">38</span>   <span class=\"token number\">65</span>   <span class=\"token number\">97</span>   <span class=\"token number\">26</span>   <span class=\"token number\">13</span>   <span class=\"token number\">27</span>   <span class=\"token number\">49</span>   <span class=\"token number\">55</span>   <span class=\"token number\">4</span>\n第一次输出：gap <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>，数组为： <span class=\"token number\">13</span>   <span class=\"token number\">27</span>   <span class=\"token number\">49</span>   <span class=\"token number\">55</span>   <span class=\"token number\">4</span>    <span class=\"token number\">49</span>   <span class=\"token number\">38</span>   <span class=\"token number\">65</span>   <span class=\"token number\">97</span>   <span class=\"token number\">26</span>\n第二次输出：gap <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>，数组为：<span class=\"token number\">4</span>   <span class=\"token number\">26</span>   <span class=\"token number\">13</span>   <span class=\"token number\">27</span>   <span class=\"token number\">38</span>    <span class=\"token number\">49</span>   <span class=\"token number\">49</span>   <span class=\"token number\">55</span>   <span class=\"token number\">97</span>   <span class=\"token number\">65</span>\n第三次输出：gap <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>，数组为：<span class=\"token number\">4</span>   <span class=\"token number\">13</span>   <span class=\"token number\">26</span>   <span class=\"token number\">27</span>   <span class=\"token number\">38</span>    <span class=\"token number\">49</span>   <span class=\"token number\">49</span>   <span class=\"token number\">55</span>   <span class=\"token number\">65</span>   <span class=\"token number\">97</span>\n</code></pre>\n<ul>\n<li><p>希尔排序优势：希尔排序优化了插入排序，在性能上比选择排序和插入排序快得多，而这种优势会随着数组越大变得越为明显。而且算法代码短简单，非常容易实现，所以我们基本上所有排序工作一开始都是用希尔排序，若在实际中不够快，我们再改成快速排序等更为高级的算法。</p>\n</li>\n<li><p>希尔排序劣势： 排序时间复杂度的下界是n*log2n。希尔排序没有快速排序算法快 O(n(logn))，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-、-选择排序算法\"><a href=\"#1-、-选择排序算法\" class=\"headerlink\" title=\"1 、 选择排序算法\"></a>1 、 选择排序算法</h4><p>插入排序的理解： 首先,找到数组中最小的那个元素 ,其次,将它和数组的第一个元素位置 (如果第一个元 就是最小元 那么它就和自己 )。再次,在剩下的元素中找到最小的元素, 将它与数组的第二个元素交换位置。如此反复, 到将整个数组排序。这种方法叫做做选择排序,因为它在不断地选择剩余元素之中的最小者。<br>解析：对于长度为 N 的数组,选择排序需要大约 N^2/2 次比较和 N 次交换。</p>\n<h4 id=\"图解：\"><a href=\"#图解：\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951.png\" alt=\"图一\"></p>\n<h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre><code class=\"objectivec\"> NSMutableArray *selectSort(NSMutableArray *array, int start)\n</code></pre>\n<h4 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><pre><code class=\"objectivec\">NSMutableArray *selectSort(NSMutableArray *array, int start) {\n\n    if (start == array.count ) {\n        return array;\n    }\n\n    int minNum = [array[start] intValue];\n    int minIndex = start;\n    for (int i = start ; i &lt; array.count; i ++) {\n        if (minNum &gt; [array[i] intValue]) {\n            minNum = [array[i] intValue];\n            minIndex = i;\n        }\n    }\n\n    [array exchangeObjectAtIndex:start withObjectAtIndex:minIndex];\n    array = selectSort(array, start + 1);\n    return array;\n}\n</code></pre>\n<h4 id=\"调用：\"><a href=\"#调用：\" class=\"headerlink\" title=\"调用：\"></a>调用：</h4><pre><code class=\"objectivec\">    NSArray *array = @[@(1), @(4), @(8), @(9), @(5), @(7), @(2)];\n    array = selectSort([array mutableCopy], 0);\n</code></pre>\n<h4 id=\"输出过程：\"><a href=\"#输出过程：\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre><code class=\"objectivec\">第一次：1, 4, 8, 9, 5, 7, 2\n第二次：1, 2, 8, 9, 5, 7, 4\n第三次：1, 2, 4, 9, 5, 7, 8\n第四次：1, 2, 4, 5, 9, 7, 8\n第五次：1, 2, 4, 5, 7, 9, 8\n最后输出： 1, 2, 4, 5, 7, 8, 9\n</code></pre>\n<ul>\n<li><p>选择排序优势：稳定，它的比较次数基本上不会改变，数据移动比较少。</p>\n</li>\n<li><p>选择排序劣势：操作级别了指数级，不会因是否有序数组而改变排序时间，时间只会与数组长度有关系。</p>\n</li>\n</ul>\n<h4 id=\"2、插入排序\"><a href=\"#2、插入排序\" class=\"headerlink\" title=\"2、插入排序\"></a>2、插入排序</h4><p>插入排序的理解：由数组的第2个位置开始比较，若果前方位置的元素比较大，则交换位置，若自己元素较大，而继续下一个元素，如此排列，那么被操作的那个元素前方位置的所有元素皆为有序。<br>解析：对于随机排列的长度为 N 且主键不重复的数组,平均情况下插入排序需要~ N^2/4 次比较以及~ N^2/4 次交换。最坏情况下需要~ N^2/2 次比较和~ N^2/2 次交换,最好情况下需要 N-1次比较和 0 次交换。<br>插入排序需要的交换操作和数组中倒置的数量相同,需要的比较次数大于等于倒置的数量,小于等于倒置的数量加上数组的大小再减一。</p>\n<h4 id=\"图解：-1\"><a href=\"#图解：-1\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%952.png\" alt=\"图二\"></p>\n<h4 id=\"声明：-1\"><a href=\"#声明：-1\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre><code class=\"objectivec\">NSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start)\n</code></pre>\n<h4 id=\"实现：-1\"><a href=\"#实现：-1\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><pre><code class=\"objectivec\">NSMutableArray *InsetSort(NSMutableArray *mArray, NSInteger start) {\n\n    if (start == mArray.count) {\n        return mArray;\n    }\n\n    for (NSInteger i = start; i &gt; 0; i --) {\n        if (mArray[i] &lt; mArray[i-1]) {\n            int temp = [mArray[i] intValue];\n            int k =  (int)(i - 1);\n\n            while (k &gt;= 0 &amp;&amp; [mArray[k] intValue] &gt; temp) {\n                mArray[k + 1] = mArray[k];\n                k -= 1;\n            }\n            mArray[k+1] = @(temp);\n        }\n    }\n\n    InsetSort(mArray, start + 1);\n\n    return mArray;\n}\n</code></pre>\n<h4 id=\"调用：-1\"><a href=\"#调用：-1\" class=\"headerlink\" title=\"调用：\"></a>调用：</h4><pre><code class=\"objectivec\">NSMutableArray *mArray = [@[@(49),   @(38),   @(65),   @(97),   @(26),   @(13),   @(27),   @(49),   @(55),   @(4)] mutableCopy];\nmArray = InsetSort(mArray, 1);\n</code></pre>\n<h4 id=\"输出过程：-1\"><a href=\"#输出过程：-1\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre><code class=\"objectivec\">第一次：38，49，65，97，26，13，27，49，55，4\n第二次：38，49，65，97，26，13，27，49，55，4\n第三次：38，49，65，97，26，13，27，49，55，4\n第四次：26，38，49，65，97，13，27，49，55，4\n第五次：13，26，38，49，65，97，27，49，55，4\n第六次：13，26，27，38，49，65，97，49，55，4\n第七次：13，26，27，38，49，49，65，97，55，4\n第八次：13，26，27，38，49，49，55，65，97，4\n最后输出：4， 13， 26， 27， 38， 49，49， 55， 65， 97\n</code></pre>\n<ul>\n<li><p>插入排序优势：对于有序数组或部分有序数组，此排序方法是十分高效的，很适合小规模的数组，很多高级的排序算法都会利用到插入排序。</p>\n</li>\n<li><p>插入排序劣势：若果最少的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了，最后的元素都要比较改元素位置减一次。</p>\n</li>\n</ul>\n<h4 id=\"3、希尔排序\"><a href=\"#3、希尔排序\" class=\"headerlink\" title=\"3、希尔排序\"></a>3、希尔排序</h4><p>希尔排序为什么产生：希尔排序是以插入排序为基础的一种快速的排序算法。因为在大规模乱序数组中使用插入排序很慢，因为它只会交换相邻的两个元素，因此，如果越小的元素越是靠后，那么操作的复杂度将会大大提升，所以，人们把插入排序进行了改良，变成了希尔排序。<br>希尔排序的思想：希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组为 h 有序数组。换句话说,一个 h 有序数组就是 h 个互相独 的有序数组编织在一起 成的一个数组。在进行排序时,如果 h 很大,我们就能将元素动到很远的地方,为实现更小的 h 有序创造方便。用这种方式,对于任意以 1 结尾的 h 序列,我们都能够将数组排序。这就是希尔排序。</p>\n<h4 id=\"图解：-2\"><a href=\"#图解：-2\" class=\"headerlink\" title=\"图解：\"></a>图解：</h4><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%953.png\" alt=\"图三\"></p>\n<p>最后一个算法，用的C语言。</p>\n<h4 id=\"声明：-2\"><a href=\"#声明：-2\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><pre><code class=\"objectivec\">\n    void ShellSort(Array array)\nvoid exchange(Array array, int N, int M) {\n    int temp = array-&gt;a[N];\n    array-&gt;a[N] = array-&gt;a[M];\n    array-&gt;a[M] = temp;\n}\n\nstruct ArrayNode {\n    int a[kMaxLimit];\n    int count;\n};\n\nvoid pushNumInArray(Array array, int Num) {\n    if (array-&gt;count &gt; 10) {\n        printf(&quot;数组越界了&quot;);\n        return;\n    }\n\n    array-&gt;a[array-&gt;count] = Num;\n    array-&gt;count += 1;\n}\n\nvoid ShellSort(Array array) {\n    for (int gap = array-&gt;count / 2; gap &gt; 0; gap/=2) {\n        for (int i = 0; i &lt; gap; i ++) {\n\n            if (array-&gt;a[i + gap] &lt; array-&gt;a[i]) {\n                for (int j = i + gap; j &lt; array-&gt;count; j += gap) {\n                    if (array-&gt;a[j] &lt; array-&gt;a[j - gap]) {\n                        // 交换\n                        exchange(array, j, j-gap);\n                    }\n                }\n            }\n\n        }\n    }\n}\n</code></pre>\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用:\"></a>调用:</h4><pre><code class=\"objectivec\">   Array array = malloc(sizeof(struct ArrayNode));\n   array-&gt;count = 0;\n\nfor (int i = 0; i &lt; 10; i ++) {\n    pushNumInArray(array, arc4random() % 100);\n }\n\n  // 希尔排序\n  ShellSort(array);\n\n  for (int i = 0; i &lt; array-&gt;count; i ++) {\n     printf(&quot;%d\\n&quot;,array-&gt;a[i]);\n }\n</code></pre>\n<h4 id=\"输出过程：-2\"><a href=\"#输出过程：-2\" class=\"headerlink\" title=\"输出过程：\"></a>输出过程：</h4><pre><code class=\"objectivec\">原数组: 49   38   65   97   26   13   27   49   55   4\n第一次输出：gap = 5 / 2 = 2，数组为： 13   27   49   55   4    49   38   65   97   26\n第二次输出：gap = 2 / 2 = 1，数组为：4   26   13   27   38    49   49   55   97   65\n第三次输出：gap = 1 / 2 = 0，数组为：4   13   26   27   38    49   49   55   65   97\n</code></pre>\n<ul>\n<li><p>希尔排序优势：希尔排序优化了插入排序，在性能上比选择排序和插入排序快得多，而这种优势会随着数组越大变得越为明显。而且算法代码短简单，非常容易实现，所以我们基本上所有排序工作一开始都是用希尔排序，若在实际中不够快，我们再改成快速排序等更为高级的算法。</p>\n</li>\n<li><p>希尔排序劣势： 排序时间复杂度的下界是n*log2n。希尔排序没有快速排序算法快 O(n(logn))，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。</p>\n</li>\n</ul>\n"},{"title":"HTTPS小解析","date":"2017-06-17T14:59:42.000Z","_content":"####  一、HTTPS介绍\n\n超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。\n\nHTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。\n\nhttp协议直接放置在TCP协议之上，而HTTPS提出在http和TCP中间加上一层加密层。从发送端看，这一层负责把http的内容加密后送到下层的TCP，从接收方看，这一层负责将TCP送来的数据解密还原成http的内容。所以严格地讲，HTTPS并不是一个单独的协议，而是对工作在一加密连接（TLS或SSL）上的常规HTTP协议的称呼。\n\n下面是一个简单的HTTPS协议栈的图：\n![](http://oqepgj2jp.bkt.clouddn.com/https1.png)\n\n---\n\n####  二、HTTPS流程步骤\n\n上面已经说过HTTPS主要是加了一层SSL/TLS加密，那么具体是如何进行加密，解密，验证的，且看下图：\n![](http://oqepgj2jp.bkt.clouddn.com/https2.png)\n\n\n###### 1. 客户端发起HTTPS请求\n这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。\n\n###### 2. 服务端的配置\n采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。\n\n###### 3. 传送证书\n这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\n\n###### 4. 客户端解析证书\n这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。\n\n###### 5. 传送加密信息\n这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n\n###### 6. 服务端解密信息\n服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n\n###### 7. 传输加密后的信息\n这部分信息是服务段用私钥加密后的信息，可以在客户端被还原\n\n###### 8. 客户端解密信息\n客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。\n\n---\n\n####  三、SSL/TLS概念\n\nSSL/TLS是加密通信协议，SSL由NetScape在1994年设计，1999年互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。现在主流的浏览器等都支持TLS1.2版本，如iOS9中新增App Transport Security（简称ATS）特性，强制http转向https，其中加密通信协议就需要TLS1.2及以上版本。\n\nSSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。\n\nSSL/TLS协议的基本过程是这样的：\n\n```\n（1） 客户端向服务器端索要并验证公钥。\n（2） 双方协商生成\"对话密钥\"。\n（3） 双方采用\"对话密钥\"进行加密通信。\n```\n所以说SSL/TLS协议主要是包含非对称加密（公钥加密）和对称加密，用非对称加密来得到对称加密的\"对话秘钥\"，然后用对称加密来进行加密通信。\n\n\n####  四、两个问题\n\n- 如何保证公钥不被篡改？\n\n> 解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。那如何保证证书是可信的呢？证书由CA机构进行颁发，而游览器内置了这些CA机构的根证书，只要由这些CA机构办法的数字证书即是可信的。\n\n- 为什么不直接使用公钥加密，还要加上个对称加密？\n\n> 公钥加密是非对称加密，加密计算量大，而对称加密运算速度非常快。所以这里只有第一次握手时进行公钥加密来得到对称加密的\"对话密钥\"，之后的通信就使用对称加密来进行通信了。\n\n####  五、加密算法\n\n- 对称密码算法\n\n> 是指加密和解密使用相同的密钥，典型的有DES、RC5、IDEA（分组加密），RC4（序列加密）；\n\n- 非对称密码算法\n\n> 又称为公钥加密算法，是指加密和解密使用不同的密钥（公开的公钥用于加密，私有的私钥用于解密）。比如A发送，B接收，A想确保消息只有B看到，需要B生成一对公私钥，并拿到B的公钥。于是A用这个公钥加密消息，B收到密文后用自己的与之匹配的私钥解密即可。反过来也可以用私钥加密公钥解密。也就是说对于给定的公钥有且只有与之匹配的私钥可以解密，对于给定的私钥，有且只有与之匹配的公钥可以解密。典型的算法有RSA，DSA，DH；\n\n- 散列算法\n\n> 散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。因此，散列变换通常用于验证原文是否被篡改。典型的算法有：MD5，SHA，Base64，CRC等。\n\n---\n\n####  六、关于CA及数字证书\n\n- 什么是CA\n\nCA(Certificate Authority)是数字证书认证中心的简称，是指发放、管理、废除数字证书的机构。\n\nCA的作用是检查证书持有者身份的合法性，并签发证书（在证书上签字），以防证书被伪造或篡改，以及对证书和密钥进行管理。\n\nCA 也拥有一个证书（内含公钥）和私钥。网上的公众用户通过验证 CA 的签字从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书。\n如果用户想得到一份属于自己的证书，他应先向 CA 提出申请。在 CA 判明申请者的身份后，便为他分配一个公钥，并且 CA 将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。\n\n如果一个用户想鉴别另一个证书的真伪，他就用 CA 的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。\n\n- 证书的内容\n\n数字证书的格式遵循X.509标准，X.509是由国际电信联盟（ITU-T）制定的数字证书标准，规范了公开密钥认证、证书吊销列表、授权证书、证书路径验证算法等。\n\n证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。\n\n下图就表示一个数字证书包含的内容：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https3.png)\n\n> 我们这里能看到颁发机构签名是由申请者信息经过哈希算法得到hash值，然后再用机构的私钥进行加密。所以这个签名只有办法机构的公钥才能解密，而一般权威CA机构的根证书（含公钥）都内置在浏览器中，所以客户端接收到这个数字证书后，先把申请者信息用同样的哈希算法得到hash值h1，然后用公钥进行办法机构签名解密得到hash值h2，如果h1==h2，则表示证书是有效的。\n\n下图就是Charles的根证书例子：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https4.png)\n\n####  七、编码格式\n\n同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式。\n\n**PEM** - Privacy Enhanced Mail,打开看文本格式,以\"-----BEGIN...\"开头, \"-----END...\"结尾,内容是BASE64编码.\n查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout\nApache和*NIX服务器偏向于使用这种编码格式.\n\n**DER** - Distinguished Encoding Rules,打开看是二进制格式,不可读.\n查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout\nJava和Windows服务器偏向于使用这种编码格式.\n\n####  八、相关的文件扩展名\n\n这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫\"PEM\"或者\"DER\",常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式。\n\n**CRT** - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.\n\n**CER** - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.\n\n**KEY** - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER。\n查看KEY的办法:`openssl rsa -in mykey.key -text -noout`\n如果是DER格式的话:`openssl rsa -in mykey.key -text -noout -inform der`\n\n**CSR** - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好。\n查看的办法:`openssl req -noout -text -in my.csr`\n如果是DER格式的话:`openssl req -noout -text -in my.csr -inform der`\n\n**PFX/P12** - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个\"提取密码\",你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？\n`openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes`\n这个时候会提示你输入提取代码. for-iis.pem就是可读的文本。\n生成pfx的命令类似这样:`openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out` `certificate.pfx -certfile CACert.crt`\n\n其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.\n\n**JKS** - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫\"keytool\"的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了。\n\n####  九、证书编码的转换\n\n- .crt转.der方法\n\n`openssl x509 -in cert.crt -out cert.der -outform DER`\n\n- .crt转.cer方法\n\n`openssl x509 -in cert.crt -out cert.cer -outform DER`\n\n- .crt转.pem方法\n\n`openssl x509 -in cert.crt -out cert.pem -outform PEM`\n\n\n####  十、生成自签名证书的步骤\n\n###### 建立CA\n\n- 在任意目录建立文件夹，文件夹名称任意\n\n```\nmkdir ca\n```\n\n- 进入到新建立的文件夹ca\n\n```\nd ca\n```\n\n- 生成CA私钥\n\n```\nopenssl genrsa -out ca.key 2048\n```\n\n- 用CA私钥生成CA的证书\n\n```\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \n\"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng\"\n```\n\n- 建立CA相应目录\n\n```\nmkdir demoCA\ncd demoCA/\n\nmkdir newcerts\n\ntouch index.txt\n\necho '01' > serial\n```\n\n###### 生成server端证书\n\n- 进入ca文件夹\n\n```\ncd ca\n```\n\n\n- 生成server私钥\n\n```\nopenssl genrsa -out server.key 2048\n```\n\n- 使用server私钥生成server端证书请求文件\n\n```\nopenssl req -new -key server.key -out server.csr -subj \"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=dasheng/CN=dasheng\"\n```\n\n- 使用server证书请求文件通过CA生成自签名证书\n\n```\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key\n```\n\n- 验证server证书\n\n```\nopenssl verify -CAfile ca.crt server.crt\n```\n\n###### 测试\n\n- 使用server证书测试单向认证\n\n- 打开窗口1启动server\n\n```\nopenssl s_server -accept 10001 -key server.key -cert server.crt\n```\n\n- 打开窗口2启动客户端\n\n```\nopenssl s_client -connect localhost:10001\n```\n\n- 连接成功后在任意一个窗口输入字符串会传输到另外一个窗口回显。\n\n###### 脚本\n[快速创建证书的脚本](http://ofcckdrlc.bkt.clouddn.com/generate_certificate.sh)\n使用（host表示证书用于的域名，cerFile表示证书保存的目录）：\n\n```\nsh ./generate_certificate.sh host cerFile\n```\n\n####  十一、信任自签名证书\n\n###### 查看证书链\n\nChrome57及后续版本Chrome浏览器用户如要查看SSL证书信息只能通过开发者工具（右键->检查），选择安全标签（Security）进行查看了。然后点击View certificate查看证书链，如下图为查看www.google.com的证书链：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https5.png)\n\n![](http://oqepgj2jp.bkt.clouddn.com/https6.png)\n\n###### 信任证书\n\n在MAC上直接双击证书，然后在钥匙串里就能看到这个证书了，我们能看到证书上会显示此证书是由不被信任的签发者签发的或此根证书不被信任。然后我们再在钥匙串中双击证书->信任->使用此证书时：始终信任。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https7.png)\n\n这里我们可以信任两种证书：CA根证书和CA签名过的数字证书。两种证书在钥匙串中显示的颜色是不一样的。\n\n下图就是自己创建的两种证书：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https8.png)\n\n![](http://oqepgj2jp.bkt.clouddn.com/https9.png)\n\n我们信任两种证书都可以使请求变成安全的请求，在浏览器中输入的时候就不会有不安全的提示了。这里说一下为什么两种证书都可以。\n\n首先说CA根证书，这种就是我们正常的流程，CA根证书用公钥解密数字证书的签名得到hash值，然后根据hash值相等判断证书有效。\n而不信任根证书只信任数字证书，就很容易理解了，他们本来就是同一张证书，也不用通过加密解密什么的来判断了。\n\n\n####  十二、Chrome信任根证书后提示链接不安全\n\n这里我信任根证书之后还是提示链接不安全：`ERR_CERT_WEAK_SIGNATURE_ALGORITHM`。而信任数字证书则没问题。发生这种情况的原因是`Chrome 57`版本以后是不支持SHA-1算出的hash值的证书签名的，而我们上面生成的证书默认为SHA-1，这里只要改为SHA-256就可以了。\n\n```\n//用CA私钥生成CA的证书\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng\" -sha256\n\n//使用server证书请求文件通过CA生成自签名证书\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -sha256\n```\n\n####  十三、获取证书小技巧\n\n有时候我们没有这个网站的证书，那要如何得到呢？\n\n###### 1、使用openssl能直接得到这个证书:\n\n```\nopenssl s_client -connect 172.16.10.244:8000 </dev/null 2>/dev/null | openssl x509 -outform DER > https.cer\n```\n\n###### 2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https10.png)\n\n---\n\n####  十四、iOS中使用自签名证书\n\niOS9中新增App Transport Security（简称ATS）特性, 主要使到原来请求的时候用到的HTTP，都转向TLS1.2协议进行传输。这也意味着所有的HTTP协议都强制使用了HTTPS协议进行传输。一般如果我们HTTPS服务使用的证书是CA权威机构颁发的话，客户端不用修改任何代码，因为iOS系统已经内置了这些权威机构的根证书。但是如果是自签名的证书的话就需要修改代码来内部信任这部分证书了。\n\n###### AFNetworking使用自签名证书\n\nAFNetWorking封装了如何使用自签名证书，简单的使用方式如下。\n\n```objectivec\n//先导入证书，找到证书的路径\nNSString *cerPath = [[NSBundle mainBundle] pathForResource:@\"cert\" ofType:@\"der\"];\nNSData *certData = [NSData dataWithContentsOfFile:cerPath];\nNSSet * certSet = [[NSSet alloc] initWithObjects:certData, nil];\n\n//AFSSLPinningModeNone 这个模式表示不做 SSL pinning，只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书，这里是不会通过的。\n\n//AFSSLPinningModeCertificate 这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名/有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。\n\n//AFSSLPinningModePublicKey 这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。\n\nAFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];\n// 是否允许,NO-- 不允许无效的证书\n[securityPolicy setAllowInvalidCertificates:YES];\n// 设置证书\n[securityPolicy setPinnedCertificates:certSet];\n//是否验证域名信息\nsecurityPolicy.validatesDomainName = NO;\n\n\nAFHTTPSessionManager *manager = [[AFHTTPSessionManager manager] initWithBaseURL:[NSURL URLWithString:@\"https://192.168.3.13:8000\"]];\nmanager.securityPolicy = securityPolicy;\nmanager.responseSerializer = [AFHTTPResponseSerializer serializer];\n[manager GET:@\"/getInfo\" parameters:@{@\"t\":@\"1490927497.569\"} progress:^(NSProgress * progress){\n} success:^(NSURLSessionDataTask *task, id responseObject) {\n    NSArray * array = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableLeaves error:nil];\n    NSLog(@\"OK === %@\",array);\n} failure:^(NSURLSessionDataTask *task, NSError *error) {\n    NSLog(@\"error ==%@\",error.description);\n}];\n```\n\n###### 证书需要满足的条件\n\n这里的证书使用CA根证书或CA签名的数字证书都可以。\n\n密钥交换算法有`RSA`和`ECDHE`，RSA 历史悠久，支持度好，但不支持 PFS（Perfect Forward Secrecy）；而 ECDHE 是使用了 ECC（椭圆曲线）的 DH（Diffie-Hellman）算法，计算速度快，支持 PFS。\n\niOS支持的秘钥交换算法为：至少**2048位的 RSA 密钥或至少256位的 ECC 密钥**\n\n服务器证书的哈希算法必须为 SHA-2，其摘要长度至少位256位。\n\n证书格式为.der，很多网上的教程都写的是.cer，应该是使用的旧版AFNetWorking，最新版的不支持.cer，需要使用.der格式。\n\n---\n\n####  十五、中间人攻击\n\n###### 概念\n\n关于Https最常讲到的就是中间人攻击，即所谓的Man-in-the-middle attack(MITM)。也就是攻击者插入原先攻击的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。\n\n其实http的中间人攻击是最简单的，因为http都是通过明文传输，而且没有任何认证之类的东西。我们常常用的Charles抓包就是一个最简单的中间人攻击。\n\n###### 对HTTPS进行中间人攻击\n\n我们用Charles进行HTTPS的抓包的时候会发现抓到的包都是加过密的无法查看，那是不是就意味着无法抓取HTTPS的包了呢？其实也是可以的，通过伪造证书，并且客户端又安装了Charles根证书，就可以抓取到HTTPS的包并解密了。\n\n具体的步骤是这样的，手机安装Charles根证书，手机使用Charles的代理，所有请求都经过Charles中间人。Charles劫持到请求，替换服务端的证书为自己的伪证书，然后发送给客户端，客户端使用Charles根证书来验证这个伪证书，验证通过得到公钥，然后用公钥加密对话秘钥发送回Charles中间人，Charles中间人私用私钥解密得到对话秘钥并保存，然后再把对话秘钥用服务端的公钥加密返回给服务端，这样就表示两端握手成功，可以进行通信了。而且中间人也获得了之后的对话秘钥，可以解密之后的对话信息。\n\n###### Charles实现HTTPS抓包\n\n这里基本的HTTP抓包的设置就不讲了，下面是基于实现基本的HTTP抓包的基础上来实现HTTPS的抓包解密。\n\n- 安装Charles CA根证书\n点击`Help->SSL Proxying->Install Charles Root Certification ...`，会弹出如下提示，链接代理，手机浏览器输入`chls.pro/ssl`，就可以安装根证书了。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https11.png)\n\n- 设置SSL代理\n点击`Proxy->SSL Proxying Setting`，勾选`Enable SSL Proxying`，然后点击Add输入要SSL代理的请求Host和Port，可以使用通配符来表示某一类请求。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https12.png)\n\n或者在对应的请求上右键选择`Enable SSL Proxying`，就会把这一个请求加入到上面的SSL代理列表中（类似于点击Add的效果）。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https13.png)\n\n做完上述步骤后重新请求就能得到解密后的信息了。抓取PC端的HTTPS包也类似，在`Help->SSL Proxying`中下载证书，双击安装证书，并选择始终信任即可。\n\n---\n\n#### 参考\n[超文本传输安全协议](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE)\n[图解HTTPS](http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html)\n[HTTPS从原理到应用](http://www.jianshu.com/p/e767a4e9252e)\n[那些证书相关的玩意儿](http://www.cnblogs.com/guogangj/p/4118605.html)\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n[SSL/TLS协议及Openssl工具的实现](http://www.jianshu.com/p/da65e5cd552e)\n[openssl自签名证书生成与单双向验证](http://blog.csdn.net/gx_1983/article/details/47866537)\n[iOS 10 适配 ATS](http://www.jianshu.com/p/36ddc5b009a7)\n[iOS安全系列之一：HTTPS](http://oncenote.com/2014/10/21/Security-1-HTTPS/)\n[iOS安全系列之二：HTTPS进阶](http://oncenote.com/2015/09/16/Security-2-HTTPS2/#mitm)\n\n\n\n","source":"_posts/HTTPS小解析.md","raw":"---\ntitle: HTTPS小解析\ndate: 2017-06-17 22:59:42\ncategories: \n\t- iOS合集\n---\n####  一、HTTPS介绍\n\n超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。\n\nHTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。\n\nhttp协议直接放置在TCP协议之上，而HTTPS提出在http和TCP中间加上一层加密层。从发送端看，这一层负责把http的内容加密后送到下层的TCP，从接收方看，这一层负责将TCP送来的数据解密还原成http的内容。所以严格地讲，HTTPS并不是一个单独的协议，而是对工作在一加密连接（TLS或SSL）上的常规HTTP协议的称呼。\n\n下面是一个简单的HTTPS协议栈的图：\n![](http://oqepgj2jp.bkt.clouddn.com/https1.png)\n\n---\n\n####  二、HTTPS流程步骤\n\n上面已经说过HTTPS主要是加了一层SSL/TLS加密，那么具体是如何进行加密，解密，验证的，且看下图：\n![](http://oqepgj2jp.bkt.clouddn.com/https2.png)\n\n\n###### 1. 客户端发起HTTPS请求\n这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。\n\n###### 2. 服务端的配置\n采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。\n\n###### 3. 传送证书\n这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\n\n###### 4. 客户端解析证书\n这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。\n\n###### 5. 传送加密信息\n这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n\n###### 6. 服务端解密信息\n服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n\n###### 7. 传输加密后的信息\n这部分信息是服务段用私钥加密后的信息，可以在客户端被还原\n\n###### 8. 客户端解密信息\n客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。\n\n---\n\n####  三、SSL/TLS概念\n\nSSL/TLS是加密通信协议，SSL由NetScape在1994年设计，1999年互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。现在主流的浏览器等都支持TLS1.2版本，如iOS9中新增App Transport Security（简称ATS）特性，强制http转向https，其中加密通信协议就需要TLS1.2及以上版本。\n\nSSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。\n\nSSL/TLS协议的基本过程是这样的：\n\n```\n（1） 客户端向服务器端索要并验证公钥。\n（2） 双方协商生成\"对话密钥\"。\n（3） 双方采用\"对话密钥\"进行加密通信。\n```\n所以说SSL/TLS协议主要是包含非对称加密（公钥加密）和对称加密，用非对称加密来得到对称加密的\"对话秘钥\"，然后用对称加密来进行加密通信。\n\n\n####  四、两个问题\n\n- 如何保证公钥不被篡改？\n\n> 解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。那如何保证证书是可信的呢？证书由CA机构进行颁发，而游览器内置了这些CA机构的根证书，只要由这些CA机构办法的数字证书即是可信的。\n\n- 为什么不直接使用公钥加密，还要加上个对称加密？\n\n> 公钥加密是非对称加密，加密计算量大，而对称加密运算速度非常快。所以这里只有第一次握手时进行公钥加密来得到对称加密的\"对话密钥\"，之后的通信就使用对称加密来进行通信了。\n\n####  五、加密算法\n\n- 对称密码算法\n\n> 是指加密和解密使用相同的密钥，典型的有DES、RC5、IDEA（分组加密），RC4（序列加密）；\n\n- 非对称密码算法\n\n> 又称为公钥加密算法，是指加密和解密使用不同的密钥（公开的公钥用于加密，私有的私钥用于解密）。比如A发送，B接收，A想确保消息只有B看到，需要B生成一对公私钥，并拿到B的公钥。于是A用这个公钥加密消息，B收到密文后用自己的与之匹配的私钥解密即可。反过来也可以用私钥加密公钥解密。也就是说对于给定的公钥有且只有与之匹配的私钥可以解密，对于给定的私钥，有且只有与之匹配的公钥可以解密。典型的算法有RSA，DSA，DH；\n\n- 散列算法\n\n> 散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。因此，散列变换通常用于验证原文是否被篡改。典型的算法有：MD5，SHA，Base64，CRC等。\n\n---\n\n####  六、关于CA及数字证书\n\n- 什么是CA\n\nCA(Certificate Authority)是数字证书认证中心的简称，是指发放、管理、废除数字证书的机构。\n\nCA的作用是检查证书持有者身份的合法性，并签发证书（在证书上签字），以防证书被伪造或篡改，以及对证书和密钥进行管理。\n\nCA 也拥有一个证书（内含公钥）和私钥。网上的公众用户通过验证 CA 的签字从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书。\n如果用户想得到一份属于自己的证书，他应先向 CA 提出申请。在 CA 判明申请者的身份后，便为他分配一个公钥，并且 CA 将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。\n\n如果一个用户想鉴别另一个证书的真伪，他就用 CA 的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。\n\n- 证书的内容\n\n数字证书的格式遵循X.509标准，X.509是由国际电信联盟（ITU-T）制定的数字证书标准，规范了公开密钥认证、证书吊销列表、授权证书、证书路径验证算法等。\n\n证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。\n\n下图就表示一个数字证书包含的内容：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https3.png)\n\n> 我们这里能看到颁发机构签名是由申请者信息经过哈希算法得到hash值，然后再用机构的私钥进行加密。所以这个签名只有办法机构的公钥才能解密，而一般权威CA机构的根证书（含公钥）都内置在浏览器中，所以客户端接收到这个数字证书后，先把申请者信息用同样的哈希算法得到hash值h1，然后用公钥进行办法机构签名解密得到hash值h2，如果h1==h2，则表示证书是有效的。\n\n下图就是Charles的根证书例子：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https4.png)\n\n####  七、编码格式\n\n同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式。\n\n**PEM** - Privacy Enhanced Mail,打开看文本格式,以\"-----BEGIN...\"开头, \"-----END...\"结尾,内容是BASE64编码.\n查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout\nApache和*NIX服务器偏向于使用这种编码格式.\n\n**DER** - Distinguished Encoding Rules,打开看是二进制格式,不可读.\n查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout\nJava和Windows服务器偏向于使用这种编码格式.\n\n####  八、相关的文件扩展名\n\n这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫\"PEM\"或者\"DER\",常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式。\n\n**CRT** - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.\n\n**CER** - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.\n\n**KEY** - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER。\n查看KEY的办法:`openssl rsa -in mykey.key -text -noout`\n如果是DER格式的话:`openssl rsa -in mykey.key -text -noout -inform der`\n\n**CSR** - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好。\n查看的办法:`openssl req -noout -text -in my.csr`\n如果是DER格式的话:`openssl req -noout -text -in my.csr -inform der`\n\n**PFX/P12** - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个\"提取密码\",你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？\n`openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes`\n这个时候会提示你输入提取代码. for-iis.pem就是可读的文本。\n生成pfx的命令类似这样:`openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out` `certificate.pfx -certfile CACert.crt`\n\n其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.\n\n**JKS** - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫\"keytool\"的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了。\n\n####  九、证书编码的转换\n\n- .crt转.der方法\n\n`openssl x509 -in cert.crt -out cert.der -outform DER`\n\n- .crt转.cer方法\n\n`openssl x509 -in cert.crt -out cert.cer -outform DER`\n\n- .crt转.pem方法\n\n`openssl x509 -in cert.crt -out cert.pem -outform PEM`\n\n\n####  十、生成自签名证书的步骤\n\n###### 建立CA\n\n- 在任意目录建立文件夹，文件夹名称任意\n\n```\nmkdir ca\n```\n\n- 进入到新建立的文件夹ca\n\n```\nd ca\n```\n\n- 生成CA私钥\n\n```\nopenssl genrsa -out ca.key 2048\n```\n\n- 用CA私钥生成CA的证书\n\n```\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \n\"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng\"\n```\n\n- 建立CA相应目录\n\n```\nmkdir demoCA\ncd demoCA/\n\nmkdir newcerts\n\ntouch index.txt\n\necho '01' > serial\n```\n\n###### 生成server端证书\n\n- 进入ca文件夹\n\n```\ncd ca\n```\n\n\n- 生成server私钥\n\n```\nopenssl genrsa -out server.key 2048\n```\n\n- 使用server私钥生成server端证书请求文件\n\n```\nopenssl req -new -key server.key -out server.csr -subj \"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=dasheng/CN=dasheng\"\n```\n\n- 使用server证书请求文件通过CA生成自签名证书\n\n```\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key\n```\n\n- 验证server证书\n\n```\nopenssl verify -CAfile ca.crt server.crt\n```\n\n###### 测试\n\n- 使用server证书测试单向认证\n\n- 打开窗口1启动server\n\n```\nopenssl s_server -accept 10001 -key server.key -cert server.crt\n```\n\n- 打开窗口2启动客户端\n\n```\nopenssl s_client -connect localhost:10001\n```\n\n- 连接成功后在任意一个窗口输入字符串会传输到另外一个窗口回显。\n\n###### 脚本\n[快速创建证书的脚本](http://ofcckdrlc.bkt.clouddn.com/generate_certificate.sh)\n使用（host表示证书用于的域名，cerFile表示证书保存的目录）：\n\n```\nsh ./generate_certificate.sh host cerFile\n```\n\n####  十一、信任自签名证书\n\n###### 查看证书链\n\nChrome57及后续版本Chrome浏览器用户如要查看SSL证书信息只能通过开发者工具（右键->检查），选择安全标签（Security）进行查看了。然后点击View certificate查看证书链，如下图为查看www.google.com的证书链：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https5.png)\n\n![](http://oqepgj2jp.bkt.clouddn.com/https6.png)\n\n###### 信任证书\n\n在MAC上直接双击证书，然后在钥匙串里就能看到这个证书了，我们能看到证书上会显示此证书是由不被信任的签发者签发的或此根证书不被信任。然后我们再在钥匙串中双击证书->信任->使用此证书时：始终信任。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https7.png)\n\n这里我们可以信任两种证书：CA根证书和CA签名过的数字证书。两种证书在钥匙串中显示的颜色是不一样的。\n\n下图就是自己创建的两种证书：\n\n![](http://oqepgj2jp.bkt.clouddn.com/https8.png)\n\n![](http://oqepgj2jp.bkt.clouddn.com/https9.png)\n\n我们信任两种证书都可以使请求变成安全的请求，在浏览器中输入的时候就不会有不安全的提示了。这里说一下为什么两种证书都可以。\n\n首先说CA根证书，这种就是我们正常的流程，CA根证书用公钥解密数字证书的签名得到hash值，然后根据hash值相等判断证书有效。\n而不信任根证书只信任数字证书，就很容易理解了，他们本来就是同一张证书，也不用通过加密解密什么的来判断了。\n\n\n####  十二、Chrome信任根证书后提示链接不安全\n\n这里我信任根证书之后还是提示链接不安全：`ERR_CERT_WEAK_SIGNATURE_ALGORITHM`。而信任数字证书则没问题。发生这种情况的原因是`Chrome 57`版本以后是不支持SHA-1算出的hash值的证书签名的，而我们上面生成的证书默认为SHA-1，这里只要改为SHA-256就可以了。\n\n```\n//用CA私钥生成CA的证书\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \"/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng\" -sha256\n\n//使用server证书请求文件通过CA生成自签名证书\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -sha256\n```\n\n####  十三、获取证书小技巧\n\n有时候我们没有这个网站的证书，那要如何得到呢？\n\n###### 1、使用openssl能直接得到这个证书:\n\n```\nopenssl s_client -connect 172.16.10.244:8000 </dev/null 2>/dev/null | openssl x509 -outform DER > https.cer\n```\n\n###### 2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https10.png)\n\n---\n\n####  十四、iOS中使用自签名证书\n\niOS9中新增App Transport Security（简称ATS）特性, 主要使到原来请求的时候用到的HTTP，都转向TLS1.2协议进行传输。这也意味着所有的HTTP协议都强制使用了HTTPS协议进行传输。一般如果我们HTTPS服务使用的证书是CA权威机构颁发的话，客户端不用修改任何代码，因为iOS系统已经内置了这些权威机构的根证书。但是如果是自签名的证书的话就需要修改代码来内部信任这部分证书了。\n\n###### AFNetworking使用自签名证书\n\nAFNetWorking封装了如何使用自签名证书，简单的使用方式如下。\n\n```objectivec\n//先导入证书，找到证书的路径\nNSString *cerPath = [[NSBundle mainBundle] pathForResource:@\"cert\" ofType:@\"der\"];\nNSData *certData = [NSData dataWithContentsOfFile:cerPath];\nNSSet * certSet = [[NSSet alloc] initWithObjects:certData, nil];\n\n//AFSSLPinningModeNone 这个模式表示不做 SSL pinning，只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书，这里是不会通过的。\n\n//AFSSLPinningModeCertificate 这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名/有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。\n\n//AFSSLPinningModePublicKey 这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。\n\nAFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];\n// 是否允许,NO-- 不允许无效的证书\n[securityPolicy setAllowInvalidCertificates:YES];\n// 设置证书\n[securityPolicy setPinnedCertificates:certSet];\n//是否验证域名信息\nsecurityPolicy.validatesDomainName = NO;\n\n\nAFHTTPSessionManager *manager = [[AFHTTPSessionManager manager] initWithBaseURL:[NSURL URLWithString:@\"https://192.168.3.13:8000\"]];\nmanager.securityPolicy = securityPolicy;\nmanager.responseSerializer = [AFHTTPResponseSerializer serializer];\n[manager GET:@\"/getInfo\" parameters:@{@\"t\":@\"1490927497.569\"} progress:^(NSProgress * progress){\n} success:^(NSURLSessionDataTask *task, id responseObject) {\n    NSArray * array = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableLeaves error:nil];\n    NSLog(@\"OK === %@\",array);\n} failure:^(NSURLSessionDataTask *task, NSError *error) {\n    NSLog(@\"error ==%@\",error.description);\n}];\n```\n\n###### 证书需要满足的条件\n\n这里的证书使用CA根证书或CA签名的数字证书都可以。\n\n密钥交换算法有`RSA`和`ECDHE`，RSA 历史悠久，支持度好，但不支持 PFS（Perfect Forward Secrecy）；而 ECDHE 是使用了 ECC（椭圆曲线）的 DH（Diffie-Hellman）算法，计算速度快，支持 PFS。\n\niOS支持的秘钥交换算法为：至少**2048位的 RSA 密钥或至少256位的 ECC 密钥**\n\n服务器证书的哈希算法必须为 SHA-2，其摘要长度至少位256位。\n\n证书格式为.der，很多网上的教程都写的是.cer，应该是使用的旧版AFNetWorking，最新版的不支持.cer，需要使用.der格式。\n\n---\n\n####  十五、中间人攻击\n\n###### 概念\n\n关于Https最常讲到的就是中间人攻击，即所谓的Man-in-the-middle attack(MITM)。也就是攻击者插入原先攻击的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。\n\n其实http的中间人攻击是最简单的，因为http都是通过明文传输，而且没有任何认证之类的东西。我们常常用的Charles抓包就是一个最简单的中间人攻击。\n\n###### 对HTTPS进行中间人攻击\n\n我们用Charles进行HTTPS的抓包的时候会发现抓到的包都是加过密的无法查看，那是不是就意味着无法抓取HTTPS的包了呢？其实也是可以的，通过伪造证书，并且客户端又安装了Charles根证书，就可以抓取到HTTPS的包并解密了。\n\n具体的步骤是这样的，手机安装Charles根证书，手机使用Charles的代理，所有请求都经过Charles中间人。Charles劫持到请求，替换服务端的证书为自己的伪证书，然后发送给客户端，客户端使用Charles根证书来验证这个伪证书，验证通过得到公钥，然后用公钥加密对话秘钥发送回Charles中间人，Charles中间人私用私钥解密得到对话秘钥并保存，然后再把对话秘钥用服务端的公钥加密返回给服务端，这样就表示两端握手成功，可以进行通信了。而且中间人也获得了之后的对话秘钥，可以解密之后的对话信息。\n\n###### Charles实现HTTPS抓包\n\n这里基本的HTTP抓包的设置就不讲了，下面是基于实现基本的HTTP抓包的基础上来实现HTTPS的抓包解密。\n\n- 安装Charles CA根证书\n点击`Help->SSL Proxying->Install Charles Root Certification ...`，会弹出如下提示，链接代理，手机浏览器输入`chls.pro/ssl`，就可以安装根证书了。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https11.png)\n\n- 设置SSL代理\n点击`Proxy->SSL Proxying Setting`，勾选`Enable SSL Proxying`，然后点击Add输入要SSL代理的请求Host和Port，可以使用通配符来表示某一类请求。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https12.png)\n\n或者在对应的请求上右键选择`Enable SSL Proxying`，就会把这一个请求加入到上面的SSL代理列表中（类似于点击Add的效果）。\n\n![](http://oqepgj2jp.bkt.clouddn.com/https13.png)\n\n做完上述步骤后重新请求就能得到解密后的信息了。抓取PC端的HTTPS包也类似，在`Help->SSL Proxying`中下载证书，双击安装证书，并选择始终信任即可。\n\n---\n\n#### 参考\n[超文本传输安全协议](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE)\n[图解HTTPS](http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html)\n[HTTPS从原理到应用](http://www.jianshu.com/p/e767a4e9252e)\n[那些证书相关的玩意儿](http://www.cnblogs.com/guogangj/p/4118605.html)\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n[SSL/TLS协议及Openssl工具的实现](http://www.jianshu.com/p/da65e5cd552e)\n[openssl自签名证书生成与单双向验证](http://blog.csdn.net/gx_1983/article/details/47866537)\n[iOS 10 适配 ATS](http://www.jianshu.com/p/36ddc5b009a7)\n[iOS安全系列之一：HTTPS](http://oncenote.com/2014/10/21/Security-1-HTTPS/)\n[iOS安全系列之二：HTTPS进阶](http://oncenote.com/2015/09/16/Security-2-HTTPS2/#mitm)\n\n\n\n","slug":"HTTPS小解析","published":1,"updated":"2017-06-17T15:00:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61ll000c9quzurqimlfr","content":"<h4 id=\"一、HTTPS介绍\"><a href=\"#一、HTTPS介绍\" class=\"headerlink\" title=\"一、HTTPS介绍\"></a>一、HTTPS介绍</h4><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p>\n<p>HTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。</p>\n<p>http协议直接放置在TCP协议之上，而HTTPS提出在http和TCP中间加上一层加密层。从发送端看，这一层负责把http的内容加密后送到下层的TCP，从接收方看，这一层负责将TCP送来的数据解密还原成http的内容。所以严格地讲，HTTPS并不是一个单独的协议，而是对工作在一加密连接（TLS或SSL）上的常规HTTP协议的称呼。</p>\n<p>下面是一个简单的HTTPS协议栈的图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/https1.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"二、HTTPS流程步骤\"><a href=\"#二、HTTPS流程步骤\" class=\"headerlink\" title=\"二、HTTPS流程步骤\"></a>二、HTTPS流程步骤</h4><p>上面已经说过HTTPS主要是加了一层SSL/TLS加密，那么具体是如何进行加密，解密，验证的，且看下图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/https2.png\" alt=\"\"></p>\n<h6 id=\"1-客户端发起HTTPS请求\"><a href=\"#1-客户端发起HTTPS请求\" class=\"headerlink\" title=\"1. 客户端发起HTTPS请求\"></a>1. 客户端发起HTTPS请求</h6><p>这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>\n<h6 id=\"2-服务端的配置\"><a href=\"#2-服务端的配置\" class=\"headerlink\" title=\"2. 服务端的配置\"></a>2. 服务端的配置</h6><p>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>\n<h6 id=\"3-传送证书\"><a href=\"#3-传送证书\" class=\"headerlink\" title=\"3. 传送证书\"></a>3. 传送证书</h6><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>\n<h6 id=\"4-客户端解析证书\"><a href=\"#4-客户端解析证书\" class=\"headerlink\" title=\"4. 客户端解析证书\"></a>4. 客户端解析证书</h6><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>\n<h6 id=\"5-传送加密信息\"><a href=\"#5-传送加密信息\" class=\"headerlink\" title=\"5. 传送加密信息\"></a>5. 传送加密信息</h6><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>\n<h6 id=\"6-服务端解密信息\"><a href=\"#6-服务端解密信息\" class=\"headerlink\" title=\"6. 服务端解密信息\"></a>6. 服务端解密信息</h6><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>\n<h6 id=\"7-传输加密后的信息\"><a href=\"#7-传输加密后的信息\" class=\"headerlink\" title=\"7. 传输加密后的信息\"></a>7. 传输加密后的信息</h6><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原</p>\n<h6 id=\"8-客户端解密信息\"><a href=\"#8-客户端解密信息\" class=\"headerlink\" title=\"8. 客户端解密信息\"></a>8. 客户端解密信息</h6><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>\n<hr>\n<h4 id=\"三、SSL-TLS概念\"><a href=\"#三、SSL-TLS概念\" class=\"headerlink\" title=\"三、SSL/TLS概念\"></a>三、SSL/TLS概念</h4><p>SSL/TLS是加密通信协议，SSL由NetScape在1994年设计，1999年互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。现在主流的浏览器等都支持TLS1.2版本，如iOS9中新增App Transport Security（简称ATS）特性，强制http转向https，其中加密通信协议就需要TLS1.2及以上版本。</p>\n<p>SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>\n<p>SSL/TLS协议的基本过程是这样的：</p>\n<pre><code>（1） 客户端向服务器端索要并验证公钥。\n（2） 双方协商生成&quot;对话密钥&quot;。\n（3） 双方采用&quot;对话密钥&quot;进行加密通信。\n</code></pre><p>所以说SSL/TLS协议主要是包含非对称加密（公钥加密）和对称加密，用非对称加密来得到对称加密的”对话秘钥”，然后用对称加密来进行加密通信。</p>\n<h4 id=\"四、两个问题\"><a href=\"#四、两个问题\" class=\"headerlink\" title=\"四、两个问题\"></a>四、两个问题</h4><ul>\n<li>如何保证公钥不被篡改？</li>\n</ul>\n<blockquote>\n<p>解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。那如何保证证书是可信的呢？证书由CA机构进行颁发，而游览器内置了这些CA机构的根证书，只要由这些CA机构办法的数字证书即是可信的。</p>\n</blockquote>\n<ul>\n<li>为什么不直接使用公钥加密，还要加上个对称加密？</li>\n</ul>\n<blockquote>\n<p>公钥加密是非对称加密，加密计算量大，而对称加密运算速度非常快。所以这里只有第一次握手时进行公钥加密来得到对称加密的”对话密钥”，之后的通信就使用对称加密来进行通信了。</p>\n</blockquote>\n<h4 id=\"五、加密算法\"><a href=\"#五、加密算法\" class=\"headerlink\" title=\"五、加密算法\"></a>五、加密算法</h4><ul>\n<li>对称密码算法</li>\n</ul>\n<blockquote>\n<p>是指加密和解密使用相同的密钥，典型的有DES、RC5、IDEA（分组加密），RC4（序列加密）；</p>\n</blockquote>\n<ul>\n<li>非对称密码算法</li>\n</ul>\n<blockquote>\n<p>又称为公钥加密算法，是指加密和解密使用不同的密钥（公开的公钥用于加密，私有的私钥用于解密）。比如A发送，B接收，A想确保消息只有B看到，需要B生成一对公私钥，并拿到B的公钥。于是A用这个公钥加密消息，B收到密文后用自己的与之匹配的私钥解密即可。反过来也可以用私钥加密公钥解密。也就是说对于给定的公钥有且只有与之匹配的私钥可以解密，对于给定的私钥，有且只有与之匹配的公钥可以解密。典型的算法有RSA，DSA，DH；</p>\n</blockquote>\n<ul>\n<li>散列算法</li>\n</ul>\n<blockquote>\n<p>散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。因此，散列变换通常用于验证原文是否被篡改。典型的算法有：MD5，SHA，Base64，CRC等。</p>\n</blockquote>\n<hr>\n<h4 id=\"六、关于CA及数字证书\"><a href=\"#六、关于CA及数字证书\" class=\"headerlink\" title=\"六、关于CA及数字证书\"></a>六、关于CA及数字证书</h4><ul>\n<li>什么是CA</li>\n</ul>\n<p>CA(Certificate Authority)是数字证书认证中心的简称，是指发放、管理、废除数字证书的机构。</p>\n<p>CA的作用是检查证书持有者身份的合法性，并签发证书（在证书上签字），以防证书被伪造或篡改，以及对证书和密钥进行管理。</p>\n<p>CA 也拥有一个证书（内含公钥）和私钥。网上的公众用户通过验证 CA 的签字从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书。<br>如果用户想得到一份属于自己的证书，他应先向 CA 提出申请。在 CA 判明申请者的身份后，便为他分配一个公钥，并且 CA 将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。</p>\n<p>如果一个用户想鉴别另一个证书的真伪，他就用 CA 的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。</p>\n<ul>\n<li>证书的内容</li>\n</ul>\n<p>数字证书的格式遵循X.509标准，X.509是由国际电信联盟（ITU-T）制定的数字证书标准，规范了公开密钥认证、证书吊销列表、授权证书、证书路径验证算法等。</p>\n<p>证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。</p>\n<p>下图就表示一个数字证书包含的内容：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https3.png\" alt=\"\"></p>\n<blockquote>\n<p>我们这里能看到颁发机构签名是由申请者信息经过哈希算法得到hash值，然后再用机构的私钥进行加密。所以这个签名只有办法机构的公钥才能解密，而一般权威CA机构的根证书（含公钥）都内置在浏览器中，所以客户端接收到这个数字证书后，先把申请者信息用同样的哈希算法得到hash值h1，然后用公钥进行办法机构签名解密得到hash值h2，如果h1==h2，则表示证书是有效的。</p>\n</blockquote>\n<p>下图就是Charles的根证书例子：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https4.png\" alt=\"\"></p>\n<h4 id=\"七、编码格式\"><a href=\"#七、编码格式\" class=\"headerlink\" title=\"七、编码格式\"></a>七、编码格式</h4><p>同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式。</p>\n<p><strong>PEM</strong> - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.<br>查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout<br>Apache和*NIX服务器偏向于使用这种编码格式.</p>\n<p><strong>DER</strong> - Distinguished Encoding Rules,打开看是二进制格式,不可读.<br>查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout<br>Java和Windows服务器偏向于使用这种编码格式.</p>\n<h4 id=\"八、相关的文件扩展名\"><a href=\"#八、相关的文件扩展名\" class=\"headerlink\" title=\"八、相关的文件扩展名\"></a>八、相关的文件扩展名</h4><p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫”PEM”或者”DER”,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式。</p>\n<p><strong>CRT</strong> - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.</p>\n<p><strong>CER</strong> - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.</p>\n<p><strong>KEY</strong> - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER。<br>查看KEY的办法:<code>openssl rsa -in mykey.key -text -noout</code><br>如果是DER格式的话:<code>openssl rsa -in mykey.key -text -noout -inform der</code></p>\n<p><strong>CSR</strong> - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好。<br>查看的办法:<code>openssl req -noout -text -in my.csr</code><br>如果是DER格式的话:<code>openssl req -noout -text -in my.csr -inform der</code></p>\n<p><strong>PFX/P12</strong> - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个”提取密码”,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？<br><code>openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes</code><br>这个时候会提示你输入提取代码. for-iis.pem就是可读的文本。<br>生成pfx的命令类似这样:<code>openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out</code> <code>certificate.pfx -certfile CACert.crt</code></p>\n<p>其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.</p>\n<p><strong>JKS</strong> - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫”keytool”的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了。</p>\n<h4 id=\"九、证书编码的转换\"><a href=\"#九、证书编码的转换\" class=\"headerlink\" title=\"九、证书编码的转换\"></a>九、证书编码的转换</h4><ul>\n<li>.crt转.der方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.der -outform DER</code></p>\n<ul>\n<li>.crt转.cer方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.cer -outform DER</code></p>\n<ul>\n<li>.crt转.pem方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.pem -outform PEM</code></p>\n<h4 id=\"十、生成自签名证书的步骤\"><a href=\"#十、生成自签名证书的步骤\" class=\"headerlink\" title=\"十、生成自签名证书的步骤\"></a>十、生成自签名证书的步骤</h4><h6 id=\"建立CA\"><a href=\"#建立CA\" class=\"headerlink\" title=\"建立CA\"></a>建立CA</h6><ul>\n<li>在任意目录建立文件夹，文件夹名称任意</li>\n</ul>\n<pre><code>mkdir ca\n</code></pre><ul>\n<li>进入到新建立的文件夹ca</li>\n</ul>\n<pre><code>d ca\n</code></pre><ul>\n<li>生成CA私钥</li>\n</ul>\n<pre><code>openssl genrsa -out ca.key 2048\n</code></pre><ul>\n<li>用CA私钥生成CA的证书</li>\n</ul>\n<pre><code>openssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \n&quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng&quot;\n</code></pre><ul>\n<li>建立CA相应目录</li>\n</ul>\n<pre><code>mkdir demoCA\ncd demoCA/\n\nmkdir newcerts\n\ntouch index.txt\n\necho &#39;01&#39; &gt; serial\n</code></pre><h6 id=\"生成server端证书\"><a href=\"#生成server端证书\" class=\"headerlink\" title=\"生成server端证书\"></a>生成server端证书</h6><ul>\n<li>进入ca文件夹</li>\n</ul>\n<pre><code>cd ca\n</code></pre><ul>\n<li>生成server私钥</li>\n</ul>\n<pre><code>openssl genrsa -out server.key 2048\n</code></pre><ul>\n<li>使用server私钥生成server端证书请求文件</li>\n</ul>\n<pre><code>openssl req -new -key server.key -out server.csr -subj &quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=dasheng/CN=dasheng&quot;\n</code></pre><ul>\n<li>使用server证书请求文件通过CA生成自签名证书</li>\n</ul>\n<pre><code>openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key\n</code></pre><ul>\n<li>验证server证书</li>\n</ul>\n<pre><code>openssl verify -CAfile ca.crt server.crt\n</code></pre><h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><ul>\n<li><p>使用server证书测试单向认证</p>\n</li>\n<li><p>打开窗口1启动server</p>\n</li>\n</ul>\n<pre><code>openssl s_server -accept 10001 -key server.key -cert server.crt\n</code></pre><ul>\n<li>打开窗口2启动客户端</li>\n</ul>\n<pre><code>openssl s_client -connect localhost:10001\n</code></pre><ul>\n<li>连接成功后在任意一个窗口输入字符串会传输到另外一个窗口回显。</li>\n</ul>\n<h6 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h6><p><a href=\"http://ofcckdrlc.bkt.clouddn.com/generate_certificate.sh\" target=\"_blank\" rel=\"external\">快速创建证书的脚本</a><br>使用（host表示证书用于的域名，cerFile表示证书保存的目录）：</p>\n<pre><code>sh ./generate_certificate.sh host cerFile\n</code></pre><h4 id=\"十一、信任自签名证书\"><a href=\"#十一、信任自签名证书\" class=\"headerlink\" title=\"十一、信任自签名证书\"></a>十一、信任自签名证书</h4><h6 id=\"查看证书链\"><a href=\"#查看证书链\" class=\"headerlink\" title=\"查看证书链\"></a>查看证书链</h6><p>Chrome57及后续版本Chrome浏览器用户如要查看SSL证书信息只能通过开发者工具（右键-&gt;检查），选择安全标签（Security）进行查看了。然后点击View certificate查看证书链，如下图为查看www.google.com的证书链：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https5.png\" alt=\"\"></p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https6.png\" alt=\"\"></p>\n<h6 id=\"信任证书\"><a href=\"#信任证书\" class=\"headerlink\" title=\"信任证书\"></a>信任证书</h6><p>在MAC上直接双击证书，然后在钥匙串里就能看到这个证书了，我们能看到证书上会显示此证书是由不被信任的签发者签发的或此根证书不被信任。然后我们再在钥匙串中双击证书-&gt;信任-&gt;使用此证书时：始终信任。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https7.png\" alt=\"\"></p>\n<p>这里我们可以信任两种证书：CA根证书和CA签名过的数字证书。两种证书在钥匙串中显示的颜色是不一样的。</p>\n<p>下图就是自己创建的两种证书：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https8.png\" alt=\"\"></p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https9.png\" alt=\"\"></p>\n<p>我们信任两种证书都可以使请求变成安全的请求，在浏览器中输入的时候就不会有不安全的提示了。这里说一下为什么两种证书都可以。</p>\n<p>首先说CA根证书，这种就是我们正常的流程，CA根证书用公钥解密数字证书的签名得到hash值，然后根据hash值相等判断证书有效。<br>而不信任根证书只信任数字证书，就很容易理解了，他们本来就是同一张证书，也不用通过加密解密什么的来判断了。</p>\n<h4 id=\"十二、Chrome信任根证书后提示链接不安全\"><a href=\"#十二、Chrome信任根证书后提示链接不安全\" class=\"headerlink\" title=\"十二、Chrome信任根证书后提示链接不安全\"></a>十二、Chrome信任根证书后提示链接不安全</h4><p>这里我信任根证书之后还是提示链接不安全：<code>ERR_CERT_WEAK_SIGNATURE_ALGORITHM</code>。而信任数字证书则没问题。发生这种情况的原因是<code>Chrome 57</code>版本以后是不支持SHA-1算出的hash值的证书签名的，而我们上面生成的证书默认为SHA-1，这里只要改为SHA-256就可以了。</p>\n<pre><code>//用CA私钥生成CA的证书\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj &quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng&quot; -sha256\n\n//使用server证书请求文件通过CA生成自签名证书\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -sha256\n</code></pre><h4 id=\"十三、获取证书小技巧\"><a href=\"#十三、获取证书小技巧\" class=\"headerlink\" title=\"十三、获取证书小技巧\"></a>十三、获取证书小技巧</h4><p>有时候我们没有这个网站的证书，那要如何得到呢？</p>\n<h6 id=\"1、使用openssl能直接得到这个证书\"><a href=\"#1、使用openssl能直接得到这个证书\" class=\"headerlink\" title=\"1、使用openssl能直接得到这个证书:\"></a>1、使用openssl能直接得到这个证书:</h6><pre><code>openssl s_client -connect 172.16.10.244:8000 &lt;/dev/null 2&gt;/dev/null | openssl x509 -outform DER &gt; https.cer\n</code></pre><h6 id=\"2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\"><a href=\"#2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\" class=\"headerlink\" title=\"2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\"></a>2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。</h6><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https10.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"十四、iOS中使用自签名证书\"><a href=\"#十四、iOS中使用自签名证书\" class=\"headerlink\" title=\"十四、iOS中使用自签名证书\"></a>十四、iOS中使用自签名证书</h4><p>iOS9中新增App Transport Security（简称ATS）特性, 主要使到原来请求的时候用到的HTTP，都转向TLS1.2协议进行传输。这也意味着所有的HTTP协议都强制使用了HTTPS协议进行传输。一般如果我们HTTPS服务使用的证书是CA权威机构颁发的话，客户端不用修改任何代码，因为iOS系统已经内置了这些权威机构的根证书。但是如果是自签名的证书的话就需要修改代码来内部信任这部分证书了。</p>\n<h6 id=\"AFNetworking使用自签名证书\"><a href=\"#AFNetworking使用自签名证书\" class=\"headerlink\" title=\"AFNetworking使用自签名证书\"></a>AFNetworking使用自签名证书</h6><p>AFNetWorking封装了如何使用自签名证书，简单的使用方式如下。</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//先导入证书，找到证书的路径</span>\nNSString <span class=\"token operator\">*</span>cerPath <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSBundle mainBundle<span class=\"token punctuation\">]</span> pathForResource<span class=\"token punctuation\">:</span><span class=\"token string\">@\"cert\"</span> ofType<span class=\"token punctuation\">:</span><span class=\"token string\">@\"der\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSData <span class=\"token operator\">*</span>certData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSData dataWithContentsOfFile<span class=\"token punctuation\">:</span>cerPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSSet <span class=\"token operator\">*</span> certSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSSet alloc<span class=\"token punctuation\">]</span> initWithObjects<span class=\"token punctuation\">:</span>certData<span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//AFSSLPinningModeNone 这个模式表示不做 SSL pinning，只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书，这里是不会通过的。</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//AFSSLPinningModeCertificate 这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名/有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//AFSSLPinningModePublicKey 这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。</span>\n\nAFSecurityPolicy <span class=\"token operator\">*</span>securityPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>AFSecurityPolicy policyWithPinningMode<span class=\"token punctuation\">:</span>AFSSLPinningModeNone<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 是否允许,NO-- 不允许无效的证书</span>\n<span class=\"token punctuation\">[</span>securityPolicy setAllowInvalidCertificates<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 设置证书</span>\n<span class=\"token punctuation\">[</span>securityPolicy setPinnedCertificates<span class=\"token punctuation\">:</span>certSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//是否验证域名信息</span>\nsecurityPolicy<span class=\"token punctuation\">.</span>validatesDomainName <span class=\"token operator\">=</span> NO<span class=\"token punctuation\">;</span>\n\n\nAFHTTPSessionManager <span class=\"token operator\">*</span>manager <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>AFHTTPSessionManager manager<span class=\"token punctuation\">]</span> initWithBaseURL<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSURL URLWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"https://192.168.3.13:8000\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmanager<span class=\"token punctuation\">.</span>securityPolicy <span class=\"token operator\">=</span> securityPolicy<span class=\"token punctuation\">;</span>\nmanager<span class=\"token punctuation\">.</span>responseSerializer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>AFHTTPResponseSerializer serializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>manager GET<span class=\"token punctuation\">:</span><span class=\"token string\">@\"/getInfo\"</span> parameters<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span><span class=\"token string\">@\"t\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">@\"1490927497.569\"</span><span class=\"token punctuation\">}</span> progress<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>NSProgress <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> success<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>NSURLSessionDataTask <span class=\"token operator\">*</span>task<span class=\"token punctuation\">,</span> id responseObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    NSArray <span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSJSONSerialization JSONObjectWithData<span class=\"token punctuation\">:</span>responseObject options<span class=\"token punctuation\">:</span>NSJSONReadingMutableLeaves error<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"OK === %@\"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> failure<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>NSURLSessionDataTask <span class=\"token operator\">*</span>task<span class=\"token punctuation\">,</span> NSError <span class=\"token operator\">*</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"error ==%@\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h6 id=\"证书需要满足的条件\"><a href=\"#证书需要满足的条件\" class=\"headerlink\" title=\"证书需要满足的条件\"></a>证书需要满足的条件</h6><p>这里的证书使用CA根证书或CA签名的数字证书都可以。</p>\n<p>密钥交换算法有<code>RSA</code>和<code>ECDHE</code>，RSA 历史悠久，支持度好，但不支持 PFS（Perfect Forward Secrecy）；而 ECDHE 是使用了 ECC（椭圆曲线）的 DH（Diffie-Hellman）算法，计算速度快，支持 PFS。</p>\n<p>iOS支持的秘钥交换算法为：至少<strong>2048位的 RSA 密钥或至少256位的 ECC 密钥</strong></p>\n<p>服务器证书的哈希算法必须为 SHA-2，其摘要长度至少位256位。</p>\n<p>证书格式为.der，很多网上的教程都写的是.cer，应该是使用的旧版AFNetWorking，最新版的不支持.cer，需要使用.der格式。</p>\n<hr>\n<h4 id=\"十五、中间人攻击\"><a href=\"#十五、中间人攻击\" class=\"headerlink\" title=\"十五、中间人攻击\"></a>十五、中间人攻击</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><p>关于Https最常讲到的就是中间人攻击，即所谓的Man-in-the-middle attack(MITM)。也就是攻击者插入原先攻击的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。</p>\n<p>其实http的中间人攻击是最简单的，因为http都是通过明文传输，而且没有任何认证之类的东西。我们常常用的Charles抓包就是一个最简单的中间人攻击。</p>\n<h6 id=\"对HTTPS进行中间人攻击\"><a href=\"#对HTTPS进行中间人攻击\" class=\"headerlink\" title=\"对HTTPS进行中间人攻击\"></a>对HTTPS进行中间人攻击</h6><p>我们用Charles进行HTTPS的抓包的时候会发现抓到的包都是加过密的无法查看，那是不是就意味着无法抓取HTTPS的包了呢？其实也是可以的，通过伪造证书，并且客户端又安装了Charles根证书，就可以抓取到HTTPS的包并解密了。</p>\n<p>具体的步骤是这样的，手机安装Charles根证书，手机使用Charles的代理，所有请求都经过Charles中间人。Charles劫持到请求，替换服务端的证书为自己的伪证书，然后发送给客户端，客户端使用Charles根证书来验证这个伪证书，验证通过得到公钥，然后用公钥加密对话秘钥发送回Charles中间人，Charles中间人私用私钥解密得到对话秘钥并保存，然后再把对话秘钥用服务端的公钥加密返回给服务端，这样就表示两端握手成功，可以进行通信了。而且中间人也获得了之后的对话秘钥，可以解密之后的对话信息。</p>\n<h6 id=\"Charles实现HTTPS抓包\"><a href=\"#Charles实现HTTPS抓包\" class=\"headerlink\" title=\"Charles实现HTTPS抓包\"></a>Charles实现HTTPS抓包</h6><p>这里基本的HTTP抓包的设置就不讲了，下面是基于实现基本的HTTP抓包的基础上来实现HTTPS的抓包解密。</p>\n<ul>\n<li>安装Charles CA根证书<br>点击<code>Help-&gt;SSL Proxying-&gt;Install Charles Root Certification ...</code>，会弹出如下提示，链接代理，手机浏览器输入<code>chls.pro/ssl</code>，就可以安装根证书了。</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https11.png\" alt=\"\"></p>\n<ul>\n<li>设置SSL代理<br>点击<code>Proxy-&gt;SSL Proxying Setting</code>，勾选<code>Enable SSL Proxying</code>，然后点击Add输入要SSL代理的请求Host和Port，可以使用通配符来表示某一类请求。</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https12.png\" alt=\"\"></p>\n<p>或者在对应的请求上右键选择<code>Enable SSL Proxying</code>，就会把这一个请求加入到上面的SSL代理列表中（类似于点击Add的效果）。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https13.png\" alt=\"\"></p>\n<p>做完上述步骤后重新请求就能得到解密后的信息了。抓取PC端的HTTPS包也类似，在<code>Help-&gt;SSL Proxying</code>中下载证书，双击安装证书，并选择始终信任即可。</p>\n<hr>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"external\">超文本传输安全协议</a><br><a href=\"http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\" target=\"_blank\" rel=\"external\">图解HTTPS</a><br><a href=\"http://www.jianshu.com/p/e767a4e9252e\" target=\"_blank\" rel=\"external\">HTTPS从原理到应用</a><br><a href=\"http://www.cnblogs.com/guogangj/p/4118605.html\" target=\"_blank\" rel=\"external\">那些证书相关的玩意儿</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a><br><a href=\"http://www.jianshu.com/p/da65e5cd552e\" target=\"_blank\" rel=\"external\">SSL/TLS协议及Openssl工具的实现</a><br><a href=\"http://blog.csdn.net/gx_1983/article/details/47866537\" target=\"_blank\" rel=\"external\">openssl自签名证书生成与单双向验证</a><br><a href=\"http://www.jianshu.com/p/36ddc5b009a7\" target=\"_blank\" rel=\"external\">iOS 10 适配 ATS</a><br><a href=\"http://oncenote.com/2014/10/21/Security-1-HTTPS/\" target=\"_blank\" rel=\"external\">iOS安全系列之一：HTTPS</a><br><a href=\"http://oncenote.com/2015/09/16/Security-2-HTTPS2/#mitm\" target=\"_blank\" rel=\"external\">iOS安全系列之二：HTTPS进阶</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、HTTPS介绍\"><a href=\"#一、HTTPS介绍\" class=\"headerlink\" title=\"一、HTTPS介绍\"></a>一、HTTPS介绍</h4><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p>\n<p>HTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。</p>\n<p>http协议直接放置在TCP协议之上，而HTTPS提出在http和TCP中间加上一层加密层。从发送端看，这一层负责把http的内容加密后送到下层的TCP，从接收方看，这一层负责将TCP送来的数据解密还原成http的内容。所以严格地讲，HTTPS并不是一个单独的协议，而是对工作在一加密连接（TLS或SSL）上的常规HTTP协议的称呼。</p>\n<p>下面是一个简单的HTTPS协议栈的图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/https1.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"二、HTTPS流程步骤\"><a href=\"#二、HTTPS流程步骤\" class=\"headerlink\" title=\"二、HTTPS流程步骤\"></a>二、HTTPS流程步骤</h4><p>上面已经说过HTTPS主要是加了一层SSL/TLS加密，那么具体是如何进行加密，解密，验证的，且看下图：<br><img src=\"http://oqepgj2jp.bkt.clouddn.com/https2.png\" alt=\"\"></p>\n<h6 id=\"1-客户端发起HTTPS请求\"><a href=\"#1-客户端发起HTTPS请求\" class=\"headerlink\" title=\"1. 客户端发起HTTPS请求\"></a>1. 客户端发起HTTPS请求</h6><p>这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>\n<h6 id=\"2-服务端的配置\"><a href=\"#2-服务端的配置\" class=\"headerlink\" title=\"2. 服务端的配置\"></a>2. 服务端的配置</h6><p>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>\n<h6 id=\"3-传送证书\"><a href=\"#3-传送证书\" class=\"headerlink\" title=\"3. 传送证书\"></a>3. 传送证书</h6><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>\n<h6 id=\"4-客户端解析证书\"><a href=\"#4-客户端解析证书\" class=\"headerlink\" title=\"4. 客户端解析证书\"></a>4. 客户端解析证书</h6><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>\n<h6 id=\"5-传送加密信息\"><a href=\"#5-传送加密信息\" class=\"headerlink\" title=\"5. 传送加密信息\"></a>5. 传送加密信息</h6><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>\n<h6 id=\"6-服务端解密信息\"><a href=\"#6-服务端解密信息\" class=\"headerlink\" title=\"6. 服务端解密信息\"></a>6. 服务端解密信息</h6><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>\n<h6 id=\"7-传输加密后的信息\"><a href=\"#7-传输加密后的信息\" class=\"headerlink\" title=\"7. 传输加密后的信息\"></a>7. 传输加密后的信息</h6><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原</p>\n<h6 id=\"8-客户端解密信息\"><a href=\"#8-客户端解密信息\" class=\"headerlink\" title=\"8. 客户端解密信息\"></a>8. 客户端解密信息</h6><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>\n<hr>\n<h4 id=\"三、SSL-TLS概念\"><a href=\"#三、SSL-TLS概念\" class=\"headerlink\" title=\"三、SSL/TLS概念\"></a>三、SSL/TLS概念</h4><p>SSL/TLS是加密通信协议，SSL由NetScape在1994年设计，1999年互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。现在主流的浏览器等都支持TLS1.2版本，如iOS9中新增App Transport Security（简称ATS）特性，强制http转向https，其中加密通信协议就需要TLS1.2及以上版本。</p>\n<p>SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>\n<p>SSL/TLS协议的基本过程是这样的：</p>\n<pre><code>（1） 客户端向服务器端索要并验证公钥。\n（2） 双方协商生成&quot;对话密钥&quot;。\n（3） 双方采用&quot;对话密钥&quot;进行加密通信。\n</code></pre><p>所以说SSL/TLS协议主要是包含非对称加密（公钥加密）和对称加密，用非对称加密来得到对称加密的”对话秘钥”，然后用对称加密来进行加密通信。</p>\n<h4 id=\"四、两个问题\"><a href=\"#四、两个问题\" class=\"headerlink\" title=\"四、两个问题\"></a>四、两个问题</h4><ul>\n<li>如何保证公钥不被篡改？</li>\n</ul>\n<blockquote>\n<p>解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。那如何保证证书是可信的呢？证书由CA机构进行颁发，而游览器内置了这些CA机构的根证书，只要由这些CA机构办法的数字证书即是可信的。</p>\n</blockquote>\n<ul>\n<li>为什么不直接使用公钥加密，还要加上个对称加密？</li>\n</ul>\n<blockquote>\n<p>公钥加密是非对称加密，加密计算量大，而对称加密运算速度非常快。所以这里只有第一次握手时进行公钥加密来得到对称加密的”对话密钥”，之后的通信就使用对称加密来进行通信了。</p>\n</blockquote>\n<h4 id=\"五、加密算法\"><a href=\"#五、加密算法\" class=\"headerlink\" title=\"五、加密算法\"></a>五、加密算法</h4><ul>\n<li>对称密码算法</li>\n</ul>\n<blockquote>\n<p>是指加密和解密使用相同的密钥，典型的有DES、RC5、IDEA（分组加密），RC4（序列加密）；</p>\n</blockquote>\n<ul>\n<li>非对称密码算法</li>\n</ul>\n<blockquote>\n<p>又称为公钥加密算法，是指加密和解密使用不同的密钥（公开的公钥用于加密，私有的私钥用于解密）。比如A发送，B接收，A想确保消息只有B看到，需要B生成一对公私钥，并拿到B的公钥。于是A用这个公钥加密消息，B收到密文后用自己的与之匹配的私钥解密即可。反过来也可以用私钥加密公钥解密。也就是说对于给定的公钥有且只有与之匹配的私钥可以解密，对于给定的私钥，有且只有与之匹配的公钥可以解密。典型的算法有RSA，DSA，DH；</p>\n</blockquote>\n<ul>\n<li>散列算法</li>\n</ul>\n<blockquote>\n<p>散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。因此，散列变换通常用于验证原文是否被篡改。典型的算法有：MD5，SHA，Base64，CRC等。</p>\n</blockquote>\n<hr>\n<h4 id=\"六、关于CA及数字证书\"><a href=\"#六、关于CA及数字证书\" class=\"headerlink\" title=\"六、关于CA及数字证书\"></a>六、关于CA及数字证书</h4><ul>\n<li>什么是CA</li>\n</ul>\n<p>CA(Certificate Authority)是数字证书认证中心的简称，是指发放、管理、废除数字证书的机构。</p>\n<p>CA的作用是检查证书持有者身份的合法性，并签发证书（在证书上签字），以防证书被伪造或篡改，以及对证书和密钥进行管理。</p>\n<p>CA 也拥有一个证书（内含公钥）和私钥。网上的公众用户通过验证 CA 的签字从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书。<br>如果用户想得到一份属于自己的证书，他应先向 CA 提出申请。在 CA 判明申请者的身份后，便为他分配一个公钥，并且 CA 将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。</p>\n<p>如果一个用户想鉴别另一个证书的真伪，他就用 CA 的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。</p>\n<ul>\n<li>证书的内容</li>\n</ul>\n<p>数字证书的格式遵循X.509标准，X.509是由国际电信联盟（ITU-T）制定的数字证书标准，规范了公开密钥认证、证书吊销列表、授权证书、证书路径验证算法等。</p>\n<p>证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。</p>\n<p>下图就表示一个数字证书包含的内容：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https3.png\" alt=\"\"></p>\n<blockquote>\n<p>我们这里能看到颁发机构签名是由申请者信息经过哈希算法得到hash值，然后再用机构的私钥进行加密。所以这个签名只有办法机构的公钥才能解密，而一般权威CA机构的根证书（含公钥）都内置在浏览器中，所以客户端接收到这个数字证书后，先把申请者信息用同样的哈希算法得到hash值h1，然后用公钥进行办法机构签名解密得到hash值h2，如果h1==h2，则表示证书是有效的。</p>\n</blockquote>\n<p>下图就是Charles的根证书例子：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https4.png\" alt=\"\"></p>\n<h4 id=\"七、编码格式\"><a href=\"#七、编码格式\" class=\"headerlink\" title=\"七、编码格式\"></a>七、编码格式</h4><p>同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式。</p>\n<p><strong>PEM</strong> - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.<br>查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout<br>Apache和*NIX服务器偏向于使用这种编码格式.</p>\n<p><strong>DER</strong> - Distinguished Encoding Rules,打开看是二进制格式,不可读.<br>查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout<br>Java和Windows服务器偏向于使用这种编码格式.</p>\n<h4 id=\"八、相关的文件扩展名\"><a href=\"#八、相关的文件扩展名\" class=\"headerlink\" title=\"八、相关的文件扩展名\"></a>八、相关的文件扩展名</h4><p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫”PEM”或者”DER”,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式。</p>\n<p><strong>CRT</strong> - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.</p>\n<p><strong>CER</strong> - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.</p>\n<p><strong>KEY</strong> - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER。<br>查看KEY的办法:<code>openssl rsa -in mykey.key -text -noout</code><br>如果是DER格式的话:<code>openssl rsa -in mykey.key -text -noout -inform der</code></p>\n<p><strong>CSR</strong> - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好。<br>查看的办法:<code>openssl req -noout -text -in my.csr</code><br>如果是DER格式的话:<code>openssl req -noout -text -in my.csr -inform der</code></p>\n<p><strong>PFX/P12</strong> - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个”提取密码”,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？<br><code>openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes</code><br>这个时候会提示你输入提取代码. for-iis.pem就是可读的文本。<br>生成pfx的命令类似这样:<code>openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out</code> <code>certificate.pfx -certfile CACert.crt</code></p>\n<p>其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.</p>\n<p><strong>JKS</strong> - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫”keytool”的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了。</p>\n<h4 id=\"九、证书编码的转换\"><a href=\"#九、证书编码的转换\" class=\"headerlink\" title=\"九、证书编码的转换\"></a>九、证书编码的转换</h4><ul>\n<li>.crt转.der方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.der -outform DER</code></p>\n<ul>\n<li>.crt转.cer方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.cer -outform DER</code></p>\n<ul>\n<li>.crt转.pem方法</li>\n</ul>\n<p><code>openssl x509 -in cert.crt -out cert.pem -outform PEM</code></p>\n<h4 id=\"十、生成自签名证书的步骤\"><a href=\"#十、生成自签名证书的步骤\" class=\"headerlink\" title=\"十、生成自签名证书的步骤\"></a>十、生成自签名证书的步骤</h4><h6 id=\"建立CA\"><a href=\"#建立CA\" class=\"headerlink\" title=\"建立CA\"></a>建立CA</h6><ul>\n<li>在任意目录建立文件夹，文件夹名称任意</li>\n</ul>\n<pre><code>mkdir ca\n</code></pre><ul>\n<li>进入到新建立的文件夹ca</li>\n</ul>\n<pre><code>d ca\n</code></pre><ul>\n<li>生成CA私钥</li>\n</ul>\n<pre><code>openssl genrsa -out ca.key 2048\n</code></pre><ul>\n<li>用CA私钥生成CA的证书</li>\n</ul>\n<pre><code>openssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj \n&quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng&quot;\n</code></pre><ul>\n<li>建立CA相应目录</li>\n</ul>\n<pre><code>mkdir demoCA\ncd demoCA/\n\nmkdir newcerts\n\ntouch index.txt\n\necho &#39;01&#39; &gt; serial\n</code></pre><h6 id=\"生成server端证书\"><a href=\"#生成server端证书\" class=\"headerlink\" title=\"生成server端证书\"></a>生成server端证书</h6><ul>\n<li>进入ca文件夹</li>\n</ul>\n<pre><code>cd ca\n</code></pre><ul>\n<li>生成server私钥</li>\n</ul>\n<pre><code>openssl genrsa -out server.key 2048\n</code></pre><ul>\n<li>使用server私钥生成server端证书请求文件</li>\n</ul>\n<pre><code>openssl req -new -key server.key -out server.csr -subj &quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=dasheng/CN=dasheng&quot;\n</code></pre><ul>\n<li>使用server证书请求文件通过CA生成自签名证书</li>\n</ul>\n<pre><code>openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key\n</code></pre><ul>\n<li>验证server证书</li>\n</ul>\n<pre><code>openssl verify -CAfile ca.crt server.crt\n</code></pre><h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><ul>\n<li><p>使用server证书测试单向认证</p>\n</li>\n<li><p>打开窗口1启动server</p>\n</li>\n</ul>\n<pre><code>openssl s_server -accept 10001 -key server.key -cert server.crt\n</code></pre><ul>\n<li>打开窗口2启动客户端</li>\n</ul>\n<pre><code>openssl s_client -connect localhost:10001\n</code></pre><ul>\n<li>连接成功后在任意一个窗口输入字符串会传输到另外一个窗口回显。</li>\n</ul>\n<h6 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h6><p><a href=\"http://ofcckdrlc.bkt.clouddn.com/generate_certificate.sh\" target=\"_blank\" rel=\"external\">快速创建证书的脚本</a><br>使用（host表示证书用于的域名，cerFile表示证书保存的目录）：</p>\n<pre><code>sh ./generate_certificate.sh host cerFile\n</code></pre><h4 id=\"十一、信任自签名证书\"><a href=\"#十一、信任自签名证书\" class=\"headerlink\" title=\"十一、信任自签名证书\"></a>十一、信任自签名证书</h4><h6 id=\"查看证书链\"><a href=\"#查看证书链\" class=\"headerlink\" title=\"查看证书链\"></a>查看证书链</h6><p>Chrome57及后续版本Chrome浏览器用户如要查看SSL证书信息只能通过开发者工具（右键-&gt;检查），选择安全标签（Security）进行查看了。然后点击View certificate查看证书链，如下图为查看www.google.com的证书链：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https5.png\" alt=\"\"></p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https6.png\" alt=\"\"></p>\n<h6 id=\"信任证书\"><a href=\"#信任证书\" class=\"headerlink\" title=\"信任证书\"></a>信任证书</h6><p>在MAC上直接双击证书，然后在钥匙串里就能看到这个证书了，我们能看到证书上会显示此证书是由不被信任的签发者签发的或此根证书不被信任。然后我们再在钥匙串中双击证书-&gt;信任-&gt;使用此证书时：始终信任。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https7.png\" alt=\"\"></p>\n<p>这里我们可以信任两种证书：CA根证书和CA签名过的数字证书。两种证书在钥匙串中显示的颜色是不一样的。</p>\n<p>下图就是自己创建的两种证书：</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https8.png\" alt=\"\"></p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https9.png\" alt=\"\"></p>\n<p>我们信任两种证书都可以使请求变成安全的请求，在浏览器中输入的时候就不会有不安全的提示了。这里说一下为什么两种证书都可以。</p>\n<p>首先说CA根证书，这种就是我们正常的流程，CA根证书用公钥解密数字证书的签名得到hash值，然后根据hash值相等判断证书有效。<br>而不信任根证书只信任数字证书，就很容易理解了，他们本来就是同一张证书，也不用通过加密解密什么的来判断了。</p>\n<h4 id=\"十二、Chrome信任根证书后提示链接不安全\"><a href=\"#十二、Chrome信任根证书后提示链接不安全\" class=\"headerlink\" title=\"十二、Chrome信任根证书后提示链接不安全\"></a>十二、Chrome信任根证书后提示链接不安全</h4><p>这里我信任根证书之后还是提示链接不安全：<code>ERR_CERT_WEAK_SIGNATURE_ALGORITHM</code>。而信任数字证书则没问题。发生这种情况的原因是<code>Chrome 57</code>版本以后是不支持SHA-1算出的hash值的证书签名的，而我们上面生成的证书默认为SHA-1，这里只要改为SHA-256就可以了。</p>\n<pre><code>//用CA私钥生成CA的证书\nopenssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj &quot;/C=CN/ST=Hangzhou/L=Hangzhou/O=Teamsun/OU=Dasheng&quot; -sha256\n\n//使用server证书请求文件通过CA生成自签名证书\nopenssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -sha256\n</code></pre><h4 id=\"十三、获取证书小技巧\"><a href=\"#十三、获取证书小技巧\" class=\"headerlink\" title=\"十三、获取证书小技巧\"></a>十三、获取证书小技巧</h4><p>有时候我们没有这个网站的证书，那要如何得到呢？</p>\n<h6 id=\"1、使用openssl能直接得到这个证书\"><a href=\"#1、使用openssl能直接得到这个证书\" class=\"headerlink\" title=\"1、使用openssl能直接得到这个证书:\"></a>1、使用openssl能直接得到这个证书:</h6><pre><code>openssl s_client -connect 172.16.10.244:8000 &lt;/dev/null 2&gt;/dev/null | openssl x509 -outform DER &gt; https.cer\n</code></pre><h6 id=\"2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\"><a href=\"#2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\" class=\"headerlink\" title=\"2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。\"></a>2、直接Safari输入网站，如果是不安全的，会显示下图，然后点击显示证书，勾选连接时始终信任，点击继续证书就添加到钥匙串中了。</h6><p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https10.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"十四、iOS中使用自签名证书\"><a href=\"#十四、iOS中使用自签名证书\" class=\"headerlink\" title=\"十四、iOS中使用自签名证书\"></a>十四、iOS中使用自签名证书</h4><p>iOS9中新增App Transport Security（简称ATS）特性, 主要使到原来请求的时候用到的HTTP，都转向TLS1.2协议进行传输。这也意味着所有的HTTP协议都强制使用了HTTPS协议进行传输。一般如果我们HTTPS服务使用的证书是CA权威机构颁发的话，客户端不用修改任何代码，因为iOS系统已经内置了这些权威机构的根证书。但是如果是自签名的证书的话就需要修改代码来内部信任这部分证书了。</p>\n<h6 id=\"AFNetworking使用自签名证书\"><a href=\"#AFNetworking使用自签名证书\" class=\"headerlink\" title=\"AFNetworking使用自签名证书\"></a>AFNetworking使用自签名证书</h6><p>AFNetWorking封装了如何使用自签名证书，简单的使用方式如下。</p>\n<pre><code class=\"objectivec\">//先导入证书，找到证书的路径\nNSString *cerPath = [[NSBundle mainBundle] pathForResource:@&quot;cert&quot; ofType:@&quot;der&quot;];\nNSData *certData = [NSData dataWithContentsOfFile:cerPath];\nNSSet * certSet = [[NSSet alloc] initWithObjects:certData, nil];\n\n//AFSSLPinningModeNone 这个模式表示不做 SSL pinning，只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书，这里是不会通过的。\n\n//AFSSLPinningModeCertificate 这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名/有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。\n\n//AFSSLPinningModePublicKey 这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。\n\nAFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];\n// 是否允许,NO-- 不允许无效的证书\n[securityPolicy setAllowInvalidCertificates:YES];\n// 设置证书\n[securityPolicy setPinnedCertificates:certSet];\n//是否验证域名信息\nsecurityPolicy.validatesDomainName = NO;\n\n\nAFHTTPSessionManager *manager = [[AFHTTPSessionManager manager] initWithBaseURL:[NSURL URLWithString:@&quot;https://192.168.3.13:8000&quot;]];\nmanager.securityPolicy = securityPolicy;\nmanager.responseSerializer = [AFHTTPResponseSerializer serializer];\n[manager GET:@&quot;/getInfo&quot; parameters:@{@&quot;t&quot;:@&quot;1490927497.569&quot;} progress:^(NSProgress * progress){\n} success:^(NSURLSessionDataTask *task, id responseObject) {\n    NSArray * array = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableLeaves error:nil];\n    NSLog(@&quot;OK === %@&quot;,array);\n} failure:^(NSURLSessionDataTask *task, NSError *error) {\n    NSLog(@&quot;error ==%@&quot;,error.description);\n}];\n</code></pre>\n<h6 id=\"证书需要满足的条件\"><a href=\"#证书需要满足的条件\" class=\"headerlink\" title=\"证书需要满足的条件\"></a>证书需要满足的条件</h6><p>这里的证书使用CA根证书或CA签名的数字证书都可以。</p>\n<p>密钥交换算法有<code>RSA</code>和<code>ECDHE</code>，RSA 历史悠久，支持度好，但不支持 PFS（Perfect Forward Secrecy）；而 ECDHE 是使用了 ECC（椭圆曲线）的 DH（Diffie-Hellman）算法，计算速度快，支持 PFS。</p>\n<p>iOS支持的秘钥交换算法为：至少<strong>2048位的 RSA 密钥或至少256位的 ECC 密钥</strong></p>\n<p>服务器证书的哈希算法必须为 SHA-2，其摘要长度至少位256位。</p>\n<p>证书格式为.der，很多网上的教程都写的是.cer，应该是使用的旧版AFNetWorking，最新版的不支持.cer，需要使用.der格式。</p>\n<hr>\n<h4 id=\"十五、中间人攻击\"><a href=\"#十五、中间人攻击\" class=\"headerlink\" title=\"十五、中间人攻击\"></a>十五、中间人攻击</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><p>关于Https最常讲到的就是中间人攻击，即所谓的Man-in-the-middle attack(MITM)。也就是攻击者插入原先攻击的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。</p>\n<p>其实http的中间人攻击是最简单的，因为http都是通过明文传输，而且没有任何认证之类的东西。我们常常用的Charles抓包就是一个最简单的中间人攻击。</p>\n<h6 id=\"对HTTPS进行中间人攻击\"><a href=\"#对HTTPS进行中间人攻击\" class=\"headerlink\" title=\"对HTTPS进行中间人攻击\"></a>对HTTPS进行中间人攻击</h6><p>我们用Charles进行HTTPS的抓包的时候会发现抓到的包都是加过密的无法查看，那是不是就意味着无法抓取HTTPS的包了呢？其实也是可以的，通过伪造证书，并且客户端又安装了Charles根证书，就可以抓取到HTTPS的包并解密了。</p>\n<p>具体的步骤是这样的，手机安装Charles根证书，手机使用Charles的代理，所有请求都经过Charles中间人。Charles劫持到请求，替换服务端的证书为自己的伪证书，然后发送给客户端，客户端使用Charles根证书来验证这个伪证书，验证通过得到公钥，然后用公钥加密对话秘钥发送回Charles中间人，Charles中间人私用私钥解密得到对话秘钥并保存，然后再把对话秘钥用服务端的公钥加密返回给服务端，这样就表示两端握手成功，可以进行通信了。而且中间人也获得了之后的对话秘钥，可以解密之后的对话信息。</p>\n<h6 id=\"Charles实现HTTPS抓包\"><a href=\"#Charles实现HTTPS抓包\" class=\"headerlink\" title=\"Charles实现HTTPS抓包\"></a>Charles实现HTTPS抓包</h6><p>这里基本的HTTP抓包的设置就不讲了，下面是基于实现基本的HTTP抓包的基础上来实现HTTPS的抓包解密。</p>\n<ul>\n<li>安装Charles CA根证书<br>点击<code>Help-&gt;SSL Proxying-&gt;Install Charles Root Certification ...</code>，会弹出如下提示，链接代理，手机浏览器输入<code>chls.pro/ssl</code>，就可以安装根证书了。</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https11.png\" alt=\"\"></p>\n<ul>\n<li>设置SSL代理<br>点击<code>Proxy-&gt;SSL Proxying Setting</code>，勾选<code>Enable SSL Proxying</code>，然后点击Add输入要SSL代理的请求Host和Port，可以使用通配符来表示某一类请求。</li>\n</ul>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https12.png\" alt=\"\"></p>\n<p>或者在对应的请求上右键选择<code>Enable SSL Proxying</code>，就会把这一个请求加入到上面的SSL代理列表中（类似于点击Add的效果）。</p>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/https13.png\" alt=\"\"></p>\n<p>做完上述步骤后重新请求就能得到解密后的信息了。抓取PC端的HTTPS包也类似，在<code>Help-&gt;SSL Proxying</code>中下载证书，双击安装证书，并选择始终信任即可。</p>\n<hr>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"external\">超文本传输安全协议</a><br><a href=\"http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\" target=\"_blank\" rel=\"external\">图解HTTPS</a><br><a href=\"http://www.jianshu.com/p/e767a4e9252e\" target=\"_blank\" rel=\"external\">HTTPS从原理到应用</a><br><a href=\"http://www.cnblogs.com/guogangj/p/4118605.html\" target=\"_blank\" rel=\"external\">那些证书相关的玩意儿</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a><br><a href=\"http://www.jianshu.com/p/da65e5cd552e\" target=\"_blank\" rel=\"external\">SSL/TLS协议及Openssl工具的实现</a><br><a href=\"http://blog.csdn.net/gx_1983/article/details/47866537\" target=\"_blank\" rel=\"external\">openssl自签名证书生成与单双向验证</a><br><a href=\"http://www.jianshu.com/p/36ddc5b009a7\" target=\"_blank\" rel=\"external\">iOS 10 适配 ATS</a><br><a href=\"http://oncenote.com/2014/10/21/Security-1-HTTPS/\" target=\"_blank\" rel=\"external\">iOS安全系列之一：HTTPS</a><br><a href=\"http://oncenote.com/2015/09/16/Security-2-HTTPS2/#mitm\" target=\"_blank\" rel=\"external\">iOS安全系列之二：HTTPS进阶</a></p>\n"},{"title":"给你","date":"2017-06-22T14:31:02.000Z","_content":"\n![你](http://oqepgj2jp.bkt.clouddn.com/girlFriend.png)\n\n我躲在幽深的夏夜里﻿\n\n摘一朵芙蕖﻿\n\n携清风一缕﻿\n\n送给你﻿﻿\n\n---\n\n我把月光揉成诗句﻿\n\n带着鲜花和故事﻿\n\n带着清酒和嫩绿﻿\n\n送给你﻿\n\n---\n\n我用彩虹吃面的勺子﻿\n\n深入西瓜的腹地﻿\n\n掏出第一口果汁﻿\n\n送给你﻿\n\n---\n\n\n我把蛙鸣哼进歌声里﻿\n\n把芬芳卷到涟漪里﻿\n\n你不必客气﻿\n\n更不要推辞﻿\n\n请在酣然入睡时﻿\n\n把冷饮灌进我的梦里﻿\n\n灌醉所有炙热的因子﻿\n\n直到太阳升起﻿\n\n\n\n","source":"_posts/给你.md","raw":"---\ntitle: 给你\ndate: 2017-06-22 22:31:02\ncategories: \n\t- 自言语\n---\n\n![你](http://oqepgj2jp.bkt.clouddn.com/girlFriend.png)\n\n我躲在幽深的夏夜里﻿\n\n摘一朵芙蕖﻿\n\n携清风一缕﻿\n\n送给你﻿﻿\n\n---\n\n我把月光揉成诗句﻿\n\n带着鲜花和故事﻿\n\n带着清酒和嫩绿﻿\n\n送给你﻿\n\n---\n\n我用彩虹吃面的勺子﻿\n\n深入西瓜的腹地﻿\n\n掏出第一口果汁﻿\n\n送给你﻿\n\n---\n\n\n我把蛙鸣哼进歌声里﻿\n\n把芬芳卷到涟漪里﻿\n\n你不必客气﻿\n\n更不要推辞﻿\n\n请在酣然入睡时﻿\n\n把冷饮灌进我的梦里﻿\n\n灌醉所有炙热的因子﻿\n\n直到太阳升起﻿\n\n\n\n","slug":"给你","published":1,"updated":"2017-06-22T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61ln000e9quz02f3p2ty","content":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/girlFriend.png\" alt=\"你\"></p>\n<p>我躲在幽深的夏夜里﻿</p>\n<p>摘一朵芙蕖﻿</p>\n<p>携清风一缕﻿</p>\n<p>送给你﻿﻿</p>\n<hr>\n<p>我把月光揉成诗句﻿</p>\n<p>带着鲜花和故事﻿</p>\n<p>带着清酒和嫩绿﻿</p>\n<p>送给你﻿</p>\n<hr>\n<p>我用彩虹吃面的勺子﻿</p>\n<p>深入西瓜的腹地﻿</p>\n<p>掏出第一口果汁﻿</p>\n<p>送给你﻿</p>\n<hr>\n<p>我把蛙鸣哼进歌声里﻿</p>\n<p>把芬芳卷到涟漪里﻿</p>\n<p>你不必客气﻿</p>\n<p>更不要推辞﻿</p>\n<p>请在酣然入睡时﻿</p>\n<p>把冷饮灌进我的梦里﻿</p>\n<p>灌醉所有炙热的因子﻿</p>\n<p>直到太阳升起﻿</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/girlFriend.png\" alt=\"你\"></p>\n<p>我躲在幽深的夏夜里﻿</p>\n<p>摘一朵芙蕖﻿</p>\n<p>携清风一缕﻿</p>\n<p>送给你﻿﻿</p>\n<hr>\n<p>我把月光揉成诗句﻿</p>\n<p>带着鲜花和故事﻿</p>\n<p>带着清酒和嫩绿﻿</p>\n<p>送给你﻿</p>\n<hr>\n<p>我用彩虹吃面的勺子﻿</p>\n<p>深入西瓜的腹地﻿</p>\n<p>掏出第一口果汁﻿</p>\n<p>送给你﻿</p>\n<hr>\n<p>我把蛙鸣哼进歌声里﻿</p>\n<p>把芬芳卷到涟漪里﻿</p>\n<p>你不必客气﻿</p>\n<p>更不要推辞﻿</p>\n<p>请在酣然入睡时﻿</p>\n<p>把冷饮灌进我的梦里﻿</p>\n<p>灌醉所有炙热的因子﻿</p>\n<p>直到太阳升起﻿</p>\n"},{"title":"《招聘一个靠谱的iOS》面试题参考答案（下）","date":"2017-05-24T06:59:00.000Z","_content":"\n[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)—参考答案（下）\n\n\n说明：面试题来源是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)的这篇博文：[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)，其中共55题，除第一题为纠错题外，其他54道均为简答题。\n\n出题者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。\n\n答案为[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)整理，未经出题者校对，如有纰漏，请向[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)指正。\n\n----------\n\n# 索引\n\n\n 1. [ 25. `_objc_msgForward` 函数是做什么的，直接调用它将会发生什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#25-_objc_msgforward函数是做什么的直接调用它将会发生什么)\n 2. [26. runtime如何实现weak变量的自动置nil？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#26-runtime如何实现weak变量的自动置nil)\n 3.  [27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#27-能否向编译后得到的类中增加实例变量能否向运行时创建的类中添加实例变量为什么) \n 4.  [28. runloop和线程有什么关系？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#28-runloop和线程有什么关系) \n 5.  [29. runloop的mode作用是什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#29-runloop的mode作用是什么) \n 6.  [30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#30-以-scheduledtimerwithtimeinterval的方式触发的timer在滑动页面上的列表时timer会暂定回调为什么如何解决) \n 7.  [31. 猜想runloop内部是如何实现的？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#31-猜想runloop内部是如何实现的) \n 8.  [32. objc使用什么机制管理对象内存？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#32-objc使用什么机制管理对象内存) \n 9.  [33. ARC通过什么方式帮助开发者管理内存？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#33-arc通过什么方式帮助开发者管理内存) \n 10.  [34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#34-不手动指定autoreleasepool的前提下一个autorealese对象在什么时刻释放比如在一个vc的viewdidload中创建) \n 11.  [35. BAD_ACCESS在什么情况下出现？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#35-bad_access在什么情况下出现) \n 12.  [36. 苹果是如何实现autoreleasepool的？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#36-苹果是如何实现autoreleasepool的) \n 13.  [37. 使用block时什么情况会发生引用循环，如何解决？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#37-使用block时什么情况会发生引用循环如何解决)\n 14.  [38. 在block内如何修改block外部变量？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#38-在block内如何修改block外部变量) \n 15.  [39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#39-使用系统的某些block-api如uiview的block版本写动画时是否也考虑引用循环问题) \n 16.  [40. GCD的队列（dispatch_queue_t）分哪两种类型？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#40-gcd的队列dispatch_queue_t分哪两种类型) \n 17.   [41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#41-如何用gcd同步若干个异步调用如根据若干个url异步加载多张图片然后在都下载完成后合成一张整图) \n 18.  [42. dispatch_barrier_async的作用是什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#42-dispatch_barrier_async的作用是什么) \n 19.  [43. 苹果为什么要废弃dispatch_get_current_queue？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#43-苹果为什么要废弃dispatch_get_current_queue) \n 0.  [44. 以下代码运行结果如何？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#44-以下代码运行结果如何) \n\n ```Objective-C\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@\"1\");\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n ```\n\n 1.  [45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#45-addobserverforkeypathoptionscontext各个参数的作用分别是什么observer中需要实现哪个方法才能获得kvo回调) \n 2.  [46. 如何手动触发一个value的KVO](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo) \n 3.  [47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#47-若一个类有实例变量-nsstring-_foo-调用setvalueforkey时可以以foo还是-_foo-作为key) \n 4.  [48. KVC的keyPath中的集合运算符如何使用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#48-kvc的keypath中的集合运算符如何使用) \n 5.  [49. KVC和KVO的keyPath一定是属性么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#49-kvc和kvo的keypath一定是属性么) \n 6.  [50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#50-如何关闭默认的kvo的默认实现并进入自定义的kvo实现) \n 7.  [51. apple用什么方式实现对一个对象的KVO？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#51-apple用什么方式实现对一个对象的kvo) \n 8.  [52. IBOutlet连出来的视图属性为什么可以被设置成weak?](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#52-iboutlet连出来的视图属性为什么可以被设置成weak) \n 9.  [53. IB中User Defined Runtime Attributes如何使用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#53-ib中user-defined-runtime-attributes如何使用) \n 0.  [54. 如何调试BAD_ACCESS错误](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#54-如何调试bad_access错误) \n 1.  [55. lldb（gdb）常用的调试命令？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#55-lldbgdb常用的调试命令) \n\n\n\n\n\n\n\n\n\n\n----------\n\n\n### 25. `_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n> `_objc_msgForward`是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n我们可以这样创建一个`_objc_msgForward`对象：\n\n    IMP msgForwardIMP = _objc_msgForward;\n\n\n\n在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《objc中向一个对象发送消息`[obj foo]`和`objc_msgSend()`函数之间有什么关系？》曾提到`objc_msgSend`在“消息传递”中的作用。在“消息传递”过程中，`objc_msgSend`的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用`_objc_msgForward`函数指针代替 IMP 。最后，执行这个 IMP 。\n\n\n\nObjective-C运行时是开源的，所以我们可以看到它的实现。打开[ ***Apple Open Source 里Mac代码里的obj包*** ](http://www.opensource.apple.com/tarballs/objc4/)下载一个最新版本，找到 `objc-runtime-new.mm`，进入之后搜索`_objc_msgForward`。\n\n![enter image description here](http://i.imgur.com/rGBfaoL.png)\n\n里面有对`_objc_msgForward`的功能解释：\n\n![enter image description here](http://i.imgur.com/vcThcdA.png)\n\n\n```Objective-C\n/***********************************************************************\n* lookUpImpOrForward.\n* The standard IMP lookup. \n* initialize==NO tries to avoid +initialize (but sometimes fails)\n* cache==NO skips optimistic unlocked lookup (but uses cache elsewhere)\n* Most callers should use initialize==YES and cache==YES.\n* inst is an instance of cls or a subclass thereof, or nil if none is known. \n*   If cls is an un-initialized metaclass then a non-nil inst is faster.\n* May return _objc_msgForward_impcache. IMPs destined for external use \n*   must be converted to _objc_msgForward or _objc_msgForward_stret.\n*   If you don't want forwarding at all, use lookUpImpOrNil() instead.\n**********************************************************************/\n```\n\n对 `objc-runtime-new.mm`文件里与`_objc_msgForward`有关的三个函数使用伪代码展示下：\n\n```Objective-C\n//  objc-runtime-new.mm 文件里与 _objc_msgForward 有关的三个函数使用伪代码展示\n//  Created by https://github.com/ChenYilong\n//  Copyright (c)  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/). All rights reserved.\n//  同时，这也是 obj_msgSend 的实现过程\n\nid objc_msgSend(id self, SEL op, ...) {\n    if (!self) return nil;\n\tIMP imp = class_getMethodImplementation(self->isa, SEL op);\n\timp(self, op, ...); //调用这个函数，伪代码...\n}\n \n//查找IMP\nIMP class_getMethodImplementation(Class cls, SEL sel) {\n    if (!cls || !sel) return nil;\n    IMP imp = lookUpImpOrNil(cls, sel);\n    if (!imp) return _objc_msgForward; //_objc_msgForward 用于消息转发\n    return imp;\n}\n \nIMP lookUpImpOrNil(Class cls, SEL sel) {\n    if (!cls->initialize()) {\n        _class_initialize(cls);\n    }\n \n    Class curClass = cls;\n    IMP imp = nil;\n    do { //先查缓存,缓存没有时重建,仍旧没有则向父类查询\n        if (!curClass) break;\n        if (!curClass->cache) fill_cache(cls, curClass);\n        imp = cache_getImp(curClass, sel);\n        if (imp) break;\n    } while (curClass = curClass->superclass);\n \n    return imp;\n}\n```\n虽然Apple没有公开`_objc_msgForward`的实现源码，但是我们还是能得出结论：\n\n> `_objc_msgForward`是一个函数指针（和 IMP 的类型一样），是用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n\n> 在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《objc中向一个对象发送消息`[obj foo]`和`objc_msgSend()`函数之间有什么关系？》曾提到`objc_msgSend`在“消息传递”中的作用。在“消息传递”过程中，`objc_msgSend`的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用`_objc_msgForward`函数指针代替 IMP 。最后，执行这个 IMP 。\n\n\n\n为了展示消息转发的具体动作，这里尝试向一个对象发送一条错误的消息，并查看一下`_objc_msgForward`是如何进行转发的。\n\n首先开启调试模式、打印出所有运行时发送的消息：\n可以在代码里执行下面的方法：\n\n```Objective-C\n(void)instrumentObjcMessageSends(YES);\n```\n\n\n或者断点暂停程序运行，并在 gdb 中输入下面的命令：\n\n```Objective-C\ncall (void)instrumentObjcMessageSends(YES)\n```\n\n以第二种为例，操作如下所示：\n\n![enter image description here](http://i.imgur.com/uEwTCC4.png)\n\n\n之后，运行时发送的所有消息都会打印到`/tmp/msgSend-xxxx`文件里了。\n\n终端中输入命令前往：\n\n```Objective-C\nopen /private/tmp\n```\n\n\n\n\n\n![enter image description here](http://i.imgur.com/Fh5hhCw.png)\n\n\n\n可能看到有多条，找到最新生成的，双击打开\n\n\n\n在模拟器上执行执行以下语句（这一套调试方案仅适用于模拟器，真机不可用，关于该调试方案的拓展链接：[ ***Can the messages sent to an object in Objective-C be monitored or printed out?*** ](http://stackoverflow.com/a/10750398/3395008)），向一个对象发送一条错误的消息：\n\n\n\n\n```Objective-C\n//\n//  main.m\n//  CYLObjcMsgForwardTest\n//\n//  Created by http://weibo.com/luohanchenyilong/.\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n#import \"AppDelegate.h\"\n#import \"CYLTest.h\"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOS程序犭袁))];\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n\n```\n\n![enter image description here](http://i.imgur.com/UjbmVvB.png)\n\n\n你可以在`/tmp/msgSend-xxxx`（我这一次是`/tmp/msgSend-9805`）文件里，看到打印出来：\n\n\n\n![enter image description here](http://i.imgur.com/AAERz1T.png)\n\n\n \n```Objective-C\n+ CYLTest NSObject initialize\n+ CYLTest NSObject alloc\n- CYLTest NSObject init\n- CYLTest NSObject performSelector:\n+ CYLTest NSObject resolveInstanceMethod:\n+ CYLTest NSObject resolveInstanceMethod:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject class\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject class\n```\n\n\n\n结合[《NSObject官方文档》](https://developer.apple.com/library/prerelease/watchos/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/#//apple_ref/doc/uid/20000050-SW11)，排除掉 NSObject 做的事，剩下的就是`_objc_msgForward`消息转发做的几件事：\n\n\n 1. 调用`resolveInstanceMethod:`方法 (或 `resolveClassMethod:`)。允许用户在此时为该 Class 动态添加实现。如果有实现了，则调用并返回YES，那么重新开始`objc_msgSend`流程。这一次对象会响应这个选择器，一般是因为它已经调用过`class_addMethod`。如果仍没实现，继续下面的动作。\n\n 2. 调用`forwardingTargetForSelector:`方法，尝试找到一个能响应该消息的对象。如果获取到，则直接把消息转发给它，返回非 nil 对象。否则返回 nil ，继续下面的动作。注意，这里不要返回 self ，否则会形成死循环。\n\n 3. 调用`methodSignatureForSelector:`方法，尝试获得一个方法签名。如果获取不到，则直接调用`doesNotRecognizeSelector`抛出异常。如果能获取，则返回非nil：创建一个 NSlnvocation 并传给`forwardInvocation:`。\n\n 4. 调用`forwardInvocation:`方法，将第3步获取到的方法签名包装成 Invocation 传入，如何处理就在这里面了，并返回非ni。\n\n 5. 调用`doesNotRecognizeSelector:` ，默认的实现是抛出异常。如果第3步没能获得一个方法签名，执行该步骤。\n\n上面前4个方法均是模板方法，开发者可以override，由 runtime 来调用。最常见的实现消息转发：就是重写方法3和4，吞掉一个消息或者代理给其他对象都是没问题的\n\n也就是说`_objc_msgForward`在进行消息转发的过程中会涉及以下这几个方法：\n\n 1. `resolveInstanceMethod:`方法 (或 `resolveClassMethod:`)。\n\n 2. `forwardingTargetForSelector:`方法\n\n 3. `methodSignatureForSelector:`方法\n\n 4. `forwardInvocation:`方法\n\n 5. `doesNotRecognizeSelector:` 方法\n\n为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ `_objc_msgForward_demo` ”,可运行起来看看。\n\n\n下面回答下第二个问题“直接`_objc_msgForward`调用它将会发生什么？”\n\n直接调用`_objc_msgForward`是非常危险的事，如果用不好会直接导致程序Crash，但是如果用得好，能做很多非常酷的事。\n\n就好像跑酷，干得好，叫“耍酷”，干不好就叫“作死”。\n\n正如前文所说：\n\n> `_objc_msgForward`是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n如何调用`_objc_msgForward`？\n`_objc_msgForward`隶属 C 语言，有三个参数 ：\n\n|--| `_objc_msgForward`参数| 类型 |\n-------------|-------------|-------------\n 1.| 所属对象 | id类型\n 2. |方法名 | SEL类型 \n 3. |可变参数 |可变参数类型\n\n\n首先了解下如何调用 IMP 类型的方法，IMP类型是如下格式：\n\n为了直观，我们可以通过如下方式定义一个 IMP类型 ：\n\n```Objective-C\ntypedef void (*voidIMP)(id, SEL, ...)\n```\n一旦调用`_objc_msgForward`，将跳过查找 IMP 的过程，直接触发“消息转发”，\n\n如果调用了`_objc_msgForward`，即使这个对象确实已经实现了这个方法，你也会告诉`objc_msgSend`：\n\n\n> “我没有在这个对象里找到这个方法的实现”\n\n\n\n想象下`objc_msgSend`会怎么做？通常情况下，下面这张图就是你正常走`objc_msgSend`过程，和直接调用`_objc_msgForward`的前后差别：\n\n![enter image description here](http://ww1.sinaimg.cn/bmiddle/6628711bgw1eecx3jef23g206404tkbi.gif)\n\n有哪些场景需要直接调用`_objc_msgForward`？最常见的场景是：你想获取某方法所对应的`NSInvocation`对象。举例说明：\n\n[JSPatch （Github 链接）](https://github.com/bang590/JSPatch)就是直接调用`_objc_msgForward`来实现其核心功能的：\n\n>  JSPatch 以小巧的体积做到了让JS调用/替换任意OC方法，让iOS APP具备热更新的能力。\n\n\n作者的博文[《JSPatch实现原理详解》](http://blog.cnbang.net/tech/2808/)详细记录了实现原理，有兴趣可以看下。\n\n同时 [ ***RAC(ReactiveCocoa)*** ](https://github.com/ReactiveCocoa/ReactiveCocoa) 源码中也用到了该方法。\n\n### 26. runtime如何实现weak变量的自动置nil？\n\n\n> runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。\n\n在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《runtime 如何实现 weak 属性》有论述。（注：在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到`__weak`引用的解除时间。）\n\n我们可以设计一个函数（伪代码）来表示上述机制：\n\n`objc_storeWeak(&a, b)`函数：\n\n`objc_storeWeak`函数把第二个参数--赋值对象（b）的内存地址作为键值key，将第一个参数--weak修饰的属性变量（a）的内存地址（&a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&a）从weak表中删除，\n\n你可以把`objc_storeWeak(&a, b)`理解为：`objc_storeWeak(value, key)`，并且当key变nil，将value置nil。\n\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。\n\n而如果a是由assign修饰的，则：\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a还是指向该内存地址，变野指针。此时向a发送消息极易崩溃。\n\n\n下面我们将基于`objc_storeWeak(&a, b)`函数，使用伪代码模拟“runtime如何实现weak属性”：\n \n\n\n \n```Objective-C\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&obj1);\n```\n\n下面对用到的两个方法`objc_initWeak`和`objc_destroyWeak`做下解释：\n\n总体说来，作用是：\n通过`objc_initWeak`函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过`objc_destoryWeak`函数释放该变量（obj1）。\n\n下面分别介绍下方法的内部实现：\n\n`objc_initWeak`函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用`objc_storeWeak`函数。\n\n\n\n \n```Objective-C\nobj1 = 0；\nobj_storeWeak(&obj1, obj);\n```\n\n也就是说：\n\n>  weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）\n\n\n\n\n然后`obj_destroyWeak`函数将0（nil）作为参数，调用`objc_storeWeak`函数。\n\n`objc_storeWeak(&obj1, 0);`\n\n前面的源代码与下列源代码相同。\n\n\n\n```Objective-C\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&obj1, 0);\n```\n\n\n`objc_storeWeak`函数把第二个参数--赋值对象（obj）的内存地址作为键值，将第一个参数--weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从weak表中删除。\n\n\n\n\n\n### 27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？ \n\n - 不能向编译后得到的类中增加实例变量；\n - 能向运行时创建的类中添加实例变量；\n\n解释下：\n\n - 因为编译后的类已经注册在 runtime 中，类结构体中的 `objc_ivar_list` 实例变量的链表 和 `instance_size` 实例变量的内存大小已经确定，同时runtime 会调用 `class_setIvarLayout` 或 `class_setWeakIvarLayout` 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；\n\n - 运行时创建的类是可以添加实例变量，调用 `class_addIvar` 函数。但是得在调用 `objc_allocateClassPair` 之后，`objc_registerClassPair` 之前，原因同上。\n\n\n### 28. runloop和线程有什么关系？\n\n总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。\n\n runloop 和线程的关系：\n\n\n\n\n 1. 主线程的run loop默认是启动的。\n\n iOS的应用程序里面，程序启动后会有一个如下的main()函数\n \n ```Objective-C\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n```\n\n\n\n\n\n 重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。\n\n 2. 对其它线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程只是去执行一个长时间的已确定的任务则不需要。\n\n 3. 在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。\n\n\n ```Objective-C\nNSRunLoop *runloop = [NSRunLoop currentRunLoop];\n```\n\n\n参考链接：[《Objective-C之run loop详解》](http://blog.csdn.net/wzzvictory/article/details/9237973)。\n\n### 29. runloop的mode作用是什么？\n\nmodel 主要是用来指定事件在运行循环中的优先级的，分为：\n\n\n* NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态\n* UITrackingRunLoopMode：ScrollView滑动时\n* UIInitializationRunLoopMode：启动时\n* NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合\n\n苹果公开提供的 Mode 有两个：\n\n 1. NSDefaultRunLoopMode（kCFRunLoopDefaultMode）\n 2. NSRunLoopCommonModes（kCFRunLoopCommonModes）\n\n### 30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\nRunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，ScrollView滚动过程中NSDefaultRunLoopMode（kCFRunLoopDefaultMode）的mode会切换到UITrackingRunLoopMode来保证ScrollView的流畅滑动：只能在NSDefaultRunLoopMode模式下处理的事件会影响ScrollView的滑动。\n\n如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候,\nScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。\n\n同时因为mode还是可定制的，所以：\n\n Timer计时会被scrollView的滑动影响的问题可以通过将timer添加到NSRunLoopCommonModes（kCFRunLoopCommonModes）来解决。代码如下：\n\n```objective-c\n// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n\n//将timer添加到NSDefaultRunLoopMode中\n[NSTimer scheduledTimerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n//然后再添加到NSRunLoopCommonModes里\nNSTimer *timer = [NSTimer timerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n```\n\n\n### 31. 猜想runloop内部是如何实现的？\n\n> 一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑\n是这样的：\n\n\n\n\n\tfunction loop() {\n\t    initialize();\n\t    do {\n\t        var message = get_next_message();\n\t        process_message(message);\n\t    } while (message != quit);\n\t}\n\n\n或使用伪代码来展示下:\n\n\t// \n\t// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n\t// https://github.com/ChenYilong\n\tint main(int argc, char * argv[]) {\n     //程序一直运行状态\n     while (AppIsRunning) {\n          //睡眠状态，等待唤醒事件\n          id whoWakesMe = SleepForWakingUp();\n          //得到唤醒事件\n          id event = GetEvent(whoWakesMe);\n          //开始处理事件\n          HandleEvent(event);\n     }\n     return 0;\n\t}\n\n参考链接：\n\n 1. [《深入理解RunLoop》](http://blog.ibireme.com/2015/05/18/runloop/#base)\n 2. 摘自博文[***CFRunLoop***](https://github.com/ming1016/study/wiki/CFRunLoop)，原作者是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)\n\n### 32. objc使用什么机制管理对象内存？\n\n通过 retainCount 的机制来决定对象是否需要释放。\n每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n### 33. ARC通过什么方式帮助开发者管理内存？\n <p><del>编译时根据代码上下文，插入 retain/release\n</del></p>\nARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。\n\n在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。【TODO:后续更新会详细描述下】\n###  34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n分两种情况：手动干预释放时机、系统自动去释放。\n\n\n 1. 手动干预释放时机--指定autoreleasepool\n 就是所谓的：当前作用域大括号结束时释放。\n 2. 系统自动去释放--不手动指定autoreleasepool\n\n  Autorelease对象出了作用域之后，会被添加到最近一次创建的自动释放池中，并会在当前的 runloop 迭代结束时释放。\n\n释放的时机总结起来，可以用下图来表示：\n\n![autoreleasepool与 runloop 的关系图](http://i61.tinypic.com/28kodwp.jpg)\n\n下面对这张图进行详细的解释：\n\n\n从程序启动到加载完成是一个完整的运行循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。\n\n我们都知道：\n**所有 autorelease 的对象，在出了作用域之后，会被自动添加到最近创建的自动释放池中。**\n\n但是如果每次都放进应用程序的 `main.m` 中的 autoreleasepool 中，迟早有被撑满的一刻。这个过程中必定有一个释放的动作。何时？\n\n在一次完整的运行循环结束之前，会被销毁。\n\n那什么时间会创建自动释放池？运行循环检测到事件并启动后，就会创建自动释放池。 \n\n子线程的 runloop 默认是不工作，无法主动创建，必须手动创建。\n\n自定义的 NSOperation 和 NSThread 需要手动创建自动释放池。比如： 自定义的 NSOperation 类中的 main 方法里就必须添加自动释放池。否则出了作用域后，自动释放对象会因为没有自动释放池去处理它，而造成内存泄露。\n\n但对于 blockOperation 和 invocationOperation 这种默认的Operation ，系统已经帮我们封装好了，不需要手动创建自动释放池。\n\n\n@autoreleasepool 当自动释放池被销毁或者耗尽时，会向自动释放池中的所有对象发送 release 消息，释放自动释放池中的所有对象。\n\n\n\n 如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。\n\n\n\n\n\n参考链接：[《黑幕背后的Autorelease》](http://blog.sunnyxx.com/2014/10/15/behind-autorelease/)\n\n###  35. BAD_ACCESS在什么情况下出现？\n访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。\n死循环\n###  36. 苹果是如何实现autoreleasepool的？ \n\nautoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.\n\n\n 1. `objc_autoreleasepoolPush`\n 2. `objc_autoreleasepoolPop`\n 3. `objc_autorelease`\n\n看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。\n\n举例说明：我们都知道用类方法创建的对象都是 Autorelease 的，那么一旦 Person 出了作用域，当在 Person 的 dealloc 方法中打上断点，我们就可以看到这样的调用堆栈信息：\n\n ![enter image description here](http://i60.tinypic.com/15mfj11.jpg)\n\n### 37. 使用block时什么情况会发生引用循环，如何解决？\n一个对象中强引用了block，在block中又强引用了该对象，就会发射循环引用。\n\n解决方法是将该对象使用__weak或者__block修饰符修饰之后再在block中使用。\n\n\n\n 1. id weak weakSelf = self;\n\t或者 weak __typeof(&*self)weakSelf = self该方法可以设置宏\n 2. id __block weakSelf = self;\n\n或者将其中一方强制制空 `xxx = nil`。\n\n检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  [***FBRetainCycleDetector***](https://github.com/facebook/FBRetainCycleDetector) 。\n\n### 38. 在block内如何修改block外部变量？\n默认情况下，在block中访问的外部变量是复制过去的，即：**写操作不对原变量生效**。但是你可以加上 `__block` 来让其写操作生效，示例代码如下:\n\n\n ```Objective-C\n\t__block int a = 0;\n\tvoid (^foo)(void) = ^{ \n\t    a = 1; \n\t};\n\tfoo(); \n\t//这里，a的值被修改为1\n ```\n\n\n这是 [微博@唐巧_boy](http://weibo.com/tangqiaoboy)的《iOS开发进阶》中的第11.2.3章节中的描述。你同样可以在面试中这样回答，但你并没有答到“点子上”。真正的原因，并没有书这本书里写的这么“神奇”，而且这种说法也有点牵强。面试官肯定会追问“为什么写操作就生效了？”真正的原因是这样的：\n\n\n > 我们都知道：**Block不允许修改外部变量的值**，这里所说的外部变量的值，指的是栈中指针的内存地址。`__block` 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。\n\n**Block不允许修改外部变量的值**。Apple这样设计，应该是考虑到了block的特殊性，block也属于“函数”的范畴，变量进入block，实际就是已经改变了作用域。在几个作用域之间进行切换时，如果不加上这样的限制，变量的可维护性将大大降低。又比如我想在block内声明了一个与外部同名的变量，此时是允许呢还是不允许呢？只有加上了这样的限制，这样的情景才能实现。于是栈区变成了红灯区，堆区变成了绿灯区。\n\n我们可以打印下内存地址来进行验证：\n\n ```Objective-C\n    __block int a = 0;\n    NSLog(@\"定义前：%p\", &a);         //栈区\n    void (^foo)(void) = ^{\n        a = 1;\n        NSLog(@\"block内部：%p\", &a);    //堆区\n    };\n    NSLog(@\"定义后：%p\", &a);         //堆区\n    foo();\n ```\n\n ```Objective-C\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义前：0x16fda86f8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义后：0x155b22fc8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] block内部： 0x155b22fc8\n ```\n \n \n“定义后”和“block内部”两者的内存地址是一样的，我们都知道 block 内部的变量会被 copy 到堆区，“block内部”打印的是堆地址，因而也就可以知道，“定义后”打印的也是堆的地址。\n \n \n 那么如何证明“block内部”打印的是堆地址？\n \n 把三个16进制的内存地址转成10进制就是：\n \n 1. 定义后前：6171559672\n 2. block内部：5732708296\n 3. 定义后后：5732708296\n \n中间相差438851376个字节，也就是 418.5M 的空间，因为堆地址要小于栈地址，又因为iOS中一个进程的栈区内存只有1M，Mac也只有8M，显然a已经是在堆区了。\n\n这也证实了：a 在定义前是栈区，但只要进入了 block 区域，就变成了堆区。这才是 `__block` 关键字的真正作用。\n\n `__block` 关键字修饰后，int类型也从4字节变成了32字节，这是 Foundation 框架 malloc 出来的。这也同样能证实上面的结论。（PS：居然比 NSObject alloc 出来的 16  字节要多一倍）。\n\n理解到这是因为堆栈地址的变更，而非所谓的“写操作生效”，这一点至关重要，要不然你如何解释下面这个现象：\n\n以下代码编译可以通过，并且在block中成功将a的从Tom修改为Jerry。\n      \n ```Objective-C\n    NSMutableString *a = [NSMutableString stringWithString:@\"Tom\"];\n    NSLog(@\"\\n 定以前：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n    void (^foo)(void) = ^{\n        a.string = @\"Jerry\";\n        NSLog(@\"\\n block内部：------------------------------------\\n\\\n         a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n        a = [NSMutableString stringWithString:@\"William\"];\n    };\n    foo();\n    NSLog(@\"\\n 定以后：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n    \n ```\n\n![enter image description here](http://i66.tinypic.com/34euhcy.jpg)\n\n\n 这里的a已经由基本数据类型，变成了对象类型。block会对对象类型的指针进行copy，copy到堆中，但并不会改变该指针所指向的堆中的地址，所以在上面的示例代码中，block体内修改的实际是a指向的堆中的内容。\n\n 但如果我们尝试像上面图片中的65行那样做，结果会编译不通过，那是因为此时你在修改的就不是堆中的内容，而是栈中的内容。\n\n上文已经说过：**Block不允许修改外部变量的值**，这里所说的外部变量的值，指的是栈中指针的内存地址。栈区是红灯区，堆区才是绿灯区。\n\n### 39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？ \n\n系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：\n\n\n所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：\n\n ```Objective-C\n[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }]; \n ```\n\n\n\n ```Objective-C\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }]; \n ```\n\n\n\n\n ```Objective-C\n[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" \n                                                  object:nil \n                           queue:[NSOperationQueue mainQueue]\n                                              usingBlock:^(NSNotification * notification) {\n                                                    self.someProperty = xyz; }]; \n ```\n\n这些情况不需要考虑“引用循环”。\n\n\n但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用：\n\n ```Objective-C\n__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^\n{\n__typeof__(self) strongSelf = weakSelf;\n[strongSelf doSomething];\n[strongSelf doSomethingElse];\n} );\n ```\n类似的：\n\n ```Objective-C\n  __weak __typeof__(self) weakSelf = self;\n  _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@\"testKey\"\n                                                                object:nil\n                                                                 queue:nil\n                                                            usingBlock:^(NSNotification *note) {\n      __typeof__(self) strongSelf = weakSelf;\n      [strongSelf dismissModalViewControllerAnimated:YES];\n  }];\n ```\nself --> _observer --> block --> self 显然这也是一个循环引用。\n\n检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  [***FBRetainCycleDetector***](https://github.com/facebook/FBRetainCycleDetector) 。\n### 40. GCD的队列（`dispatch_queue_t`）分哪两种类型？\n\n\n 1. 串行队列Serial Dispatch Queue\n 2. 并行队列Concurrent Dispatch Queue\n\n### 41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。\n\n```Objective-C\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, queue, ^{ /*加载图片1 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片2 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片3 */ }); \ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 合并图片\n});\n```\n### 42. `dispatch_barrier_async`的作用是什么？\n 在并行队列中，为了保持某些任务的顺序，需要等待一些任务完成后才能继续进行，使用 barrier 来等待之前任务完成，避免数据竞争等问题。 \n `dispatch_barrier_async` 函数会等待追加到Concurrent Dispatch Queue并行队列中的操作全部执行完之后，然后再执行 `dispatch_barrier_async` 函数追加的处理，等 `dispatch_barrier_async` 追加的处理执行结束之后，Concurrent Dispatch Queue才恢复之前的动作继续执行。\n\n打个比方：比如你们公司周末跟团旅游，高速休息站上，司机说：大家都去上厕所，速战速决，上完厕所就上高速。超大的公共厕所，大家同时去，程序猿很快就结束了，但程序媛就可能会慢一些，即使你第一个回来，司机也不会出发，司机要等待所有人都回来后，才能出发。 `dispatch_barrier_async` 函数追加的内容就如同 “上完厕所就上高速”这个动作。\n\n（注意：使用 `dispatch_barrier_async` ，该函数只能搭配自定义并行队列 `dispatch_queue_t` 使用。不能使用： `dispatch_get_global_queue` ，否则 `dispatch_barrier_async` 的作用会和 `dispatch_async` 的作用一模一样。 ）\n\n\n### 43. 苹果为什么要废弃`dispatch_get_current_queue`？\n\n`dispatch_get_current_queue`容易造成死锁\n\n\n### 44. 以下代码运行结果如何？\n\n\n\t- (void)viewDidLoad\n\t{\n\t    [super viewDidLoad];\n\t    NSLog(@\"1\");\n\t    dispatch_sync(dispatch_get_main_queue(), ^{\n\t        NSLog(@\"2\");\n\t    });\n\t    NSLog(@\"3\");\n\t}\n\n只输出：1 。发生主线程锁死。\n\n\n### 45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n```Objective-C\n// 添加键值观察\n/*\n1 观察者，负责处理监听事件的对象\n2 观察的属性\n3 观察的选项\n4 上下文\n*/\n[self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];\n```\nobserver中需要实现一下方法：\n\n\n\n```Objective-C\n// 所有的 kvo 监听到事件，都会调用此方法\n/*\n 1. 观察的属性\n 2. 观察的对象\n 3. change 属性变化字典（新／旧）\n 4. 上下文，与监听的时候传递的一致\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;\n```\n\n### 46. 如何手动触发一个value的KVO\n\n所谓的“手动触发”是区别于“自动触发”：\n\n自动触发是指类似这种场景：在注册 KVO 之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。\n\n想知道如何手动触发，必须知道自动触发 KVO 的原理：\n\n键值观察通知依赖于 NSObject 的两个方法:  `willChangeValueForKey:` 和 `didChangevlueForKey:` 。在一个被观察属性发生改变之前，  `willChangeValueForKey:` 一定会被调用，这就\n会记录旧的值。而当改变发生后，  `observeValueForKey:ofObject:change:context:` 会被调用，继而 `didChangeValueForKey:` 也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。\n\n那么“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n具体做法如下：\n\n\n\n如果这个  `value` 是  表示时间的 `self.now` ，那么代码如下：最后两行代码缺一不可。\n\n相关代码已放在仓库里。\n\n ```Objective-C\n//  .m文件\n//  Created by https://github.com/ChenYilong\n//  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/).\n//  手动触发 value 的KVO，最后两行代码缺一不可。\n\n//@property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    _now = [NSDate date];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n ```\n\n但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：\n\n\n > 比如调用 `setNow:` 时，系统还会以某种方式在中间插入 `wilChangeValueForKey:` 、  `didChangeValueForKey:` 和 `observeValueForKeyPath:ofObject:change:context:` 的调用。\n\n\n大家可能以为这是因为 `setNow:` 是合成方法，有时候我们也能看到有人这么写代码:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n ```\n\n这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 `willChangeValueForKey:`  ，之后总是调用 `didChangeValueForkey:` 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。下文《apple用什么方式实现对一个对象的KVO？》会有详述。\n\n参考链接： [Manual Change Notification---Apple 官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-SW3) \n\n### 47. 若一个类有实例变量 `NSString *_foo` ，调用setValue:forKey:时，可以以foo还是 `_foo` 作为key？\n都可以。\n### 48. KVC的keyPath中的集合运算符如何使用？\n\n 1. 必须用在集合对象上或普通对象的集合属性上\n 2. 简单集合运算符有@avg， @count ， @max ， @min ，@sum，\n 3. 格式 @\"@sum.age\"或 @\"集合属性.@max.age\"\n\n### 49. KVC和KVO的keyPath一定是属性么？\nKVC 支持实例变量，KVO 只能手动支持[手动设定实例变量的KVO实现监听](https://yq.aliyun.com/articles/30483)\n### 50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n\n请参考：\n\n  1. [《如何自己动手实现 KVO》](http://tech.glowing.com/cn/implement-kvo/)\n  2. [**KVO for manually implemented properties**]( http://stackoverflow.com/a/10042641/3395008 ) \n\n### 51. apple用什么方式实现对一个对象的KVO？ \n\n\n\n[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)对 KVO 实现的描述：\n\n > Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\n从[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)可以看出：Apple 并不希望过多暴露 KVO 的实现细节。不过，要是借助 runtime 提供的方法去深入挖掘，所有被掩盖的细节都会原形毕露：\n\n > 当你观察一个对象时，一个新的类会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象：值的更改。最后通过 ` isa 混写（isa-swizzling）` 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。我画了一张示意图，如下所示：\n\n![enter image description here](http://i62.tinypic.com/sy57ur.jpg)\n\n KVO 确实有点黑魔法：\n\n\n > Apple 使用了 ` isa 混写（isa-swizzling）`来实现 KVO 。\n\n\n下面做下详细解释：\n\n键值观察通知依赖于 NSObject 的两个方法:  `willChangeValueForKey:` 和 `didChangevlueForKey:` 。在一个被观察属性发生改变之前，  `willChangeValueForKey:` 一定会被调用，这就会记录旧的值。而当改变发生后， `observeValueForKey:ofObject:change:context:` 会被调用，继而  `didChangeValueForKey:` 也会被调用。可以手动实现这些调用，但很少有人这么做。一般我们只在希望能控制回调的调用时机时才会这么做。大部分情况下，改变通知会自动调用。\n\n 比如调用 `setNow:` 时，系统还会以某种方式在中间插入 `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` 的调用。大家可能以为这是因为 `setNow:` 是合成方法，有时候我们也能看到有人这么写代码:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n ```\n\n这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 `willChangeValueForKey:`  ，之后总是调用 `didChangeValueForkey:` 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。第一次对一个对象调用 `addObserver:forKeyPath:options:context:` 时，框架会创建这个类的新的 KVO 子类，并将被观察对象转换为新子类的对象。在这个 KVO 特殊子类中， Cocoa 创建观察属性的 setter ，大致工作原理如下:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"];\n    [super setValue:aDate forKey:@\"now\"];\n    [self didChangeValueForKey:@\"now\"];\n}\n ```\n这种继承和方法注入是在运行时而不是编译时实现的。这就是正确命名如此重要的原因。只有在使用KVC命名约定时，KVO才能做到这一点。\n\nKVO 在实现中通过 ` isa 混写（isa-swizzling）` 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。这在[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)可以得到印证：\n\n > Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\n\n然而 KVO 在实现中使用了 ` isa 混写（ isa-swizzling）` ，这个的确不是很容易发现：Apple 还重写、覆盖了 `-class` 方法并返回原来的类。 企图欺骗我们：这个类没有变，就是原本那个类。。。\n\n但是，假设“被监听的对象”的类对象是 `MYClass` ，有时候我们能看到对 `NSKVONotifying_MYClass` 的引用而不是对  `MYClass`  的引用。借此我们得以知道 Apple 使用了 ` isa 混写（isa-swizzling）`。具体探究过程可参考[ 这篇博文 ](https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html)。\n\n\n那么 `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` 这三个方法的执行顺序是怎样的呢？\n\n `wilChangeValueForKey:` 、  `didChangeValueForKey:` 很好理解，`observeValueForKeyPath:ofObject:change:context:` 的执行时机是什么时候呢？\n\n 先看一个例子：\n\n代码已放在仓库里。\n\n ```Objective-C\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context {\n    NSLog(@\"3\");\n}\n\n ```\n\n![enter image description here](http://i66.tinypic.com/ncm7th.jpg)\n\n\n如果单单从下面这个例子的打印上， \n\n顺序似乎是 `wilChangeValueForKey:` 、 `observeValueForKeyPath:ofObject:change:context:` 、 `didChangeValueForKey:` 。\n\n其实不然，这里有一个 `observeValueForKeyPath:ofObject:change:context:`  , 和 `didChangeValueForKey:` 到底谁先调用的问题：如果 `observeValueForKeyPath:ofObject:change:context:` 是在 `didChangeValueForKey:` 内部触发的操作呢？ 那么顺序就是： `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` \n\n不信你把 `didChangeValueForKey:` 注视掉，看下 `observeValueForKeyPath:ofObject:change:context:` 会不会执行。\n\n了解到这一点很重要，正如  [46. 如何手动触发一个value的KVO](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo)  所说的：\n\n“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n而“回调的调用时机”就是在你调用 `didChangeValueForKey:` 方法时。\n\n### 52. IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n参考链接：[ ***Should IBOutlets be strong or weak under ARC?*** ](http://stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc)\n\n文章告诉我们：\n\n> 因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。\n\n\n不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系\n\n### 53. IB中User Defined Runtime Attributes如何使用？ \n\n它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller\n\n\n### 54. 如何调试BAD_ACCESS错误\n\n\n 1. 重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object\n 2. 通过 Zombie \n![enter image description here](http://i.stack.imgur.com/ZAdi0.png)\n\n 3. 设置全局断点快速定位问题代码所在行\n 4. Xcode 7 已经集成了BAD_ACCESS捕获功能：**Address Sanitizer**。\n用法如下：在配置中勾选✅Enable Address Sanitizer\n ![enter image description here](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Art/xc7-asan_2x.png)\n\n### 55. lldb（gdb）常用的调试命令？\n\n - breakpoint 设置断点定位到某一个函数\n - n 断点指针下一步\n - po打印对象\n\n更多 lldb（gdb） 调试命令可查看\n\n\n 1. [ ***The LLDB Debugger*** ](http://lldb.llvm.org/lldb-gdb.html)；\n 2. 苹果官方文档：[ ***iOS Debugging Magic*** ](https://developer.apple.com/library/ios/technotes/tn2239/_index.html)。\n\n\n----------\n\n\nPosted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  \n原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)\n\n\n","source":"_posts/《招聘一个靠谱的iOS》面试题参考答案（下）.md","raw":"---\ntitle: 《招聘一个靠谱的iOS》面试题参考答案（下）\ndate: 2017-05-24 14:59:00\ncategories: \n\t- 面试经\n---\n\n[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)—参考答案（下）\n\n\n说明：面试题来源是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)的这篇博文：[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)，其中共55题，除第一题为纠错题外，其他54道均为简答题。\n\n出题者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。\n\n答案为[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)整理，未经出题者校对，如有纰漏，请向[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)指正。\n\n----------\n\n# 索引\n\n\n 1. [ 25. `_objc_msgForward` 函数是做什么的，直接调用它将会发生什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#25-_objc_msgforward函数是做什么的直接调用它将会发生什么)\n 2. [26. runtime如何实现weak变量的自动置nil？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#26-runtime如何实现weak变量的自动置nil)\n 3.  [27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#27-能否向编译后得到的类中增加实例变量能否向运行时创建的类中添加实例变量为什么) \n 4.  [28. runloop和线程有什么关系？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#28-runloop和线程有什么关系) \n 5.  [29. runloop的mode作用是什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#29-runloop的mode作用是什么) \n 6.  [30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#30-以-scheduledtimerwithtimeinterval的方式触发的timer在滑动页面上的列表时timer会暂定回调为什么如何解决) \n 7.  [31. 猜想runloop内部是如何实现的？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#31-猜想runloop内部是如何实现的) \n 8.  [32. objc使用什么机制管理对象内存？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#32-objc使用什么机制管理对象内存) \n 9.  [33. ARC通过什么方式帮助开发者管理内存？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#33-arc通过什么方式帮助开发者管理内存) \n 10.  [34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#34-不手动指定autoreleasepool的前提下一个autorealese对象在什么时刻释放比如在一个vc的viewdidload中创建) \n 11.  [35. BAD_ACCESS在什么情况下出现？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#35-bad_access在什么情况下出现) \n 12.  [36. 苹果是如何实现autoreleasepool的？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#36-苹果是如何实现autoreleasepool的) \n 13.  [37. 使用block时什么情况会发生引用循环，如何解决？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#37-使用block时什么情况会发生引用循环如何解决)\n 14.  [38. 在block内如何修改block外部变量？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#38-在block内如何修改block外部变量) \n 15.  [39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#39-使用系统的某些block-api如uiview的block版本写动画时是否也考虑引用循环问题) \n 16.  [40. GCD的队列（dispatch_queue_t）分哪两种类型？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#40-gcd的队列dispatch_queue_t分哪两种类型) \n 17.   [41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#41-如何用gcd同步若干个异步调用如根据若干个url异步加载多张图片然后在都下载完成后合成一张整图) \n 18.  [42. dispatch_barrier_async的作用是什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#42-dispatch_barrier_async的作用是什么) \n 19.  [43. 苹果为什么要废弃dispatch_get_current_queue？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#43-苹果为什么要废弃dispatch_get_current_queue) \n 0.  [44. 以下代码运行结果如何？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#44-以下代码运行结果如何) \n\n ```Objective-C\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@\"1\");\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n ```\n\n 1.  [45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#45-addobserverforkeypathoptionscontext各个参数的作用分别是什么observer中需要实现哪个方法才能获得kvo回调) \n 2.  [46. 如何手动触发一个value的KVO](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo) \n 3.  [47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#47-若一个类有实例变量-nsstring-_foo-调用setvalueforkey时可以以foo还是-_foo-作为key) \n 4.  [48. KVC的keyPath中的集合运算符如何使用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#48-kvc的keypath中的集合运算符如何使用) \n 5.  [49. KVC和KVO的keyPath一定是属性么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#49-kvc和kvo的keypath一定是属性么) \n 6.  [50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#50-如何关闭默认的kvo的默认实现并进入自定义的kvo实现) \n 7.  [51. apple用什么方式实现对一个对象的KVO？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#51-apple用什么方式实现对一个对象的kvo) \n 8.  [52. IBOutlet连出来的视图属性为什么可以被设置成weak?](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#52-iboutlet连出来的视图属性为什么可以被设置成weak) \n 9.  [53. IB中User Defined Runtime Attributes如何使用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#53-ib中user-defined-runtime-attributes如何使用) \n 0.  [54. 如何调试BAD_ACCESS错误](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#54-如何调试bad_access错误) \n 1.  [55. lldb（gdb）常用的调试命令？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#55-lldbgdb常用的调试命令) \n\n\n\n\n\n\n\n\n\n\n----------\n\n\n### 25. `_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n> `_objc_msgForward`是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n我们可以这样创建一个`_objc_msgForward`对象：\n\n    IMP msgForwardIMP = _objc_msgForward;\n\n\n\n在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《objc中向一个对象发送消息`[obj foo]`和`objc_msgSend()`函数之间有什么关系？》曾提到`objc_msgSend`在“消息传递”中的作用。在“消息传递”过程中，`objc_msgSend`的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用`_objc_msgForward`函数指针代替 IMP 。最后，执行这个 IMP 。\n\n\n\nObjective-C运行时是开源的，所以我们可以看到它的实现。打开[ ***Apple Open Source 里Mac代码里的obj包*** ](http://www.opensource.apple.com/tarballs/objc4/)下载一个最新版本，找到 `objc-runtime-new.mm`，进入之后搜索`_objc_msgForward`。\n\n![enter image description here](http://i.imgur.com/rGBfaoL.png)\n\n里面有对`_objc_msgForward`的功能解释：\n\n![enter image description here](http://i.imgur.com/vcThcdA.png)\n\n\n```Objective-C\n/***********************************************************************\n* lookUpImpOrForward.\n* The standard IMP lookup. \n* initialize==NO tries to avoid +initialize (but sometimes fails)\n* cache==NO skips optimistic unlocked lookup (but uses cache elsewhere)\n* Most callers should use initialize==YES and cache==YES.\n* inst is an instance of cls or a subclass thereof, or nil if none is known. \n*   If cls is an un-initialized metaclass then a non-nil inst is faster.\n* May return _objc_msgForward_impcache. IMPs destined for external use \n*   must be converted to _objc_msgForward or _objc_msgForward_stret.\n*   If you don't want forwarding at all, use lookUpImpOrNil() instead.\n**********************************************************************/\n```\n\n对 `objc-runtime-new.mm`文件里与`_objc_msgForward`有关的三个函数使用伪代码展示下：\n\n```Objective-C\n//  objc-runtime-new.mm 文件里与 _objc_msgForward 有关的三个函数使用伪代码展示\n//  Created by https://github.com/ChenYilong\n//  Copyright (c)  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/). All rights reserved.\n//  同时，这也是 obj_msgSend 的实现过程\n\nid objc_msgSend(id self, SEL op, ...) {\n    if (!self) return nil;\n\tIMP imp = class_getMethodImplementation(self->isa, SEL op);\n\timp(self, op, ...); //调用这个函数，伪代码...\n}\n \n//查找IMP\nIMP class_getMethodImplementation(Class cls, SEL sel) {\n    if (!cls || !sel) return nil;\n    IMP imp = lookUpImpOrNil(cls, sel);\n    if (!imp) return _objc_msgForward; //_objc_msgForward 用于消息转发\n    return imp;\n}\n \nIMP lookUpImpOrNil(Class cls, SEL sel) {\n    if (!cls->initialize()) {\n        _class_initialize(cls);\n    }\n \n    Class curClass = cls;\n    IMP imp = nil;\n    do { //先查缓存,缓存没有时重建,仍旧没有则向父类查询\n        if (!curClass) break;\n        if (!curClass->cache) fill_cache(cls, curClass);\n        imp = cache_getImp(curClass, sel);\n        if (imp) break;\n    } while (curClass = curClass->superclass);\n \n    return imp;\n}\n```\n虽然Apple没有公开`_objc_msgForward`的实现源码，但是我们还是能得出结论：\n\n> `_objc_msgForward`是一个函数指针（和 IMP 的类型一样），是用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n\n> 在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《objc中向一个对象发送消息`[obj foo]`和`objc_msgSend()`函数之间有什么关系？》曾提到`objc_msgSend`在“消息传递”中的作用。在“消息传递”过程中，`objc_msgSend`的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用`_objc_msgForward`函数指针代替 IMP 。最后，执行这个 IMP 。\n\n\n\n为了展示消息转发的具体动作，这里尝试向一个对象发送一条错误的消息，并查看一下`_objc_msgForward`是如何进行转发的。\n\n首先开启调试模式、打印出所有运行时发送的消息：\n可以在代码里执行下面的方法：\n\n```Objective-C\n(void)instrumentObjcMessageSends(YES);\n```\n\n\n或者断点暂停程序运行，并在 gdb 中输入下面的命令：\n\n```Objective-C\ncall (void)instrumentObjcMessageSends(YES)\n```\n\n以第二种为例，操作如下所示：\n\n![enter image description here](http://i.imgur.com/uEwTCC4.png)\n\n\n之后，运行时发送的所有消息都会打印到`/tmp/msgSend-xxxx`文件里了。\n\n终端中输入命令前往：\n\n```Objective-C\nopen /private/tmp\n```\n\n\n\n\n\n![enter image description here](http://i.imgur.com/Fh5hhCw.png)\n\n\n\n可能看到有多条，找到最新生成的，双击打开\n\n\n\n在模拟器上执行执行以下语句（这一套调试方案仅适用于模拟器，真机不可用，关于该调试方案的拓展链接：[ ***Can the messages sent to an object in Objective-C be monitored or printed out?*** ](http://stackoverflow.com/a/10750398/3395008)），向一个对象发送一条错误的消息：\n\n\n\n\n```Objective-C\n//\n//  main.m\n//  CYLObjcMsgForwardTest\n//\n//  Created by http://weibo.com/luohanchenyilong/.\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n#import \"AppDelegate.h\"\n#import \"CYLTest.h\"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOS程序犭袁))];\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n\n```\n\n![enter image description here](http://i.imgur.com/UjbmVvB.png)\n\n\n你可以在`/tmp/msgSend-xxxx`（我这一次是`/tmp/msgSend-9805`）文件里，看到打印出来：\n\n\n\n![enter image description here](http://i.imgur.com/AAERz1T.png)\n\n\n \n```Objective-C\n+ CYLTest NSObject initialize\n+ CYLTest NSObject alloc\n- CYLTest NSObject init\n- CYLTest NSObject performSelector:\n+ CYLTest NSObject resolveInstanceMethod:\n+ CYLTest NSObject resolveInstanceMethod:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject class\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject class\n```\n\n\n\n结合[《NSObject官方文档》](https://developer.apple.com/library/prerelease/watchos/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/#//apple_ref/doc/uid/20000050-SW11)，排除掉 NSObject 做的事，剩下的就是`_objc_msgForward`消息转发做的几件事：\n\n\n 1. 调用`resolveInstanceMethod:`方法 (或 `resolveClassMethod:`)。允许用户在此时为该 Class 动态添加实现。如果有实现了，则调用并返回YES，那么重新开始`objc_msgSend`流程。这一次对象会响应这个选择器，一般是因为它已经调用过`class_addMethod`。如果仍没实现，继续下面的动作。\n\n 2. 调用`forwardingTargetForSelector:`方法，尝试找到一个能响应该消息的对象。如果获取到，则直接把消息转发给它，返回非 nil 对象。否则返回 nil ，继续下面的动作。注意，这里不要返回 self ，否则会形成死循环。\n\n 3. 调用`methodSignatureForSelector:`方法，尝试获得一个方法签名。如果获取不到，则直接调用`doesNotRecognizeSelector`抛出异常。如果能获取，则返回非nil：创建一个 NSlnvocation 并传给`forwardInvocation:`。\n\n 4. 调用`forwardInvocation:`方法，将第3步获取到的方法签名包装成 Invocation 传入，如何处理就在这里面了，并返回非ni。\n\n 5. 调用`doesNotRecognizeSelector:` ，默认的实现是抛出异常。如果第3步没能获得一个方法签名，执行该步骤。\n\n上面前4个方法均是模板方法，开发者可以override，由 runtime 来调用。最常见的实现消息转发：就是重写方法3和4，吞掉一个消息或者代理给其他对象都是没问题的\n\n也就是说`_objc_msgForward`在进行消息转发的过程中会涉及以下这几个方法：\n\n 1. `resolveInstanceMethod:`方法 (或 `resolveClassMethod:`)。\n\n 2. `forwardingTargetForSelector:`方法\n\n 3. `methodSignatureForSelector:`方法\n\n 4. `forwardInvocation:`方法\n\n 5. `doesNotRecognizeSelector:` 方法\n\n为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ `_objc_msgForward_demo` ”,可运行起来看看。\n\n\n下面回答下第二个问题“直接`_objc_msgForward`调用它将会发生什么？”\n\n直接调用`_objc_msgForward`是非常危险的事，如果用不好会直接导致程序Crash，但是如果用得好，能做很多非常酷的事。\n\n就好像跑酷，干得好，叫“耍酷”，干不好就叫“作死”。\n\n正如前文所说：\n\n> `_objc_msgForward`是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，`_objc_msgForward`会尝试做消息转发。\n\n如何调用`_objc_msgForward`？\n`_objc_msgForward`隶属 C 语言，有三个参数 ：\n\n|--| `_objc_msgForward`参数| 类型 |\n-------------|-------------|-------------\n 1.| 所属对象 | id类型\n 2. |方法名 | SEL类型 \n 3. |可变参数 |可变参数类型\n\n\n首先了解下如何调用 IMP 类型的方法，IMP类型是如下格式：\n\n为了直观，我们可以通过如下方式定义一个 IMP类型 ：\n\n```Objective-C\ntypedef void (*voidIMP)(id, SEL, ...)\n```\n一旦调用`_objc_msgForward`，将跳过查找 IMP 的过程，直接触发“消息转发”，\n\n如果调用了`_objc_msgForward`，即使这个对象确实已经实现了这个方法，你也会告诉`objc_msgSend`：\n\n\n> “我没有在这个对象里找到这个方法的实现”\n\n\n\n想象下`objc_msgSend`会怎么做？通常情况下，下面这张图就是你正常走`objc_msgSend`过程，和直接调用`_objc_msgForward`的前后差别：\n\n![enter image description here](http://ww1.sinaimg.cn/bmiddle/6628711bgw1eecx3jef23g206404tkbi.gif)\n\n有哪些场景需要直接调用`_objc_msgForward`？最常见的场景是：你想获取某方法所对应的`NSInvocation`对象。举例说明：\n\n[JSPatch （Github 链接）](https://github.com/bang590/JSPatch)就是直接调用`_objc_msgForward`来实现其核心功能的：\n\n>  JSPatch 以小巧的体积做到了让JS调用/替换任意OC方法，让iOS APP具备热更新的能力。\n\n\n作者的博文[《JSPatch实现原理详解》](http://blog.cnbang.net/tech/2808/)详细记录了实现原理，有兴趣可以看下。\n\n同时 [ ***RAC(ReactiveCocoa)*** ](https://github.com/ReactiveCocoa/ReactiveCocoa) 源码中也用到了该方法。\n\n### 26. runtime如何实现weak变量的自动置nil？\n\n\n> runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。\n\n在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)中的《runtime 如何实现 weak 属性》有论述。（注：在[上篇](https://github.com/ChenYilong/iOSInterviewQuestions)的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到`__weak`引用的解除时间。）\n\n我们可以设计一个函数（伪代码）来表示上述机制：\n\n`objc_storeWeak(&a, b)`函数：\n\n`objc_storeWeak`函数把第二个参数--赋值对象（b）的内存地址作为键值key，将第一个参数--weak修饰的属性变量（a）的内存地址（&a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&a）从weak表中删除，\n\n你可以把`objc_storeWeak(&a, b)`理解为：`objc_storeWeak(value, key)`，并且当key变nil，将value置nil。\n\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。\n\n而如果a是由assign修饰的，则：\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a还是指向该内存地址，变野指针。此时向a发送消息极易崩溃。\n\n\n下面我们将基于`objc_storeWeak(&a, b)`函数，使用伪代码模拟“runtime如何实现weak属性”：\n \n\n\n \n```Objective-C\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&obj1);\n```\n\n下面对用到的两个方法`objc_initWeak`和`objc_destroyWeak`做下解释：\n\n总体说来，作用是：\n通过`objc_initWeak`函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过`objc_destoryWeak`函数释放该变量（obj1）。\n\n下面分别介绍下方法的内部实现：\n\n`objc_initWeak`函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用`objc_storeWeak`函数。\n\n\n\n \n```Objective-C\nobj1 = 0；\nobj_storeWeak(&obj1, obj);\n```\n\n也就是说：\n\n>  weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）\n\n\n\n\n然后`obj_destroyWeak`函数将0（nil）作为参数，调用`objc_storeWeak`函数。\n\n`objc_storeWeak(&obj1, 0);`\n\n前面的源代码与下列源代码相同。\n\n\n\n```Objective-C\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&obj1, 0);\n```\n\n\n`objc_storeWeak`函数把第二个参数--赋值对象（obj）的内存地址作为键值，将第一个参数--weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从weak表中删除。\n\n\n\n\n\n### 27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？ \n\n - 不能向编译后得到的类中增加实例变量；\n - 能向运行时创建的类中添加实例变量；\n\n解释下：\n\n - 因为编译后的类已经注册在 runtime 中，类结构体中的 `objc_ivar_list` 实例变量的链表 和 `instance_size` 实例变量的内存大小已经确定，同时runtime 会调用 `class_setIvarLayout` 或 `class_setWeakIvarLayout` 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；\n\n - 运行时创建的类是可以添加实例变量，调用 `class_addIvar` 函数。但是得在调用 `objc_allocateClassPair` 之后，`objc_registerClassPair` 之前，原因同上。\n\n\n### 28. runloop和线程有什么关系？\n\n总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。\n\n runloop 和线程的关系：\n\n\n\n\n 1. 主线程的run loop默认是启动的。\n\n iOS的应用程序里面，程序启动后会有一个如下的main()函数\n \n ```Objective-C\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n```\n\n\n\n\n\n 重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。\n\n 2. 对其它线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程只是去执行一个长时间的已确定的任务则不需要。\n\n 3. 在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。\n\n\n ```Objective-C\nNSRunLoop *runloop = [NSRunLoop currentRunLoop];\n```\n\n\n参考链接：[《Objective-C之run loop详解》](http://blog.csdn.net/wzzvictory/article/details/9237973)。\n\n### 29. runloop的mode作用是什么？\n\nmodel 主要是用来指定事件在运行循环中的优先级的，分为：\n\n\n* NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态\n* UITrackingRunLoopMode：ScrollView滑动时\n* UIInitializationRunLoopMode：启动时\n* NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合\n\n苹果公开提供的 Mode 有两个：\n\n 1. NSDefaultRunLoopMode（kCFRunLoopDefaultMode）\n 2. NSRunLoopCommonModes（kCFRunLoopCommonModes）\n\n### 30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\nRunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，ScrollView滚动过程中NSDefaultRunLoopMode（kCFRunLoopDefaultMode）的mode会切换到UITrackingRunLoopMode来保证ScrollView的流畅滑动：只能在NSDefaultRunLoopMode模式下处理的事件会影响ScrollView的滑动。\n\n如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候,\nScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。\n\n同时因为mode还是可定制的，所以：\n\n Timer计时会被scrollView的滑动影响的问题可以通过将timer添加到NSRunLoopCommonModes（kCFRunLoopCommonModes）来解决。代码如下：\n\n```objective-c\n// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n\n//将timer添加到NSDefaultRunLoopMode中\n[NSTimer scheduledTimerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n//然后再添加到NSRunLoopCommonModes里\nNSTimer *timer = [NSTimer timerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n```\n\n\n### 31. 猜想runloop内部是如何实现的？\n\n> 一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑\n是这样的：\n\n\n\n\n\tfunction loop() {\n\t    initialize();\n\t    do {\n\t        var message = get_next_message();\n\t        process_message(message);\n\t    } while (message != quit);\n\t}\n\n\n或使用伪代码来展示下:\n\n\t// \n\t// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n\t// https://github.com/ChenYilong\n\tint main(int argc, char * argv[]) {\n     //程序一直运行状态\n     while (AppIsRunning) {\n          //睡眠状态，等待唤醒事件\n          id whoWakesMe = SleepForWakingUp();\n          //得到唤醒事件\n          id event = GetEvent(whoWakesMe);\n          //开始处理事件\n          HandleEvent(event);\n     }\n     return 0;\n\t}\n\n参考链接：\n\n 1. [《深入理解RunLoop》](http://blog.ibireme.com/2015/05/18/runloop/#base)\n 2. 摘自博文[***CFRunLoop***](https://github.com/ming1016/study/wiki/CFRunLoop)，原作者是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)\n\n### 32. objc使用什么机制管理对象内存？\n\n通过 retainCount 的机制来决定对象是否需要释放。\n每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n### 33. ARC通过什么方式帮助开发者管理内存？\n <p><del>编译时根据代码上下文，插入 retain/release\n</del></p>\nARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。\n\n在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。【TODO:后续更新会详细描述下】\n###  34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n分两种情况：手动干预释放时机、系统自动去释放。\n\n\n 1. 手动干预释放时机--指定autoreleasepool\n 就是所谓的：当前作用域大括号结束时释放。\n 2. 系统自动去释放--不手动指定autoreleasepool\n\n  Autorelease对象出了作用域之后，会被添加到最近一次创建的自动释放池中，并会在当前的 runloop 迭代结束时释放。\n\n释放的时机总结起来，可以用下图来表示：\n\n![autoreleasepool与 runloop 的关系图](http://i61.tinypic.com/28kodwp.jpg)\n\n下面对这张图进行详细的解释：\n\n\n从程序启动到加载完成是一个完整的运行循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。\n\n我们都知道：\n**所有 autorelease 的对象，在出了作用域之后，会被自动添加到最近创建的自动释放池中。**\n\n但是如果每次都放进应用程序的 `main.m` 中的 autoreleasepool 中，迟早有被撑满的一刻。这个过程中必定有一个释放的动作。何时？\n\n在一次完整的运行循环结束之前，会被销毁。\n\n那什么时间会创建自动释放池？运行循环检测到事件并启动后，就会创建自动释放池。 \n\n子线程的 runloop 默认是不工作，无法主动创建，必须手动创建。\n\n自定义的 NSOperation 和 NSThread 需要手动创建自动释放池。比如： 自定义的 NSOperation 类中的 main 方法里就必须添加自动释放池。否则出了作用域后，自动释放对象会因为没有自动释放池去处理它，而造成内存泄露。\n\n但对于 blockOperation 和 invocationOperation 这种默认的Operation ，系统已经帮我们封装好了，不需要手动创建自动释放池。\n\n\n@autoreleasepool 当自动释放池被销毁或者耗尽时，会向自动释放池中的所有对象发送 release 消息，释放自动释放池中的所有对象。\n\n\n\n 如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。\n\n\n\n\n\n参考链接：[《黑幕背后的Autorelease》](http://blog.sunnyxx.com/2014/10/15/behind-autorelease/)\n\n###  35. BAD_ACCESS在什么情况下出现？\n访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。\n死循环\n###  36. 苹果是如何实现autoreleasepool的？ \n\nautoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.\n\n\n 1. `objc_autoreleasepoolPush`\n 2. `objc_autoreleasepoolPop`\n 3. `objc_autorelease`\n\n看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。\n\n举例说明：我们都知道用类方法创建的对象都是 Autorelease 的，那么一旦 Person 出了作用域，当在 Person 的 dealloc 方法中打上断点，我们就可以看到这样的调用堆栈信息：\n\n ![enter image description here](http://i60.tinypic.com/15mfj11.jpg)\n\n### 37. 使用block时什么情况会发生引用循环，如何解决？\n一个对象中强引用了block，在block中又强引用了该对象，就会发射循环引用。\n\n解决方法是将该对象使用__weak或者__block修饰符修饰之后再在block中使用。\n\n\n\n 1. id weak weakSelf = self;\n\t或者 weak __typeof(&*self)weakSelf = self该方法可以设置宏\n 2. id __block weakSelf = self;\n\n或者将其中一方强制制空 `xxx = nil`。\n\n检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  [***FBRetainCycleDetector***](https://github.com/facebook/FBRetainCycleDetector) 。\n\n### 38. 在block内如何修改block外部变量？\n默认情况下，在block中访问的外部变量是复制过去的，即：**写操作不对原变量生效**。但是你可以加上 `__block` 来让其写操作生效，示例代码如下:\n\n\n ```Objective-C\n\t__block int a = 0;\n\tvoid (^foo)(void) = ^{ \n\t    a = 1; \n\t};\n\tfoo(); \n\t//这里，a的值被修改为1\n ```\n\n\n这是 [微博@唐巧_boy](http://weibo.com/tangqiaoboy)的《iOS开发进阶》中的第11.2.3章节中的描述。你同样可以在面试中这样回答，但你并没有答到“点子上”。真正的原因，并没有书这本书里写的这么“神奇”，而且这种说法也有点牵强。面试官肯定会追问“为什么写操作就生效了？”真正的原因是这样的：\n\n\n > 我们都知道：**Block不允许修改外部变量的值**，这里所说的外部变量的值，指的是栈中指针的内存地址。`__block` 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。\n\n**Block不允许修改外部变量的值**。Apple这样设计，应该是考虑到了block的特殊性，block也属于“函数”的范畴，变量进入block，实际就是已经改变了作用域。在几个作用域之间进行切换时，如果不加上这样的限制，变量的可维护性将大大降低。又比如我想在block内声明了一个与外部同名的变量，此时是允许呢还是不允许呢？只有加上了这样的限制，这样的情景才能实现。于是栈区变成了红灯区，堆区变成了绿灯区。\n\n我们可以打印下内存地址来进行验证：\n\n ```Objective-C\n    __block int a = 0;\n    NSLog(@\"定义前：%p\", &a);         //栈区\n    void (^foo)(void) = ^{\n        a = 1;\n        NSLog(@\"block内部：%p\", &a);    //堆区\n    };\n    NSLog(@\"定义后：%p\", &a);         //堆区\n    foo();\n ```\n\n ```Objective-C\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义前：0x16fda86f8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义后：0x155b22fc8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] block内部： 0x155b22fc8\n ```\n \n \n“定义后”和“block内部”两者的内存地址是一样的，我们都知道 block 内部的变量会被 copy 到堆区，“block内部”打印的是堆地址，因而也就可以知道，“定义后”打印的也是堆的地址。\n \n \n 那么如何证明“block内部”打印的是堆地址？\n \n 把三个16进制的内存地址转成10进制就是：\n \n 1. 定义后前：6171559672\n 2. block内部：5732708296\n 3. 定义后后：5732708296\n \n中间相差438851376个字节，也就是 418.5M 的空间，因为堆地址要小于栈地址，又因为iOS中一个进程的栈区内存只有1M，Mac也只有8M，显然a已经是在堆区了。\n\n这也证实了：a 在定义前是栈区，但只要进入了 block 区域，就变成了堆区。这才是 `__block` 关键字的真正作用。\n\n `__block` 关键字修饰后，int类型也从4字节变成了32字节，这是 Foundation 框架 malloc 出来的。这也同样能证实上面的结论。（PS：居然比 NSObject alloc 出来的 16  字节要多一倍）。\n\n理解到这是因为堆栈地址的变更，而非所谓的“写操作生效”，这一点至关重要，要不然你如何解释下面这个现象：\n\n以下代码编译可以通过，并且在block中成功将a的从Tom修改为Jerry。\n      \n ```Objective-C\n    NSMutableString *a = [NSMutableString stringWithString:@\"Tom\"];\n    NSLog(@\"\\n 定以前：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n    void (^foo)(void) = ^{\n        a.string = @\"Jerry\";\n        NSLog(@\"\\n block内部：------------------------------------\\n\\\n         a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n        a = [NSMutableString stringWithString:@\"William\"];\n    };\n    foo();\n    NSLog(@\"\\n 定以后：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n    \n ```\n\n![enter image description here](http://i66.tinypic.com/34euhcy.jpg)\n\n\n 这里的a已经由基本数据类型，变成了对象类型。block会对对象类型的指针进行copy，copy到堆中，但并不会改变该指针所指向的堆中的地址，所以在上面的示例代码中，block体内修改的实际是a指向的堆中的内容。\n\n 但如果我们尝试像上面图片中的65行那样做，结果会编译不通过，那是因为此时你在修改的就不是堆中的内容，而是栈中的内容。\n\n上文已经说过：**Block不允许修改外部变量的值**，这里所说的外部变量的值，指的是栈中指针的内存地址。栈区是红灯区，堆区才是绿灯区。\n\n### 39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？ \n\n系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：\n\n\n所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：\n\n ```Objective-C\n[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }]; \n ```\n\n\n\n ```Objective-C\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }]; \n ```\n\n\n\n\n ```Objective-C\n[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" \n                                                  object:nil \n                           queue:[NSOperationQueue mainQueue]\n                                              usingBlock:^(NSNotification * notification) {\n                                                    self.someProperty = xyz; }]; \n ```\n\n这些情况不需要考虑“引用循环”。\n\n\n但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用：\n\n ```Objective-C\n__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^\n{\n__typeof__(self) strongSelf = weakSelf;\n[strongSelf doSomething];\n[strongSelf doSomethingElse];\n} );\n ```\n类似的：\n\n ```Objective-C\n  __weak __typeof__(self) weakSelf = self;\n  _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@\"testKey\"\n                                                                object:nil\n                                                                 queue:nil\n                                                            usingBlock:^(NSNotification *note) {\n      __typeof__(self) strongSelf = weakSelf;\n      [strongSelf dismissModalViewControllerAnimated:YES];\n  }];\n ```\nself --> _observer --> block --> self 显然这也是一个循环引用。\n\n检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  [***FBRetainCycleDetector***](https://github.com/facebook/FBRetainCycleDetector) 。\n### 40. GCD的队列（`dispatch_queue_t`）分哪两种类型？\n\n\n 1. 串行队列Serial Dispatch Queue\n 2. 并行队列Concurrent Dispatch Queue\n\n### 41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。\n\n```Objective-C\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, queue, ^{ /*加载图片1 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片2 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片3 */ }); \ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 合并图片\n});\n```\n### 42. `dispatch_barrier_async`的作用是什么？\n 在并行队列中，为了保持某些任务的顺序，需要等待一些任务完成后才能继续进行，使用 barrier 来等待之前任务完成，避免数据竞争等问题。 \n `dispatch_barrier_async` 函数会等待追加到Concurrent Dispatch Queue并行队列中的操作全部执行完之后，然后再执行 `dispatch_barrier_async` 函数追加的处理，等 `dispatch_barrier_async` 追加的处理执行结束之后，Concurrent Dispatch Queue才恢复之前的动作继续执行。\n\n打个比方：比如你们公司周末跟团旅游，高速休息站上，司机说：大家都去上厕所，速战速决，上完厕所就上高速。超大的公共厕所，大家同时去，程序猿很快就结束了，但程序媛就可能会慢一些，即使你第一个回来，司机也不会出发，司机要等待所有人都回来后，才能出发。 `dispatch_barrier_async` 函数追加的内容就如同 “上完厕所就上高速”这个动作。\n\n（注意：使用 `dispatch_barrier_async` ，该函数只能搭配自定义并行队列 `dispatch_queue_t` 使用。不能使用： `dispatch_get_global_queue` ，否则 `dispatch_barrier_async` 的作用会和 `dispatch_async` 的作用一模一样。 ）\n\n\n### 43. 苹果为什么要废弃`dispatch_get_current_queue`？\n\n`dispatch_get_current_queue`容易造成死锁\n\n\n### 44. 以下代码运行结果如何？\n\n\n\t- (void)viewDidLoad\n\t{\n\t    [super viewDidLoad];\n\t    NSLog(@\"1\");\n\t    dispatch_sync(dispatch_get_main_queue(), ^{\n\t        NSLog(@\"2\");\n\t    });\n\t    NSLog(@\"3\");\n\t}\n\n只输出：1 。发生主线程锁死。\n\n\n### 45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n```Objective-C\n// 添加键值观察\n/*\n1 观察者，负责处理监听事件的对象\n2 观察的属性\n3 观察的选项\n4 上下文\n*/\n[self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];\n```\nobserver中需要实现一下方法：\n\n\n\n```Objective-C\n// 所有的 kvo 监听到事件，都会调用此方法\n/*\n 1. 观察的属性\n 2. 观察的对象\n 3. change 属性变化字典（新／旧）\n 4. 上下文，与监听的时候传递的一致\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;\n```\n\n### 46. 如何手动触发一个value的KVO\n\n所谓的“手动触发”是区别于“自动触发”：\n\n自动触发是指类似这种场景：在注册 KVO 之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。\n\n想知道如何手动触发，必须知道自动触发 KVO 的原理：\n\n键值观察通知依赖于 NSObject 的两个方法:  `willChangeValueForKey:` 和 `didChangevlueForKey:` 。在一个被观察属性发生改变之前，  `willChangeValueForKey:` 一定会被调用，这就\n会记录旧的值。而当改变发生后，  `observeValueForKey:ofObject:change:context:` 会被调用，继而 `didChangeValueForKey:` 也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。\n\n那么“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n具体做法如下：\n\n\n\n如果这个  `value` 是  表示时间的 `self.now` ，那么代码如下：最后两行代码缺一不可。\n\n相关代码已放在仓库里。\n\n ```Objective-C\n//  .m文件\n//  Created by https://github.com/ChenYilong\n//  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/).\n//  手动触发 value 的KVO，最后两行代码缺一不可。\n\n//@property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    _now = [NSDate date];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n ```\n\n但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：\n\n\n > 比如调用 `setNow:` 时，系统还会以某种方式在中间插入 `wilChangeValueForKey:` 、  `didChangeValueForKey:` 和 `observeValueForKeyPath:ofObject:change:context:` 的调用。\n\n\n大家可能以为这是因为 `setNow:` 是合成方法，有时候我们也能看到有人这么写代码:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n ```\n\n这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 `willChangeValueForKey:`  ，之后总是调用 `didChangeValueForkey:` 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。下文《apple用什么方式实现对一个对象的KVO？》会有详述。\n\n参考链接： [Manual Change Notification---Apple 官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-SW3) \n\n### 47. 若一个类有实例变量 `NSString *_foo` ，调用setValue:forKey:时，可以以foo还是 `_foo` 作为key？\n都可以。\n### 48. KVC的keyPath中的集合运算符如何使用？\n\n 1. 必须用在集合对象上或普通对象的集合属性上\n 2. 简单集合运算符有@avg， @count ， @max ， @min ，@sum，\n 3. 格式 @\"@sum.age\"或 @\"集合属性.@max.age\"\n\n### 49. KVC和KVO的keyPath一定是属性么？\nKVC 支持实例变量，KVO 只能手动支持[手动设定实例变量的KVO实现监听](https://yq.aliyun.com/articles/30483)\n### 50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n\n请参考：\n\n  1. [《如何自己动手实现 KVO》](http://tech.glowing.com/cn/implement-kvo/)\n  2. [**KVO for manually implemented properties**]( http://stackoverflow.com/a/10042641/3395008 ) \n\n### 51. apple用什么方式实现对一个对象的KVO？ \n\n\n\n[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)对 KVO 实现的描述：\n\n > Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\n从[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)可以看出：Apple 并不希望过多暴露 KVO 的实现细节。不过，要是借助 runtime 提供的方法去深入挖掘，所有被掩盖的细节都会原形毕露：\n\n > 当你观察一个对象时，一个新的类会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象：值的更改。最后通过 ` isa 混写（isa-swizzling）` 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。我画了一张示意图，如下所示：\n\n![enter image description here](http://i62.tinypic.com/sy57ur.jpg)\n\n KVO 确实有点黑魔法：\n\n\n > Apple 使用了 ` isa 混写（isa-swizzling）`来实现 KVO 。\n\n\n下面做下详细解释：\n\n键值观察通知依赖于 NSObject 的两个方法:  `willChangeValueForKey:` 和 `didChangevlueForKey:` 。在一个被观察属性发生改变之前，  `willChangeValueForKey:` 一定会被调用，这就会记录旧的值。而当改变发生后， `observeValueForKey:ofObject:change:context:` 会被调用，继而  `didChangeValueForKey:` 也会被调用。可以手动实现这些调用，但很少有人这么做。一般我们只在希望能控制回调的调用时机时才会这么做。大部分情况下，改变通知会自动调用。\n\n 比如调用 `setNow:` 时，系统还会以某种方式在中间插入 `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` 的调用。大家可能以为这是因为 `setNow:` 是合成方法，有时候我们也能看到有人这么写代码:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n ```\n\n这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 `willChangeValueForKey:`  ，之后总是调用 `didChangeValueForkey:` 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。第一次对一个对象调用 `addObserver:forKeyPath:options:context:` 时，框架会创建这个类的新的 KVO 子类，并将被观察对象转换为新子类的对象。在这个 KVO 特殊子类中， Cocoa 创建观察属性的 setter ，大致工作原理如下:\n\n ```Objective-C\n- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"];\n    [super setValue:aDate forKey:@\"now\"];\n    [self didChangeValueForKey:@\"now\"];\n}\n ```\n这种继承和方法注入是在运行时而不是编译时实现的。这就是正确命名如此重要的原因。只有在使用KVC命名约定时，KVO才能做到这一点。\n\nKVO 在实现中通过 ` isa 混写（isa-swizzling）` 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。这在[Apple 的文档](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html)可以得到印证：\n\n > Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\n\n然而 KVO 在实现中使用了 ` isa 混写（ isa-swizzling）` ，这个的确不是很容易发现：Apple 还重写、覆盖了 `-class` 方法并返回原来的类。 企图欺骗我们：这个类没有变，就是原本那个类。。。\n\n但是，假设“被监听的对象”的类对象是 `MYClass` ，有时候我们能看到对 `NSKVONotifying_MYClass` 的引用而不是对  `MYClass`  的引用。借此我们得以知道 Apple 使用了 ` isa 混写（isa-swizzling）`。具体探究过程可参考[ 这篇博文 ](https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html)。\n\n\n那么 `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` 这三个方法的执行顺序是怎样的呢？\n\n `wilChangeValueForKey:` 、  `didChangeValueForKey:` 很好理解，`observeValueForKeyPath:ofObject:change:context:` 的执行时机是什么时候呢？\n\n 先看一个例子：\n\n代码已放在仓库里。\n\n ```Objective-C\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context {\n    NSLog(@\"3\");\n}\n\n ```\n\n![enter image description here](http://i66.tinypic.com/ncm7th.jpg)\n\n\n如果单单从下面这个例子的打印上， \n\n顺序似乎是 `wilChangeValueForKey:` 、 `observeValueForKeyPath:ofObject:change:context:` 、 `didChangeValueForKey:` 。\n\n其实不然，这里有一个 `observeValueForKeyPath:ofObject:change:context:`  , 和 `didChangeValueForKey:` 到底谁先调用的问题：如果 `observeValueForKeyPath:ofObject:change:context:` 是在 `didChangeValueForKey:` 内部触发的操作呢？ 那么顺序就是： `wilChangeValueForKey:` 、  `didChangeValueForKey:`  和 `observeValueForKeyPath:ofObject:change:context:` \n\n不信你把 `didChangeValueForKey:` 注视掉，看下 `observeValueForKeyPath:ofObject:change:context:` 会不会执行。\n\n了解到这一点很重要，正如  [46. 如何手动触发一个value的KVO](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo)  所说的：\n\n“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n而“回调的调用时机”就是在你调用 `didChangeValueForKey:` 方法时。\n\n### 52. IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n参考链接：[ ***Should IBOutlets be strong or weak under ARC?*** ](http://stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc)\n\n文章告诉我们：\n\n> 因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。\n\n\n不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系\n\n### 53. IB中User Defined Runtime Attributes如何使用？ \n\n它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller\n\n\n### 54. 如何调试BAD_ACCESS错误\n\n\n 1. 重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object\n 2. 通过 Zombie \n![enter image description here](http://i.stack.imgur.com/ZAdi0.png)\n\n 3. 设置全局断点快速定位问题代码所在行\n 4. Xcode 7 已经集成了BAD_ACCESS捕获功能：**Address Sanitizer**。\n用法如下：在配置中勾选✅Enable Address Sanitizer\n ![enter image description here](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Art/xc7-asan_2x.png)\n\n### 55. lldb（gdb）常用的调试命令？\n\n - breakpoint 设置断点定位到某一个函数\n - n 断点指针下一步\n - po打印对象\n\n更多 lldb（gdb） 调试命令可查看\n\n\n 1. [ ***The LLDB Debugger*** ](http://lldb.llvm.org/lldb-gdb.html)；\n 2. 苹果官方文档：[ ***iOS Debugging Magic*** ](https://developer.apple.com/library/ios/technotes/tn2239/_index.html)。\n\n\n----------\n\n\nPosted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  \n原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)\n\n\n","slug":"《招聘一个靠谱的iOS》面试题参考答案（下）","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lq000h9quzdrt1oedu","content":"<p><a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>—参考答案（下）</p>\n<p>说明：面试题来源是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a>的这篇博文：<a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>，其中共55题，除第一题为纠错题外，其他54道均为简答题。</p>\n<p>出题者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。</p>\n<p>答案为<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>整理，未经出题者校对，如有纰漏，请向<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>指正。</p>\n<hr>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#25-_objc_msgforward函数是做什么的直接调用它将会发生什么\" target=\"_blank\" rel=\"external\"> 25. <code>_objc_msgForward</code> 函数是做什么的，直接调用它将会发生什么？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#26-runtime如何实现weak变量的自动置nil\" target=\"_blank\" rel=\"external\">26. runtime如何实现weak变量的自动置nil？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#27-能否向编译后得到的类中增加实例变量能否向运行时创建的类中添加实例变量为什么\" target=\"_blank\" rel=\"external\">27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#28-runloop和线程有什么关系\" target=\"_blank\" rel=\"external\">28. runloop和线程有什么关系？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#29-runloop的mode作用是什么\" target=\"_blank\" rel=\"external\">29. runloop的mode作用是什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#30-以-scheduledtimerwithtimeinterval的方式触发的timer在滑动页面上的列表时timer会暂定回调为什么如何解决\" target=\"_blank\" rel=\"external\">30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#31-猜想runloop内部是如何实现的\" target=\"_blank\" rel=\"external\">31. 猜想runloop内部是如何实现的？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#32-objc使用什么机制管理对象内存\" target=\"_blank\" rel=\"external\">32. objc使用什么机制管理对象内存？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#33-arc通过什么方式帮助开发者管理内存\" target=\"_blank\" rel=\"external\">33. ARC通过什么方式帮助开发者管理内存？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#34-不手动指定autoreleasepool的前提下一个autorealese对象在什么时刻释放比如在一个vc的viewdidload中创建\" target=\"_blank\" rel=\"external\">34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#35-bad_access在什么情况下出现\" target=\"_blank\" rel=\"external\">35. BAD_ACCESS在什么情况下出现？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#36-苹果是如何实现autoreleasepool的\" target=\"_blank\" rel=\"external\">36. 苹果是如何实现autoreleasepool的？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#37-使用block时什么情况会发生引用循环如何解决\" target=\"_blank\" rel=\"external\">37. 使用block时什么情况会发生引用循环，如何解决？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#38-在block内如何修改block外部变量\" target=\"_blank\" rel=\"external\">38. 在block内如何修改block外部变量？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#39-使用系统的某些block-api如uiview的block版本写动画时是否也考虑引用循环问题\" target=\"_blank\" rel=\"external\">39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#40-gcd的队列dispatch_queue_t分哪两种类型\" target=\"_blank\" rel=\"external\">40. GCD的队列（dispatch_queue_t）分哪两种类型？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#41-如何用gcd同步若干个异步调用如根据若干个url异步加载多张图片然后在都下载完成后合成一张整图\" target=\"_blank\" rel=\"external\">41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#42-dispatch_barrier_async的作用是什么\" target=\"_blank\" rel=\"external\">42. dispatch_barrier_async的作用是什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#43-苹果为什么要废弃dispatch_get_current_queue\" target=\"_blank\" rel=\"external\">43. 苹果为什么要废弃dispatch_get_current_queue？</a> </li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#44-以下代码运行结果如何\" target=\"_blank\" rel=\"external\">44. 以下代码运行结果如何？</a> </p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">- (void)viewDidLoad\n{\n[super viewDidLoad];\nNSLog(@\"1\");\ndispatch_sync(dispatch_get_main_queue(), ^{\n   NSLog(@\"2\");\n});\nNSLog(@\"3\");\n}\n</code></pre>\n</li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#45-addobserverforkeypathoptionscontext各个参数的作用分别是什么observer中需要实现哪个方法才能获得kvo回调\" target=\"_blank\" rel=\"external\">45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</a> </p>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo\" target=\"_blank\" rel=\"external\">46. 如何手动触发一个value的KVO</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#47-若一个类有实例变量-nsstring-_foo-调用setvalueforkey时可以以foo还是-_foo-作为key\" target=\"_blank\" rel=\"external\">47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#48-kvc的keypath中的集合运算符如何使用\" target=\"_blank\" rel=\"external\">48. KVC的keyPath中的集合运算符如何使用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#49-kvc和kvo的keypath一定是属性么\" target=\"_blank\" rel=\"external\">49. KVC和KVO的keyPath一定是属性么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#50-如何关闭默认的kvo的默认实现并进入自定义的kvo实现\" target=\"_blank\" rel=\"external\">50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#51-apple用什么方式实现对一个对象的kvo\" target=\"_blank\" rel=\"external\">51. apple用什么方式实现对一个对象的KVO？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#52-iboutlet连出来的视图属性为什么可以被设置成weak\" target=\"_blank\" rel=\"external\">52. IBOutlet连出来的视图属性为什么可以被设置成weak?</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#53-ib中user-defined-runtime-attributes如何使用\" target=\"_blank\" rel=\"external\">53. IB中User Defined Runtime Attributes如何使用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#54-如何调试bad_access错误\" target=\"_blank\" rel=\"external\">54. 如何调试BAD_ACCESS错误</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#55-lldbgdb常用的调试命令\" target=\"_blank\" rel=\"external\">55. lldb（gdb）常用的调试命令？</a> </li>\n</ol>\n<hr>\n<h3 id=\"25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"25. _objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>25. <code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h3><blockquote>\n<p><code>_objc_msgForward</code>是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n</blockquote>\n<p>我们可以这样创建一个<code>_objc_msgForward</code>对象：</p>\n<pre><code>IMP msgForwardIMP = _objc_msgForward;\n</code></pre><p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《objc中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系？》曾提到<code>objc_msgSend</code>在“消息传递”中的作用。在“消息传递”过程中，<code>objc_msgSend</code>的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用<code>_objc_msgForward</code>函数指针代替 IMP 。最后，执行这个 IMP 。</p>\n<p>Objective-C运行时是开源的，所以我们可以看到它的实现。打开<a href=\"http://www.opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\"> <strong><em>Apple Open Source 里Mac代码里的obj包</em></strong> </a>下载一个最新版本，找到 <code>objc-runtime-new.mm</code>，进入之后搜索<code>_objc_msgForward</code>。</p>\n<p><img src=\"http://i.imgur.com/rGBfaoL.png\" alt=\"enter image description here\"></p>\n<p>里面有对<code>_objc_msgForward</code>的功能解释：</p>\n<p><img src=\"http://i.imgur.com/vcThcdA.png\" alt=\"enter image description here\"></p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">/***********************************************************************\n* lookUpImpOrForward.\n* The standard IMP lookup. \n* initialize==NO tries to avoid +initialize (but sometimes fails)\n* cache==NO skips optimistic unlocked lookup (but uses cache elsewhere)\n* Most callers should use initialize==YES and cache==YES.\n* inst is an instance of cls or a subclass thereof, or nil if none is known. \n*   If cls is an un-initialized metaclass then a non-nil inst is faster.\n* May return _objc_msgForward_impcache. IMPs destined for external use \n*   must be converted to _objc_msgForward or _objc_msgForward_stret.\n*   If you don't want forwarding at all, use lookUpImpOrNil() instead.\n**********************************************************************/\n</code></pre>\n<p>对 <code>objc-runtime-new.mm</code>文件里与<code>_objc_msgForward</code>有关的三个函数使用伪代码展示下：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">//  objc-runtime-new.mm 文件里与 _objc_msgForward 有关的三个函数使用伪代码展示\n//  Created by https://github.com/ChenYilong\n//  Copyright (c)  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/). All rights reserved.\n//  同时，这也是 obj_msgSend 的实现过程\n\nid objc_msgSend(id self, SEL op, ...) {\n    if (!self) return nil;\n    IMP imp = class_getMethodImplementation(self->isa, SEL op);\n    imp(self, op, ...); //调用这个函数，伪代码...\n}\n\n//查找IMP\nIMP class_getMethodImplementation(Class cls, SEL sel) {\n    if (!cls || !sel) return nil;\n    IMP imp = lookUpImpOrNil(cls, sel);\n    if (!imp) return _objc_msgForward; //_objc_msgForward 用于消息转发\n    return imp;\n}\n\nIMP lookUpImpOrNil(Class cls, SEL sel) {\n    if (!cls->initialize()) {\n        _class_initialize(cls);\n    }\n\n    Class curClass = cls;\n    IMP imp = nil;\n    do { //先查缓存,缓存没有时重建,仍旧没有则向父类查询\n        if (!curClass) break;\n        if (!curClass->cache) fill_cache(cls, curClass);\n        imp = cache_getImp(curClass, sel);\n        if (imp) break;\n    } while (curClass = curClass->superclass);\n\n    return imp;\n}\n</code></pre>\n<p>虽然Apple没有公开<code>_objc_msgForward</code>的实现源码，但是我们还是能得出结论：</p>\n<blockquote>\n<p><code>_objc_msgForward</code>是一个函数指针（和 IMP 的类型一样），是用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n<p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《objc中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系？》曾提到<code>objc_msgSend</code>在“消息传递”中的作用。在“消息传递”过程中，<code>objc_msgSend</code>的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用<code>_objc_msgForward</code>函数指针代替 IMP 。最后，执行这个 IMP 。</p>\n</blockquote>\n<p>为了展示消息转发的具体动作，这里尝试向一个对象发送一条错误的消息，并查看一下<code>_objc_msgForward</code>是如何进行转发的。</p>\n<p>首先开启调试模式、打印出所有运行时发送的消息：<br>可以在代码里执行下面的方法：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">(void)instrumentObjcMessageSends(YES);\n</code></pre>\n<p>或者断点暂停程序运行，并在 gdb 中输入下面的命令：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">call (void)instrumentObjcMessageSends(YES)\n</code></pre>\n<p>以第二种为例，操作如下所示：</p>\n<p><img src=\"http://i.imgur.com/uEwTCC4.png\" alt=\"enter image description here\"></p>\n<p>之后，运行时发送的所有消息都会打印到<code>/tmp/msgSend-xxxx</code>文件里了。</p>\n<p>终端中输入命令前往：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">open /private/tmp\n</code></pre>\n<p><img src=\"http://i.imgur.com/Fh5hhCw.png\" alt=\"enter image description here\"></p>\n<p>可能看到有多条，找到最新生成的，双击打开</p>\n<p>在模拟器上执行执行以下语句（这一套调试方案仅适用于模拟器，真机不可用，关于该调试方案的拓展链接：<a href=\"http://stackoverflow.com/a/10750398/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>Can the messages sent to an object in Objective-C be monitored or printed out?</em></strong> </a>），向一个对象发送一条错误的消息：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">//\n//  main.m\n//  CYLObjcMsgForwardTest\n//\n//  Created by http://weibo.com/luohanchenyilong/.\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n#import \"AppDelegate.h\"\n#import \"CYLTest.h\"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOS程序犭袁))];\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n</code></pre>\n<p><img src=\"http://i.imgur.com/UjbmVvB.png\" alt=\"enter image description here\"></p>\n<p>你可以在<code>/tmp/msgSend-xxxx</code>（我这一次是<code>/tmp/msgSend-9805</code>）文件里，看到打印出来：</p>\n<p><img src=\"http://i.imgur.com/AAERz1T.png\" alt=\"enter image description here\"></p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">+ CYLTest NSObject initialize\n+ CYLTest NSObject alloc\n- CYLTest NSObject init\n- CYLTest NSObject performSelector:\n+ CYLTest NSObject resolveInstanceMethod:\n+ CYLTest NSObject resolveInstanceMethod:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject class\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject class\n</code></pre>\n<p>结合<a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/#//apple_ref/doc/uid/20000050-SW11\" target=\"_blank\" rel=\"external\">《NSObject官方文档》</a>，排除掉 NSObject 做的事，剩下的就是<code>_objc_msgForward</code>消息转发做的几件事：</p>\n<ol>\n<li><p>调用<code>resolveInstanceMethod:</code>方法 (或 <code>resolveClassMethod:</code>)。允许用户在此时为该 Class 动态添加实现。如果有实现了，则调用并返回YES，那么重新开始<code>objc_msgSend</code>流程。这一次对象会响应这个选择器，一般是因为它已经调用过<code>class_addMethod</code>。如果仍没实现，继续下面的动作。</p>\n</li>\n<li><p>调用<code>forwardingTargetForSelector:</code>方法，尝试找到一个能响应该消息的对象。如果获取到，则直接把消息转发给它，返回非 nil 对象。否则返回 nil ，继续下面的动作。注意，这里不要返回 self ，否则会形成死循环。</p>\n</li>\n<li><p>调用<code>methodSignatureForSelector:</code>方法，尝试获得一个方法签名。如果获取不到，则直接调用<code>doesNotRecognizeSelector</code>抛出异常。如果能获取，则返回非nil：创建一个 NSlnvocation 并传给<code>forwardInvocation:</code>。</p>\n</li>\n<li><p>调用<code>forwardInvocation:</code>方法，将第3步获取到的方法签名包装成 Invocation 传入，如何处理就在这里面了，并返回非ni。</p>\n</li>\n<li><p>调用<code>doesNotRecognizeSelector:</code> ，默认的实现是抛出异常。如果第3步没能获得一个方法签名，执行该步骤。</p>\n</li>\n</ol>\n<p>上面前4个方法均是模板方法，开发者可以override，由 runtime 来调用。最常见的实现消息转发：就是重写方法3和4，吞掉一个消息或者代理给其他对象都是没问题的</p>\n<p>也就是说<code>_objc_msgForward</code>在进行消息转发的过程中会涉及以下这几个方法：</p>\n<ol>\n<li><p><code>resolveInstanceMethod:</code>方法 (或 <code>resolveClassMethod:</code>)。</p>\n</li>\n<li><p><code>forwardingTargetForSelector:</code>方法</p>\n</li>\n<li><p><code>methodSignatureForSelector:</code>方法</p>\n</li>\n<li><p><code>forwardInvocation:</code>方法</p>\n</li>\n<li><p><code>doesNotRecognizeSelector:</code> 方法</p>\n</li>\n</ol>\n<p>为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ <code>_objc_msgForward_demo</code> ”,可运行起来看看。</p>\n<p>下面回答下第二个问题“直接<code>_objc_msgForward</code>调用它将会发生什么？”</p>\n<p>直接调用<code>_objc_msgForward</code>是非常危险的事，如果用不好会直接导致程序Crash，但是如果用得好，能做很多非常酷的事。</p>\n<p>就好像跑酷，干得好，叫“耍酷”，干不好就叫“作死”。</p>\n<p>正如前文所说：</p>\n<blockquote>\n<p><code>_objc_msgForward</code>是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n</blockquote>\n<p>如何调用<code>_objc_msgForward</code>？<br><code>_objc_msgForward</code>隶属 C 语言，有三个参数 ：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>–</th>\n<th><code>_objc_msgForward</code>参数</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 1.</td>\n<td>所属对象</td>\n<td>id类型</td>\n</tr>\n<tr>\n<td> 2.</td>\n<td>方法名</td>\n<td>SEL类型 </td>\n</tr>\n<tr>\n<td> 3.</td>\n<td>可变参数</td>\n<td>可变参数类型</td>\n</tr>\n</tbody>\n</table>\n<p>首先了解下如何调用 IMP 类型的方法，IMP类型是如下格式：</p>\n<p>为了直观，我们可以通过如下方式定义一个 IMP类型 ：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">typedef void (*voidIMP)(id, SEL, ...)\n</code></pre>\n<p>一旦调用<code>_objc_msgForward</code>，将跳过查找 IMP 的过程，直接触发“消息转发”，</p>\n<p>如果调用了<code>_objc_msgForward</code>，即使这个对象确实已经实现了这个方法，你也会告诉<code>objc_msgSend</code>：</p>\n<blockquote>\n<p>“我没有在这个对象里找到这个方法的实现”</p>\n</blockquote>\n<p>想象下<code>objc_msgSend</code>会怎么做？通常情况下，下面这张图就是你正常走<code>objc_msgSend</code>过程，和直接调用<code>_objc_msgForward</code>的前后差别：</p>\n<p><img src=\"http://ww1.sinaimg.cn/bmiddle/6628711bgw1eecx3jef23g206404tkbi.gif\" alt=\"enter image description here\"></p>\n<p>有哪些场景需要直接调用<code>_objc_msgForward</code>？最常见的场景是：你想获取某方法所对应的<code>NSInvocation</code>对象。举例说明：</p>\n<p><a href=\"https://github.com/bang590/JSPatch\" target=\"_blank\" rel=\"external\">JSPatch （Github 链接）</a>就是直接调用<code>_objc_msgForward</code>来实现其核心功能的：</p>\n<blockquote>\n<p> JSPatch 以小巧的体积做到了让JS调用/替换任意OC方法，让iOS APP具备热更新的能力。</p>\n</blockquote>\n<p>作者的博文<a href=\"http://blog.cnbang.net/tech/2808/\" target=\"_blank\" rel=\"external\">《JSPatch实现原理详解》</a>详细记录了实现原理，有兴趣可以看下。</p>\n<p>同时 <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\"> <strong><em>RAC(ReactiveCocoa)</em></strong> </a> 源码中也用到了该方法。</p>\n<h3 id=\"26-runtime如何实现weak变量的自动置nil？\"><a href=\"#26-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"26. runtime如何实现weak变量的自动置nil？\"></a>26. runtime如何实现weak变量的自动置nil？</h3><blockquote>\n<p>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。</p>\n</blockquote>\n<p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《runtime 如何实现 weak 属性》有论述。（注：在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到<code>__weak</code>引用的解除时间。）</p>\n<p>我们可以设计一个函数（伪代码）来表示上述机制：</p>\n<p><code>objc_storeWeak(&amp;a, b)</code>函数：</p>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（b）的内存地址作为键值key，将第一个参数–weak修饰的属性变量（a）的内存地址（&amp;a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&amp;a）从weak表中删除，</p>\n<p>你可以把<code>objc_storeWeak(&amp;a, b)</code>理解为：<code>objc_storeWeak(value, key)</code>，并且当key变nil，将value置nil。</p>\n<p>在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。</p>\n<p>而如果a是由assign修饰的，则：<br>在b非nil时，a和b指向同一个内存地址，在b变nil时，a还是指向该内存地址，变野指针。此时向a发送消息极易崩溃。</p>\n<p>下面我们将基于<code>objc_storeWeak(&amp;a, b)</code>函数，使用伪代码模拟“runtime如何实现weak属性”：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&obj1);\n</code></pre>\n<p>下面对用到的两个方法<code>objc_initWeak</code>和<code>objc_destroyWeak</code>做下解释：</p>\n<p>总体说来，作用是：<br>通过<code>objc_initWeak</code>函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过<code>objc_destoryWeak</code>函数释放该变量（obj1）。</p>\n<p>下面分别介绍下方法的内部实现：</p>\n<p><code>objc_initWeak</code>函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">obj1 = 0；\nobj_storeWeak(&obj1, obj);\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）</p>\n</blockquote>\n<p>然后<code>obj_destroyWeak</code>函数将0（nil）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<p><code>objc_storeWeak(&amp;obj1, 0);</code></p>\n<p>前面的源代码与下列源代码相同。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&obj1, 0);\n</code></pre>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（obj）的内存地址作为键值，将第一个参数–weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从weak表中删除。</p>\n<h3 id=\"27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h3><ul>\n<li>不能向编译后得到的类中增加实例变量；</li>\n<li>能向运行时创建的类中添加实例变量；</li>\n</ul>\n<p>解释下：</p>\n<ul>\n<li><p>因为编译后的类已经注册在 runtime 中，类结构体中的 <code>objc_ivar_list</code> 实例变量的链表 和 <code>instance_size</code> 实例变量的内存大小已经确定，同时runtime 会调用 <code>class_setIvarLayout</code> 或 <code>class_setWeakIvarLayout</code> 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；</p>\n</li>\n<li><p>运行时创建的类是可以添加实例变量，调用 <code>class_addIvar</code> 函数。但是得在调用 <code>objc_allocateClassPair</code> 之后，<code>objc_registerClassPair</code> 之前，原因同上。</p>\n</li>\n</ul>\n<h3 id=\"28-runloop和线程有什么关系？\"><a href=\"#28-runloop和线程有什么关系？\" class=\"headerlink\" title=\"28. runloop和线程有什么关系？\"></a>28. runloop和线程有什么关系？</h3><p>总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。</p>\n<p> runloop 和线程的关系：</p>\n<ol>\n<li><p>主线程的run loop默认是启动的。</p>\n<p>iOS的应用程序里面，程序启动后会有一个如下的main()函数</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">int main(int argc, char * argv[]) {\n@autoreleasepool {\n    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n}\n}\n</code></pre>\n</li>\n</ol>\n<p> 重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。</p>\n<ol>\n<li><p>对其它线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程只是去执行一个长时间的已确定的任务则不需要。</p>\n</li>\n<li><p>在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。</p>\n</li>\n</ol>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">NSRunLoop *runloop = [NSRunLoop currentRunLoop];\n</code></pre>\n<p>参考链接：<a href=\"http://blog.csdn.net/wzzvictory/article/details/9237973\" target=\"_blank\" rel=\"external\">《Objective-C之run loop详解》</a>。</p>\n<h3 id=\"29-runloop的mode作用是什么？\"><a href=\"#29-runloop的mode作用是什么？\" class=\"headerlink\" title=\"29. runloop的mode作用是什么？\"></a>29. runloop的mode作用是什么？</h3><p>model 主要是用来指定事件在运行循环中的优先级的，分为：</p>\n<ul>\n<li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态</li>\n<li>UITrackingRunLoopMode：ScrollView滑动时</li>\n<li>UIInitializationRunLoopMode：启动时</li>\n<li>NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合</li>\n</ul>\n<p>苹果公开提供的 Mode 有两个：</p>\n<ol>\n<li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）</li>\n<li>NSRunLoopCommonModes（kCFRunLoopCommonModes）</li>\n</ol>\n<h3 id=\"30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h3><p>RunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，ScrollView滚动过程中NSDefaultRunLoopMode（kCFRunLoopDefaultMode）的mode会切换到UITrackingRunLoopMode来保证ScrollView的流畅滑动：只能在NSDefaultRunLoopMode模式下处理的事件会影响ScrollView的滑动。</p>\n<p>如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候,<br>ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。</p>\n<p>同时因为mode还是可定制的，所以：</p>\n<p> Timer计时会被scrollView的滑动影响的问题可以通过将timer添加到NSRunLoopCommonModes（kCFRunLoopCommonModes）来解决。代码如下：</p>\n<pre class=\" language-objective-c\"><code class=\"language-objective-c\">// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n\n//将timer添加到NSDefaultRunLoopMode中\n[NSTimer scheduledTimerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n//然后再添加到NSRunLoopCommonModes里\nNSTimer *timer = [NSTimer timerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n</code></pre>\n<h3 id=\"31-猜想runloop内部是如何实现的？\"><a href=\"#31-猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"31. 猜想runloop内部是如何实现的？\"></a>31. 猜想runloop内部是如何实现的？</h3><blockquote>\n<p>一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑<br>是这样的：</p>\n</blockquote>\n<pre><code>function loop() {\n    initialize();\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n</code></pre><p>或使用伪代码来展示下:</p>\n<pre><code>// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\nint main(int argc, char * argv[]) {\n //程序一直运行状态\n while (AppIsRunning) {\n      //睡眠状态，等待唤醒事件\n      id whoWakesMe = SleepForWakingUp();\n      //得到唤醒事件\n      id event = GetEvent(whoWakesMe);\n      //开始处理事件\n      HandleEvent(event);\n }\n return 0;\n}\n</code></pre><p>参考链接：</p>\n<ol>\n<li><a href=\"http://blog.ibireme.com/2015/05/18/runloop/#base\" target=\"_blank\" rel=\"external\">《深入理解RunLoop》</a></li>\n<li>摘自博文<a href=\"https://github.com/ming1016/study/wiki/CFRunLoop\" target=\"_blank\" rel=\"external\"><strong><em>CFRunLoop</em></strong></a>，原作者是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a></li>\n</ol>\n<h3 id=\"32-objc使用什么机制管理对象内存？\"><a href=\"#32-objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"32. objc使用什么机制管理对象内存？\"></a>32. objc使用什么机制管理对象内存？</h3><p>通过 retainCount 的机制来决定对象是否需要释放。<br>每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n<h3 id=\"33-ARC通过什么方式帮助开发者管理内存？\"><a href=\"#33-ARC通过什么方式帮助开发者管理内存？\" class=\"headerlink\" title=\"33. ARC通过什么方式帮助开发者管理内存？\"></a>33. ARC通过什么方式帮助开发者管理内存？</h3><p> </p><p><del>编译时根据代码上下文，插入 retain/release<br></del></p><br>ARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。<p></p>\n<p>在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。【TODO:后续更新会详细描述下】</p>\n<h3 id=\"34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"><a href=\"#34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\" class=\"headerlink\" title=\"34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"></a>34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</h3><p>分两种情况：手动干预释放时机、系统自动去释放。</p>\n<ol>\n<li>手动干预释放时机–指定autoreleasepool<br>就是所谓的：当前作用域大括号结束时释放。</li>\n<li><p>系统自动去释放–不手动指定autoreleasepool</p>\n<p>Autorelease对象出了作用域之后，会被添加到最近一次创建的自动释放池中，并会在当前的 runloop 迭代结束时释放。</p>\n</li>\n</ol>\n<p>释放的时机总结起来，可以用下图来表示：</p>\n<p><img src=\"http://i61.tinypic.com/28kodwp.jpg\" alt=\"autoreleasepool与 runloop 的关系图\"></p>\n<p>下面对这张图进行详细的解释：</p>\n<p>从程序启动到加载完成是一个完整的运行循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。</p>\n<p>我们都知道：<br><strong>所有 autorelease 的对象，在出了作用域之后，会被自动添加到最近创建的自动释放池中。</strong></p>\n<p>但是如果每次都放进应用程序的 <code>main.m</code> 中的 autoreleasepool 中，迟早有被撑满的一刻。这个过程中必定有一个释放的动作。何时？</p>\n<p>在一次完整的运行循环结束之前，会被销毁。</p>\n<p>那什么时间会创建自动释放池？运行循环检测到事件并启动后，就会创建自动释放池。 </p>\n<p>子线程的 runloop 默认是不工作，无法主动创建，必须手动创建。</p>\n<p>自定义的 NSOperation 和 NSThread 需要手动创建自动释放池。比如： 自定义的 NSOperation 类中的 main 方法里就必须添加自动释放池。否则出了作用域后，自动释放对象会因为没有自动释放池去处理它，而造成内存泄露。</p>\n<p>但对于 blockOperation 和 invocationOperation 这种默认的Operation ，系统已经帮我们封装好了，不需要手动创建自动释放池。</p>\n<p>@autoreleasepool 当自动释放池被销毁或者耗尽时，会向自动释放池中的所有对象发送 release 消息，释放自动释放池中的所有对象。</p>\n<p> 如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。</p>\n<p>参考链接：<a href=\"http://blog.sunnyxx.com/2014/10/15/behind-autorelease/\" target=\"_blank\" rel=\"external\">《黑幕背后的Autorelease》</a></p>\n<h3 id=\"35-BAD-ACCESS在什么情况下出现？\"><a href=\"#35-BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"35. BAD_ACCESS在什么情况下出现？\"></a>35. BAD_ACCESS在什么情况下出现？</h3><p>访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。<br>死循环</p>\n<h3 id=\"36-苹果是如何实现autoreleasepool的？\"><a href=\"#36-苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"36. 苹果是如何实现autoreleasepool的？\"></a>36. 苹果是如何实现autoreleasepool的？</h3><p>autoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.</p>\n<ol>\n<li><code>objc_autoreleasepoolPush</code></li>\n<li><code>objc_autoreleasepoolPop</code></li>\n<li><code>objc_autorelease</code></li>\n</ol>\n<p>看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。</p>\n<p>举例说明：我们都知道用类方法创建的对象都是 Autorelease 的，那么一旦 Person 出了作用域，当在 Person 的 dealloc 方法中打上断点，我们就可以看到这样的调用堆栈信息：</p>\n<p> <img src=\"http://i60.tinypic.com/15mfj11.jpg\" alt=\"enter image description here\"></p>\n<h3 id=\"37-使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#37-使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"37. 使用block时什么情况会发生引用循环，如何解决？\"></a>37. 使用block时什么情况会发生引用循环，如何解决？</h3><p>一个对象中强引用了block，在block中又强引用了该对象，就会发射循环引用。</p>\n<p>解决方法是将该对象使用<strong>weak或者</strong>block修饰符修饰之后再在block中使用。</p>\n<ol>\n<li>id weak weakSelf = self;<br>或者 weak __typeof(&amp;*self)weakSelf = self该方法可以设置宏</li>\n<li>id __block weakSelf = self;</li>\n</ol>\n<p>或者将其中一方强制制空 <code>xxx = nil</code>。</p>\n<p>检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  <a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"external\"><strong><em>FBRetainCycleDetector</em></strong></a> 。</p>\n<h3 id=\"38-在block内如何修改block外部变量？\"><a href=\"#38-在block内如何修改block外部变量？\" class=\"headerlink\" title=\"38. 在block内如何修改block外部变量？\"></a>38. 在block内如何修改block外部变量？</h3><p>默认情况下，在block中访问的外部变量是复制过去的，即：<strong>写操作不对原变量生效</strong>。但是你可以加上 <code>__block</code> 来让其写操作生效，示例代码如下:</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">    __block int a = 0;\n    void (^foo)(void) = ^{ \n        a = 1; \n    };\n    foo(); \n    //这里，a的值被修改为1\n</code></pre>\n<p>这是 <a href=\"http://weibo.com/tangqiaoboy\" target=\"_blank\" rel=\"external\">微博@唐巧_boy</a>的《iOS开发进阶》中的第11.2.3章节中的描述。你同样可以在面试中这样回答，但你并没有答到“点子上”。真正的原因，并没有书这本书里写的这么“神奇”，而且这种说法也有点牵强。面试官肯定会追问“为什么写操作就生效了？”真正的原因是这样的：</p>\n<blockquote>\n<p>我们都知道：<strong>Block不允许修改外部变量的值</strong>，这里所说的外部变量的值，指的是栈中指针的内存地址。<code>__block</code> 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。</p>\n</blockquote>\n<p><strong>Block不允许修改外部变量的值</strong>。Apple这样设计，应该是考虑到了block的特殊性，block也属于“函数”的范畴，变量进入block，实际就是已经改变了作用域。在几个作用域之间进行切换时，如果不加上这样的限制，变量的可维护性将大大降低。又比如我想在block内声明了一个与外部同名的变量，此时是允许呢还是不允许呢？只有加上了这样的限制，这样的情景才能实现。于是栈区变成了红灯区，堆区变成了绿灯区。</p>\n<p>我们可以打印下内存地址来进行验证：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">    __block int a = 0;\n    NSLog(@\"定义前：%p\", &a);         //栈区\n    void (^foo)(void) = ^{\n        a = 1;\n        NSLog(@\"block内部：%p\", &a);    //堆区\n    };\n    NSLog(@\"定义后：%p\", &a);         //堆区\n    foo();\n</code></pre>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义前：0x16fda86f8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义后：0x155b22fc8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] block内部： 0x155b22fc8\n</code></pre>\n<p>“定义后”和“block内部”两者的内存地址是一样的，我们都知道 block 内部的变量会被 copy 到堆区，“block内部”打印的是堆地址，因而也就可以知道，“定义后”打印的也是堆的地址。</p>\n<p> 那么如何证明“block内部”打印的是堆地址？</p>\n<p> 把三个16进制的内存地址转成10进制就是：</p>\n<ol>\n<li>定义后前：6171559672</li>\n<li>block内部：5732708296</li>\n<li>定义后后：5732708296</li>\n</ol>\n<p>中间相差438851376个字节，也就是 418.5M 的空间，因为堆地址要小于栈地址，又因为iOS中一个进程的栈区内存只有1M，Mac也只有8M，显然a已经是在堆区了。</p>\n<p>这也证实了：a 在定义前是栈区，但只要进入了 block 区域，就变成了堆区。这才是 <code>__block</code> 关键字的真正作用。</p>\n<p> <code>__block</code> 关键字修饰后，int类型也从4字节变成了32字节，这是 Foundation 框架 malloc 出来的。这也同样能证实上面的结论。（PS：居然比 NSObject alloc 出来的 16  字节要多一倍）。</p>\n<p>理解到这是因为堆栈地址的变更，而非所谓的“写操作生效”，这一点至关重要，要不然你如何解释下面这个现象：</p>\n<p>以下代码编译可以通过，并且在block中成功将a的从Tom修改为Jerry。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">    NSMutableString *a = [NSMutableString stringWithString:@\"Tom\"];\n    NSLog(@\"\\n 定以前：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n    void (^foo)(void) = ^{\n        a.string = @\"Jerry\";\n        NSLog(@\"\\n block内部：------------------------------------\\n\\\n         a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n        a = [NSMutableString stringWithString:@\"William\"];\n    };\n    foo();\n    NSLog(@\"\\n 定以后：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p\", a, &a);               //a在栈区\n</code></pre>\n<p><img src=\"http://i66.tinypic.com/34euhcy.jpg\" alt=\"enter image description here\"></p>\n<p> 这里的a已经由基本数据类型，变成了对象类型。block会对对象类型的指针进行copy，copy到堆中，但并不会改变该指针所指向的堆中的地址，所以在上面的示例代码中，block体内修改的实际是a指向的堆中的内容。</p>\n<p> 但如果我们尝试像上面图片中的65行那样做，结果会编译不通过，那是因为此时你在修改的就不是堆中的内容，而是栈中的内容。</p>\n<p>上文已经说过：<strong>Block不允许修改外部变量的值</strong>，这里所说的外部变量的值，指的是栈中指针的内存地址。栈区是红灯区，堆区才是绿灯区。</p>\n<h3 id=\"39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h3><p>系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：</p>\n<p>所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }];\n</code></pre>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">[[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }];\n</code></pre>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" \n                                                  object:nil \n                           queue:[NSOperationQueue mainQueue]\n                                              usingBlock:^(NSNotification * notification) {\n                                                    self.someProperty = xyz; }];\n</code></pre>\n<p>这些情况不需要考虑“引用循环”。</p>\n<p>但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^\n{\n__typeof__(self) strongSelf = weakSelf;\n[strongSelf doSomething];\n[strongSelf doSomethingElse];\n} );\n</code></pre>\n<p>类似的：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">  __weak __typeof__(self) weakSelf = self;\n  _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@\"testKey\"\n                                                                object:nil\n                                                                 queue:nil\n                                                            usingBlock:^(NSNotification *note) {\n      __typeof__(self) strongSelf = weakSelf;\n      [strongSelf dismissModalViewControllerAnimated:YES];\n  }];\n</code></pre>\n<p>self –&gt; _observer –&gt; block –&gt; self 显然这也是一个循环引用。</p>\n<p>检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  <a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"external\"><strong><em>FBRetainCycleDetector</em></strong></a> 。</p>\n<h3 id=\"40-GCD的队列（dispatch-queue-t）分哪两种类型？\"><a href=\"#40-GCD的队列（dispatch-queue-t）分哪两种类型？\" class=\"headerlink\" title=\"40. GCD的队列（dispatch_queue_t）分哪两种类型？\"></a>40. GCD的队列（<code>dispatch_queue_t</code>）分哪两种类型？</h3><ol>\n<li>串行队列Serial Dispatch Queue</li>\n<li>并行队列Concurrent Dispatch Queue</li>\n</ol>\n<h3 id=\"41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h3><p>使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, queue, ^{ /*加载图片1 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片2 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片3 */ }); \ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 合并图片\n});\n</code></pre>\n<h3 id=\"42-dispatch-barrier-async的作用是什么？\"><a href=\"#42-dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"42. dispatch_barrier_async的作用是什么？\"></a>42. <code>dispatch_barrier_async</code>的作用是什么？</h3><p> 在并行队列中，为了保持某些任务的顺序，需要等待一些任务完成后才能继续进行，使用 barrier 来等待之前任务完成，避免数据竞争等问题。<br> <code>dispatch_barrier_async</code> 函数会等待追加到Concurrent Dispatch Queue并行队列中的操作全部执行完之后，然后再执行 <code>dispatch_barrier_async</code> 函数追加的处理，等 <code>dispatch_barrier_async</code> 追加的处理执行结束之后，Concurrent Dispatch Queue才恢复之前的动作继续执行。</p>\n<p>打个比方：比如你们公司周末跟团旅游，高速休息站上，司机说：大家都去上厕所，速战速决，上完厕所就上高速。超大的公共厕所，大家同时去，程序猿很快就结束了，但程序媛就可能会慢一些，即使你第一个回来，司机也不会出发，司机要等待所有人都回来后，才能出发。 <code>dispatch_barrier_async</code> 函数追加的内容就如同 “上完厕所就上高速”这个动作。</p>\n<p>（注意：使用 <code>dispatch_barrier_async</code> ，该函数只能搭配自定义并行队列 <code>dispatch_queue_t</code> 使用。不能使用： <code>dispatch_get_global_queue</code> ，否则 <code>dispatch_barrier_async</code> 的作用会和 <code>dispatch_async</code> 的作用一模一样。 ）</p>\n<h3 id=\"43-苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#43-苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"43. 苹果为什么要废弃dispatch_get_current_queue？\"></a>43. 苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h3><p><code>dispatch_get_current_queue</code>容易造成死锁</p>\n<h3 id=\"44-以下代码运行结果如何？\"><a href=\"#44-以下代码运行结果如何？\" class=\"headerlink\" title=\"44. 以下代码运行结果如何？\"></a>44. 以下代码运行结果如何？</h3><pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@&quot;1&quot;);\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@&quot;2&quot;);\n    });\n    NSLog(@&quot;3&quot;);\n}\n</code></pre><p>只输出：1 。发生主线程锁死。</p>\n<h3 id=\"45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h3><pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">// 添加键值观察\n/*\n1 观察者，负责处理监听事件的对象\n2 观察的属性\n3 观察的选项\n4 上下文\n*/\n[self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];\n</code></pre>\n<p>observer中需要实现一下方法：</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">// 所有的 kvo 监听到事件，都会调用此方法\n/*\n 1. 观察的属性\n 2. 观察的对象\n 3. change 属性变化字典（新／旧）\n 4. 上下文，与监听的时候传递的一致\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;\n</code></pre>\n<h3 id=\"46-如何手动触发一个value的KVO\"><a href=\"#46-如何手动触发一个value的KVO\" class=\"headerlink\" title=\"46. 如何手动触发一个value的KVO\"></a>46. 如何手动触发一个value的KVO</h3><p>所谓的“手动触发”是区别于“自动触发”：</p>\n<p>自动触发是指类似这种场景：在注册 KVO 之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。</p>\n<p>想知道如何手动触发，必须知道自动触发 KVO 的原理：</p>\n<p>键值观察通知依赖于 NSObject 的两个方法:  <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 。在一个被观察属性发生改变之前，  <code>willChangeValueForKey:</code> 一定会被调用，这就<br>会记录旧的值。而当改变发生后，  <code>observeValueForKey:ofObject:change:context:</code> 会被调用，继而 <code>didChangeValueForKey:</code> 也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。</p>\n<p>那么“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>具体做法如下：</p>\n<p>如果这个  <code>value</code> 是  表示时间的 <code>self.now</code> ，那么代码如下：最后两行代码缺一不可。</p>\n<p>相关代码已放在仓库里。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">//  .m文件\n//  Created by https://github.com/ChenYilong\n//  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/).\n//  手动触发 value 的KVO，最后两行代码缺一不可。\n\n//@property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    _now = [NSDate date];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n</code></pre>\n<p>但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：</p>\n<blockquote>\n<p>比如调用 <code>setNow:</code> 时，系统还会以某种方式在中间插入 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code> 和 <code>observeValueForKeyPath:ofObject:change:context:</code> 的调用。</p>\n</blockquote>\n<p>大家可能以为这是因为 <code>setNow:</code> 是合成方法，有时候我们也能看到有人这么写代码:</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n</code></pre>\n<p>这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 <code>willChangeValueForKey:</code>  ，之后总是调用 <code>didChangeValueForkey:</code> 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。下文《apple用什么方式实现对一个对象的KVO？》会有详述。</p>\n<p>参考链接： <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-SW3\" target=\"_blank\" rel=\"external\">Manual Change Notification—Apple 官方文档</a> </p>\n<h3 id=\"47-若一个类有实例变量-NSString-foo-，调用setValue-forKey-时，可以以foo还是-foo-作为key？\"><a href=\"#47-若一个类有实例变量-NSString-foo-，调用setValue-forKey-时，可以以foo还是-foo-作为key？\" class=\"headerlink\" title=\"47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？\"></a>47. 若一个类有实例变量 <code>NSString *_foo</code> ，调用setValue:forKey:时，可以以foo还是 <code>_foo</code> 作为key？</h3><p>都可以。</p>\n<h3 id=\"48-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#48-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"48. KVC的keyPath中的集合运算符如何使用？\"></a>48. KVC的keyPath中的集合运算符如何使用？</h3><ol>\n<li>必须用在集合对象上或普通对象的集合属性上</li>\n<li>简单集合运算符有@avg， @count ， @max ， @min ，@sum，</li>\n<li>格式 @”@sum.age”或 @”集合属性.@max.age”</li>\n</ol>\n<h3 id=\"49-KVC和KVO的keyPath一定是属性么？\"><a href=\"#49-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"49. KVC和KVO的keyPath一定是属性么？\"></a>49. KVC和KVO的keyPath一定是属性么？</h3><p>KVC 支持实例变量，KVO 只能手动支持<a href=\"https://yq.aliyun.com/articles/30483\" target=\"_blank\" rel=\"external\">手动设定实例变量的KVO实现监听</a></p>\n<h3 id=\"50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h3><p>请参考：</p>\n<ol>\n<li><a href=\"http://tech.glowing.com/cn/implement-kvo/\" target=\"_blank\" rel=\"external\">《如何自己动手实现 KVO》</a></li>\n<li><a href=\"http://stackoverflow.com/a/10042641/3395008\" target=\"_blank\" rel=\"external\"><strong>KVO for manually implemented properties</strong></a> </li>\n</ol>\n<h3 id=\"51-apple用什么方式实现对一个对象的KVO？\"><a href=\"#51-apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"51. apple用什么方式实现对一个对象的KVO？\"></a>51. apple用什么方式实现对一个对象的KVO？</h3><p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>对 KVO 实现的描述：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …</p>\n</blockquote>\n<p>从<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>可以看出：Apple 并不希望过多暴露 KVO 的实现细节。不过，要是借助 runtime 提供的方法去深入挖掘，所有被掩盖的细节都会原形毕露：</p>\n<blockquote>\n<p>当你观察一个对象时，一个新的类会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象：值的更改。最后通过 <code>isa 混写（isa-swizzling）</code> 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。我画了一张示意图，如下所示：</p>\n</blockquote>\n<p><img src=\"http://i62.tinypic.com/sy57ur.jpg\" alt=\"enter image description here\"></p>\n<p> KVO 确实有点黑魔法：</p>\n<blockquote>\n<p>Apple 使用了 <code>isa 混写（isa-swizzling）</code>来实现 KVO 。</p>\n</blockquote>\n<p>下面做下详细解释：</p>\n<p>键值观察通知依赖于 NSObject 的两个方法:  <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 。在一个被观察属性发生改变之前，  <code>willChangeValueForKey:</code> 一定会被调用，这就会记录旧的值。而当改变发生后， <code>observeValueForKey:ofObject:change:context:</code> 会被调用，继而  <code>didChangeValueForKey:</code> 也会被调用。可以手动实现这些调用，但很少有人这么做。一般我们只在希望能控制回调的调用时机时才会这么做。大部分情况下，改变通知会自动调用。</p>\n<p> 比如调用 <code>setNow:</code> 时，系统还会以某种方式在中间插入 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> 的调用。大家可能以为这是因为 <code>setNow:</code> 是合成方法，有时候我们也能看到有人这么写代码:</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n</code></pre>\n<p>这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 <code>willChangeValueForKey:</code>  ，之后总是调用 <code>didChangeValueForkey:</code> 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。第一次对一个对象调用 <code>addObserver:forKeyPath:options:context:</code> 时，框架会创建这个类的新的 KVO 子类，并将被观察对象转换为新子类的对象。在这个 KVO 特殊子类中， Cocoa 创建观察属性的 setter ，大致工作原理如下:</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@\"now\"];\n    [super setValue:aDate forKey:@\"now\"];\n    [self didChangeValueForKey:@\"now\"];\n}\n</code></pre>\n<p>这种继承和方法注入是在运行时而不是编译时实现的。这就是正确命名如此重要的原因。只有在使用KVC命名约定时，KVO才能做到这一点。</p>\n<p>KVO 在实现中通过 <code>isa 混写（isa-swizzling）</code> 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。这在<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>可以得到印证：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …</p>\n</blockquote>\n<p>然而 KVO 在实现中使用了 <code>isa 混写（ isa-swizzling）</code> ，这个的确不是很容易发现：Apple 还重写、覆盖了 <code>-class</code> 方法并返回原来的类。 企图欺骗我们：这个类没有变，就是原本那个类。。。</p>\n<p>但是，假设“被监听的对象”的类对象是 <code>MYClass</code> ，有时候我们能看到对 <code>NSKVONotifying_MYClass</code> 的引用而不是对  <code>MYClass</code>  的引用。借此我们得以知道 Apple 使用了 <code>isa 混写（isa-swizzling）</code>。具体探究过程可参考<a href=\"https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html\" target=\"_blank\" rel=\"external\"> 这篇博文 </a>。</p>\n<p>那么 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> 这三个方法的执行顺序是怎样的呢？</p>\n<p> <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code> 很好理解，<code>observeValueForKeyPath:ofObject:change:context:</code> 的执行时机是什么时候呢？</p>\n<p> 先看一个例子：</p>\n<p>代码已放在仓库里。</p>\n<pre class=\" language-Objective-C\"><code class=\"language-Objective-C\">- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@\"1\");\n    [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"2\");\n    [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n    NSLog(@\"4\");\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context {\n    NSLog(@\"3\");\n}\n</code></pre>\n<p><img src=\"http://i66.tinypic.com/ncm7th.jpg\" alt=\"enter image description here\"></p>\n<p>如果单单从下面这个例子的打印上， </p>\n<p>顺序似乎是 <code>wilChangeValueForKey:</code> 、 <code>observeValueForKeyPath:ofObject:change:context:</code> 、 <code>didChangeValueForKey:</code> 。</p>\n<p>其实不然，这里有一个 <code>observeValueForKeyPath:ofObject:change:context:</code>  , 和 <code>didChangeValueForKey:</code> 到底谁先调用的问题：如果 <code>observeValueForKeyPath:ofObject:change:context:</code> 是在 <code>didChangeValueForKey:</code> 内部触发的操作呢？ 那么顺序就是： <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> </p>\n<p>不信你把 <code>didChangeValueForKey:</code> 注视掉，看下 <code>observeValueForKeyPath:ofObject:change:context:</code> 会不会执行。</p>\n<p>了解到这一点很重要，正如  <a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo\" target=\"_blank\" rel=\"external\">46. 如何手动触发一个value的KVO</a>  所说的：</p>\n<p>“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>而“回调的调用时机”就是在你调用 <code>didChangeValueForKey:</code> 方法时。</p>\n<h3 id=\"52-IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#52-IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"52. IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>52. IBOutlet连出来的视图属性为什么可以被设置成weak?</h3><p>参考链接：<a href=\"http://stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc\" target=\"_blank\" rel=\"external\"> <strong><em>Should IBOutlets be strong or weak under ARC?</em></strong> </a></p>\n<p>文章告诉我们：</p>\n<blockquote>\n<p>因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。</p>\n</blockquote>\n<p>不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系</p>\n<h3 id=\"53-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#53-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"53. IB中User Defined Runtime Attributes如何使用？\"></a>53. IB中User Defined Runtime Attributes如何使用？</h3><p>它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller</p>\n<h3 id=\"54-如何调试BAD-ACCESS错误\"><a href=\"#54-如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"54. 如何调试BAD_ACCESS错误\"></a>54. 如何调试BAD_ACCESS错误</h3><ol>\n<li>重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object</li>\n<li><p>通过 Zombie<br><img src=\"http://i.stack.imgur.com/ZAdi0.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>设置全局断点快速定位问题代码所在行</p>\n</li>\n<li>Xcode 7 已经集成了BAD_ACCESS捕获功能：<strong>Address Sanitizer</strong>。<br>用法如下：在配置中勾选✅Enable Address Sanitizer<br><img src=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Art/xc7-asan_2x.png\" alt=\"enter image description here\"></li>\n</ol>\n<h3 id=\"55-lldb（gdb）常用的调试命令？\"><a href=\"#55-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"55. lldb（gdb）常用的调试命令？\"></a>55. lldb（gdb）常用的调试命令？</h3><ul>\n<li>breakpoint 设置断点定位到某一个函数</li>\n<li>n 断点指针下一步</li>\n<li>po打印对象</li>\n</ul>\n<p>更多 lldb（gdb） 调试命令可查看</p>\n<ol>\n<li><a href=\"http://lldb.llvm.org/lldb-gdb.html\" target=\"_blank\" rel=\"external\"> <strong><em>The LLDB Debugger</em></strong> </a>；</li>\n<li>苹果官方文档：<a href=\"https://developer.apple.com/library/ios/technotes/tn2239/_index.html\" target=\"_blank\" rel=\"external\"> <strong><em>iOS Debugging Magic</em></strong> </a>。</li>\n</ol>\n<hr>\n<p>Posted by <a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\" rel=\"external\">Creative Commons BY-NC-ND 3.0</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>—参考答案（下）</p>\n<p>说明：面试题来源是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a>的这篇博文：<a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>，其中共55题，除第一题为纠错题外，其他54道均为简答题。</p>\n<p>出题者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。</p>\n<p>答案为<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>整理，未经出题者校对，如有纰漏，请向<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>指正。</p>\n<hr>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#25-_objc_msgforward函数是做什么的直接调用它将会发生什么\" target=\"_blank\" rel=\"external\"> 25. <code>_objc_msgForward</code> 函数是做什么的，直接调用它将会发生什么？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#26-runtime如何实现weak变量的自动置nil\" target=\"_blank\" rel=\"external\">26. runtime如何实现weak变量的自动置nil？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#27-能否向编译后得到的类中增加实例变量能否向运行时创建的类中添加实例变量为什么\" target=\"_blank\" rel=\"external\">27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#28-runloop和线程有什么关系\" target=\"_blank\" rel=\"external\">28. runloop和线程有什么关系？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#29-runloop的mode作用是什么\" target=\"_blank\" rel=\"external\">29. runloop的mode作用是什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#30-以-scheduledtimerwithtimeinterval的方式触发的timer在滑动页面上的列表时timer会暂定回调为什么如何解决\" target=\"_blank\" rel=\"external\">30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#31-猜想runloop内部是如何实现的\" target=\"_blank\" rel=\"external\">31. 猜想runloop内部是如何实现的？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#32-objc使用什么机制管理对象内存\" target=\"_blank\" rel=\"external\">32. objc使用什么机制管理对象内存？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#33-arc通过什么方式帮助开发者管理内存\" target=\"_blank\" rel=\"external\">33. ARC通过什么方式帮助开发者管理内存？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#34-不手动指定autoreleasepool的前提下一个autorealese对象在什么时刻释放比如在一个vc的viewdidload中创建\" target=\"_blank\" rel=\"external\">34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#35-bad_access在什么情况下出现\" target=\"_blank\" rel=\"external\">35. BAD_ACCESS在什么情况下出现？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#36-苹果是如何实现autoreleasepool的\" target=\"_blank\" rel=\"external\">36. 苹果是如何实现autoreleasepool的？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#37-使用block时什么情况会发生引用循环如何解决\" target=\"_blank\" rel=\"external\">37. 使用block时什么情况会发生引用循环，如何解决？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#38-在block内如何修改block外部变量\" target=\"_blank\" rel=\"external\">38. 在block内如何修改block外部变量？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#39-使用系统的某些block-api如uiview的block版本写动画时是否也考虑引用循环问题\" target=\"_blank\" rel=\"external\">39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#40-gcd的队列dispatch_queue_t分哪两种类型\" target=\"_blank\" rel=\"external\">40. GCD的队列（dispatch_queue_t）分哪两种类型？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#41-如何用gcd同步若干个异步调用如根据若干个url异步加载多张图片然后在都下载完成后合成一张整图\" target=\"_blank\" rel=\"external\">41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#42-dispatch_barrier_async的作用是什么\" target=\"_blank\" rel=\"external\">42. dispatch_barrier_async的作用是什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#43-苹果为什么要废弃dispatch_get_current_queue\" target=\"_blank\" rel=\"external\">43. 苹果为什么要废弃dispatch_get_current_queue？</a> </li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#44-以下代码运行结果如何\" target=\"_blank\" rel=\"external\">44. 以下代码运行结果如何？</a> </p>\n<pre><code class=\"Objective-C\">- (void)viewDidLoad\n{\n[super viewDidLoad];\nNSLog(@&quot;1&quot;);\ndispatch_sync(dispatch_get_main_queue(), ^{\n   NSLog(@&quot;2&quot;);\n});\nNSLog(@&quot;3&quot;);\n}\n</code></pre>\n</li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#45-addobserverforkeypathoptionscontext各个参数的作用分别是什么observer中需要实现哪个方法才能获得kvo回调\" target=\"_blank\" rel=\"external\">45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</a> </p>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo\" target=\"_blank\" rel=\"external\">46. 如何手动触发一个value的KVO</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#47-若一个类有实例变量-nsstring-_foo-调用setvalueforkey时可以以foo还是-_foo-作为key\" target=\"_blank\" rel=\"external\">47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#48-kvc的keypath中的集合运算符如何使用\" target=\"_blank\" rel=\"external\">48. KVC的keyPath中的集合运算符如何使用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#49-kvc和kvo的keypath一定是属性么\" target=\"_blank\" rel=\"external\">49. KVC和KVO的keyPath一定是属性么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#50-如何关闭默认的kvo的默认实现并进入自定义的kvo实现\" target=\"_blank\" rel=\"external\">50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#51-apple用什么方式实现对一个对象的kvo\" target=\"_blank\" rel=\"external\">51. apple用什么方式实现对一个对象的KVO？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#52-iboutlet连出来的视图属性为什么可以被设置成weak\" target=\"_blank\" rel=\"external\">52. IBOutlet连出来的视图属性为什么可以被设置成weak?</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#53-ib中user-defined-runtime-attributes如何使用\" target=\"_blank\" rel=\"external\">53. IB中User Defined Runtime Attributes如何使用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#54-如何调试bad_access错误\" target=\"_blank\" rel=\"external\">54. 如何调试BAD_ACCESS错误</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#55-lldbgdb常用的调试命令\" target=\"_blank\" rel=\"external\">55. lldb（gdb）常用的调试命令？</a> </li>\n</ol>\n<hr>\n<h3 id=\"25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"25. _objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>25. <code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h3><blockquote>\n<p><code>_objc_msgForward</code>是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n</blockquote>\n<p>我们可以这样创建一个<code>_objc_msgForward</code>对象：</p>\n<pre><code>IMP msgForwardIMP = _objc_msgForward;\n</code></pre><p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《objc中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系？》曾提到<code>objc_msgSend</code>在“消息传递”中的作用。在“消息传递”过程中，<code>objc_msgSend</code>的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用<code>_objc_msgForward</code>函数指针代替 IMP 。最后，执行这个 IMP 。</p>\n<p>Objective-C运行时是开源的，所以我们可以看到它的实现。打开<a href=\"http://www.opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\"> <strong><em>Apple Open Source 里Mac代码里的obj包</em></strong> </a>下载一个最新版本，找到 <code>objc-runtime-new.mm</code>，进入之后搜索<code>_objc_msgForward</code>。</p>\n<p><img src=\"http://i.imgur.com/rGBfaoL.png\" alt=\"enter image description here\"></p>\n<p>里面有对<code>_objc_msgForward</code>的功能解释：</p>\n<p><img src=\"http://i.imgur.com/vcThcdA.png\" alt=\"enter image description here\"></p>\n<pre><code class=\"Objective-C\">/***********************************************************************\n* lookUpImpOrForward.\n* The standard IMP lookup. \n* initialize==NO tries to avoid +initialize (but sometimes fails)\n* cache==NO skips optimistic unlocked lookup (but uses cache elsewhere)\n* Most callers should use initialize==YES and cache==YES.\n* inst is an instance of cls or a subclass thereof, or nil if none is known. \n*   If cls is an un-initialized metaclass then a non-nil inst is faster.\n* May return _objc_msgForward_impcache. IMPs destined for external use \n*   must be converted to _objc_msgForward or _objc_msgForward_stret.\n*   If you don&#39;t want forwarding at all, use lookUpImpOrNil() instead.\n**********************************************************************/\n</code></pre>\n<p>对 <code>objc-runtime-new.mm</code>文件里与<code>_objc_msgForward</code>有关的三个函数使用伪代码展示下：</p>\n<pre><code class=\"Objective-C\">//  objc-runtime-new.mm 文件里与 _objc_msgForward 有关的三个函数使用伪代码展示\n//  Created by https://github.com/ChenYilong\n//  Copyright (c)  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/). All rights reserved.\n//  同时，这也是 obj_msgSend 的实现过程\n\nid objc_msgSend(id self, SEL op, ...) {\n    if (!self) return nil;\n    IMP imp = class_getMethodImplementation(self-&gt;isa, SEL op);\n    imp(self, op, ...); //调用这个函数，伪代码...\n}\n\n//查找IMP\nIMP class_getMethodImplementation(Class cls, SEL sel) {\n    if (!cls || !sel) return nil;\n    IMP imp = lookUpImpOrNil(cls, sel);\n    if (!imp) return _objc_msgForward; //_objc_msgForward 用于消息转发\n    return imp;\n}\n\nIMP lookUpImpOrNil(Class cls, SEL sel) {\n    if (!cls-&gt;initialize()) {\n        _class_initialize(cls);\n    }\n\n    Class curClass = cls;\n    IMP imp = nil;\n    do { //先查缓存,缓存没有时重建,仍旧没有则向父类查询\n        if (!curClass) break;\n        if (!curClass-&gt;cache) fill_cache(cls, curClass);\n        imp = cache_getImp(curClass, sel);\n        if (imp) break;\n    } while (curClass = curClass-&gt;superclass);\n\n    return imp;\n}\n</code></pre>\n<p>虽然Apple没有公开<code>_objc_msgForward</code>的实现源码，但是我们还是能得出结论：</p>\n<blockquote>\n<p><code>_objc_msgForward</code>是一个函数指针（和 IMP 的类型一样），是用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n<p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《objc中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系？》曾提到<code>objc_msgSend</code>在“消息传递”中的作用。在“消息传递”过程中，<code>objc_msgSend</code>的动作比较清晰：首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。如果一直查找到根类仍旧没有实现，则用<code>_objc_msgForward</code>函数指针代替 IMP 。最后，执行这个 IMP 。</p>\n</blockquote>\n<p>为了展示消息转发的具体动作，这里尝试向一个对象发送一条错误的消息，并查看一下<code>_objc_msgForward</code>是如何进行转发的。</p>\n<p>首先开启调试模式、打印出所有运行时发送的消息：<br>可以在代码里执行下面的方法：</p>\n<pre><code class=\"Objective-C\">(void)instrumentObjcMessageSends(YES);\n</code></pre>\n<p>或者断点暂停程序运行，并在 gdb 中输入下面的命令：</p>\n<pre><code class=\"Objective-C\">call (void)instrumentObjcMessageSends(YES)\n</code></pre>\n<p>以第二种为例，操作如下所示：</p>\n<p><img src=\"http://i.imgur.com/uEwTCC4.png\" alt=\"enter image description here\"></p>\n<p>之后，运行时发送的所有消息都会打印到<code>/tmp/msgSend-xxxx</code>文件里了。</p>\n<p>终端中输入命令前往：</p>\n<pre><code class=\"Objective-C\">open /private/tmp\n</code></pre>\n<p><img src=\"http://i.imgur.com/Fh5hhCw.png\" alt=\"enter image description here\"></p>\n<p>可能看到有多条，找到最新生成的，双击打开</p>\n<p>在模拟器上执行执行以下语句（这一套调试方案仅适用于模拟器，真机不可用，关于该调试方案的拓展链接：<a href=\"http://stackoverflow.com/a/10750398/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>Can the messages sent to an object in Objective-C be monitored or printed out?</em></strong> </a>），向一个对象发送一条错误的消息：</p>\n<pre><code class=\"Objective-C\">//\n//  main.m\n//  CYLObjcMsgForwardTest\n//\n//  Created by http://weibo.com/luohanchenyilong/.\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import &lt;UIKit/UIKit.h&gt;\n#import &quot;AppDelegate.h&quot;\n#import &quot;CYLTest.h&quot;\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOS程序犭袁))];\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n</code></pre>\n<p><img src=\"http://i.imgur.com/UjbmVvB.png\" alt=\"enter image description here\"></p>\n<p>你可以在<code>/tmp/msgSend-xxxx</code>（我这一次是<code>/tmp/msgSend-9805</code>）文件里，看到打印出来：</p>\n<p><img src=\"http://i.imgur.com/AAERz1T.png\" alt=\"enter image description here\"></p>\n<pre><code class=\"Objective-C\">+ CYLTest NSObject initialize\n+ CYLTest NSObject alloc\n- CYLTest NSObject init\n- CYLTest NSObject performSelector:\n+ CYLTest NSObject resolveInstanceMethod:\n+ CYLTest NSObject resolveInstanceMethod:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject forwardingTargetForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject methodSignatureForSelector:\n- CYLTest NSObject class\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject doesNotRecognizeSelector:\n- CYLTest NSObject class\n</code></pre>\n<p>结合<a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/#//apple_ref/doc/uid/20000050-SW11\" target=\"_blank\" rel=\"external\">《NSObject官方文档》</a>，排除掉 NSObject 做的事，剩下的就是<code>_objc_msgForward</code>消息转发做的几件事：</p>\n<ol>\n<li><p>调用<code>resolveInstanceMethod:</code>方法 (或 <code>resolveClassMethod:</code>)。允许用户在此时为该 Class 动态添加实现。如果有实现了，则调用并返回YES，那么重新开始<code>objc_msgSend</code>流程。这一次对象会响应这个选择器，一般是因为它已经调用过<code>class_addMethod</code>。如果仍没实现，继续下面的动作。</p>\n</li>\n<li><p>调用<code>forwardingTargetForSelector:</code>方法，尝试找到一个能响应该消息的对象。如果获取到，则直接把消息转发给它，返回非 nil 对象。否则返回 nil ，继续下面的动作。注意，这里不要返回 self ，否则会形成死循环。</p>\n</li>\n<li><p>调用<code>methodSignatureForSelector:</code>方法，尝试获得一个方法签名。如果获取不到，则直接调用<code>doesNotRecognizeSelector</code>抛出异常。如果能获取，则返回非nil：创建一个 NSlnvocation 并传给<code>forwardInvocation:</code>。</p>\n</li>\n<li><p>调用<code>forwardInvocation:</code>方法，将第3步获取到的方法签名包装成 Invocation 传入，如何处理就在这里面了，并返回非ni。</p>\n</li>\n<li><p>调用<code>doesNotRecognizeSelector:</code> ，默认的实现是抛出异常。如果第3步没能获得一个方法签名，执行该步骤。</p>\n</li>\n</ol>\n<p>上面前4个方法均是模板方法，开发者可以override，由 runtime 来调用。最常见的实现消息转发：就是重写方法3和4，吞掉一个消息或者代理给其他对象都是没问题的</p>\n<p>也就是说<code>_objc_msgForward</code>在进行消息转发的过程中会涉及以下这几个方法：</p>\n<ol>\n<li><p><code>resolveInstanceMethod:</code>方法 (或 <code>resolveClassMethod:</code>)。</p>\n</li>\n<li><p><code>forwardingTargetForSelector:</code>方法</p>\n</li>\n<li><p><code>methodSignatureForSelector:</code>方法</p>\n</li>\n<li><p><code>forwardInvocation:</code>方法</p>\n</li>\n<li><p><code>doesNotRecognizeSelector:</code> 方法</p>\n</li>\n</ol>\n<p>为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ <code>_objc_msgForward_demo</code> ”,可运行起来看看。</p>\n<p>下面回答下第二个问题“直接<code>_objc_msgForward</code>调用它将会发生什么？”</p>\n<p>直接调用<code>_objc_msgForward</code>是非常危险的事，如果用不好会直接导致程序Crash，但是如果用得好，能做很多非常酷的事。</p>\n<p>就好像跑酷，干得好，叫“耍酷”，干不好就叫“作死”。</p>\n<p>正如前文所说：</p>\n<blockquote>\n<p><code>_objc_msgForward</code>是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，<code>_objc_msgForward</code>会尝试做消息转发。</p>\n</blockquote>\n<p>如何调用<code>_objc_msgForward</code>？<br><code>_objc_msgForward</code>隶属 C 语言，有三个参数 ：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>–</th>\n<th><code>_objc_msgForward</code>参数</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 1.</td>\n<td>所属对象</td>\n<td>id类型</td>\n</tr>\n<tr>\n<td> 2.</td>\n<td>方法名</td>\n<td>SEL类型 </td>\n</tr>\n<tr>\n<td> 3.</td>\n<td>可变参数</td>\n<td>可变参数类型</td>\n</tr>\n</tbody>\n</table>\n<p>首先了解下如何调用 IMP 类型的方法，IMP类型是如下格式：</p>\n<p>为了直观，我们可以通过如下方式定义一个 IMP类型 ：</p>\n<pre><code class=\"Objective-C\">typedef void (*voidIMP)(id, SEL, ...)\n</code></pre>\n<p>一旦调用<code>_objc_msgForward</code>，将跳过查找 IMP 的过程，直接触发“消息转发”，</p>\n<p>如果调用了<code>_objc_msgForward</code>，即使这个对象确实已经实现了这个方法，你也会告诉<code>objc_msgSend</code>：</p>\n<blockquote>\n<p>“我没有在这个对象里找到这个方法的实现”</p>\n</blockquote>\n<p>想象下<code>objc_msgSend</code>会怎么做？通常情况下，下面这张图就是你正常走<code>objc_msgSend</code>过程，和直接调用<code>_objc_msgForward</code>的前后差别：</p>\n<p><img src=\"http://ww1.sinaimg.cn/bmiddle/6628711bgw1eecx3jef23g206404tkbi.gif\" alt=\"enter image description here\"></p>\n<p>有哪些场景需要直接调用<code>_objc_msgForward</code>？最常见的场景是：你想获取某方法所对应的<code>NSInvocation</code>对象。举例说明：</p>\n<p><a href=\"https://github.com/bang590/JSPatch\" target=\"_blank\" rel=\"external\">JSPatch （Github 链接）</a>就是直接调用<code>_objc_msgForward</code>来实现其核心功能的：</p>\n<blockquote>\n<p> JSPatch 以小巧的体积做到了让JS调用/替换任意OC方法，让iOS APP具备热更新的能力。</p>\n</blockquote>\n<p>作者的博文<a href=\"http://blog.cnbang.net/tech/2808/\" target=\"_blank\" rel=\"external\">《JSPatch实现原理详解》</a>详细记录了实现原理，有兴趣可以看下。</p>\n<p>同时 <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\"> <strong><em>RAC(ReactiveCocoa)</em></strong> </a> 源码中也用到了该方法。</p>\n<h3 id=\"26-runtime如何实现weak变量的自动置nil？\"><a href=\"#26-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"26. runtime如何实现weak变量的自动置nil？\"></a>26. runtime如何实现weak变量的自动置nil？</h3><blockquote>\n<p>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。</p>\n</blockquote>\n<p>在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>中的《runtime 如何实现 weak 属性》有论述。（注：在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">上篇</a>的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到<code>__weak</code>引用的解除时间。）</p>\n<p>我们可以设计一个函数（伪代码）来表示上述机制：</p>\n<p><code>objc_storeWeak(&amp;a, b)</code>函数：</p>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（b）的内存地址作为键值key，将第一个参数–weak修饰的属性变量（a）的内存地址（&amp;a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&amp;a）从weak表中删除，</p>\n<p>你可以把<code>objc_storeWeak(&amp;a, b)</code>理解为：<code>objc_storeWeak(value, key)</code>，并且当key变nil，将value置nil。</p>\n<p>在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。</p>\n<p>而如果a是由assign修饰的，则：<br>在b非nil时，a和b指向同一个内存地址，在b变nil时，a还是指向该内存地址，变野指针。此时向a发送消息极易崩溃。</p>\n<p>下面我们将基于<code>objc_storeWeak(&amp;a, b)</code>函数，使用伪代码模拟“runtime如何实现weak属性”：</p>\n<pre><code class=\"Objective-C\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&amp;obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&amp;obj1);\n</code></pre>\n<p>下面对用到的两个方法<code>objc_initWeak</code>和<code>objc_destroyWeak</code>做下解释：</p>\n<p>总体说来，作用是：<br>通过<code>objc_initWeak</code>函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过<code>objc_destoryWeak</code>函数释放该变量（obj1）。</p>\n<p>下面分别介绍下方法的内部实现：</p>\n<p><code>objc_initWeak</code>函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<pre><code class=\"Objective-C\">obj1 = 0；\nobj_storeWeak(&amp;obj1, obj);\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）</p>\n</blockquote>\n<p>然后<code>obj_destroyWeak</code>函数将0（nil）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<p><code>objc_storeWeak(&amp;obj1, 0);</code></p>\n<p>前面的源代码与下列源代码相同。</p>\n<pre><code class=\"Objective-C\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&amp;obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&amp;obj1, 0);\n</code></pre>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（obj）的内存地址作为键值，将第一个参数–weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从weak表中删除。</p>\n<h3 id=\"27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h3><ul>\n<li>不能向编译后得到的类中增加实例变量；</li>\n<li>能向运行时创建的类中添加实例变量；</li>\n</ul>\n<p>解释下：</p>\n<ul>\n<li><p>因为编译后的类已经注册在 runtime 中，类结构体中的 <code>objc_ivar_list</code> 实例变量的链表 和 <code>instance_size</code> 实例变量的内存大小已经确定，同时runtime 会调用 <code>class_setIvarLayout</code> 或 <code>class_setWeakIvarLayout</code> 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；</p>\n</li>\n<li><p>运行时创建的类是可以添加实例变量，调用 <code>class_addIvar</code> 函数。但是得在调用 <code>objc_allocateClassPair</code> 之后，<code>objc_registerClassPair</code> 之前，原因同上。</p>\n</li>\n</ul>\n<h3 id=\"28-runloop和线程有什么关系？\"><a href=\"#28-runloop和线程有什么关系？\" class=\"headerlink\" title=\"28. runloop和线程有什么关系？\"></a>28. runloop和线程有什么关系？</h3><p>总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。</p>\n<p> runloop 和线程的关系：</p>\n<ol>\n<li><p>主线程的run loop默认是启动的。</p>\n<p>iOS的应用程序里面，程序启动后会有一个如下的main()函数</p>\n<pre><code class=\"Objective-C\">int main(int argc, char * argv[]) {\n@autoreleasepool {\n    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n}\n}\n</code></pre>\n</li>\n</ol>\n<p> 重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。</p>\n<ol>\n<li><p>对其它线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程只是去执行一个长时间的已确定的任务则不需要。</p>\n</li>\n<li><p>在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。</p>\n</li>\n</ol>\n<pre><code class=\"Objective-C\">NSRunLoop *runloop = [NSRunLoop currentRunLoop];\n</code></pre>\n<p>参考链接：<a href=\"http://blog.csdn.net/wzzvictory/article/details/9237973\" target=\"_blank\" rel=\"external\">《Objective-C之run loop详解》</a>。</p>\n<h3 id=\"29-runloop的mode作用是什么？\"><a href=\"#29-runloop的mode作用是什么？\" class=\"headerlink\" title=\"29. runloop的mode作用是什么？\"></a>29. runloop的mode作用是什么？</h3><p>model 主要是用来指定事件在运行循环中的优先级的，分为：</p>\n<ul>\n<li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态</li>\n<li>UITrackingRunLoopMode：ScrollView滑动时</li>\n<li>UIInitializationRunLoopMode：启动时</li>\n<li>NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合</li>\n</ul>\n<p>苹果公开提供的 Mode 有两个：</p>\n<ol>\n<li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）</li>\n<li>NSRunLoopCommonModes（kCFRunLoopCommonModes）</li>\n</ol>\n<h3 id=\"30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h3><p>RunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，ScrollView滚动过程中NSDefaultRunLoopMode（kCFRunLoopDefaultMode）的mode会切换到UITrackingRunLoopMode来保证ScrollView的流畅滑动：只能在NSDefaultRunLoopMode模式下处理的事件会影响ScrollView的滑动。</p>\n<p>如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候,<br>ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。</p>\n<p>同时因为mode还是可定制的，所以：</p>\n<p> Timer计时会被scrollView的滑动影响的问题可以通过将timer添加到NSRunLoopCommonModes（kCFRunLoopCommonModes）来解决。代码如下：</p>\n<pre><code class=\"objective-c\">// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n\n//将timer添加到NSDefaultRunLoopMode中\n[NSTimer scheduledTimerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n//然后再添加到NSRunLoopCommonModes里\nNSTimer *timer = [NSTimer timerWithTimeInterval:1.0\n     target:self\n     selector:@selector(timerTick:)\n     userInfo:nil\n     repeats:YES];\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n</code></pre>\n<h3 id=\"31-猜想runloop内部是如何实现的？\"><a href=\"#31-猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"31. 猜想runloop内部是如何实现的？\"></a>31. 猜想runloop内部是如何实现的？</h3><blockquote>\n<p>一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑<br>是这样的：</p>\n</blockquote>\n<pre><code>function loop() {\n    initialize();\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n</code></pre><p>或使用伪代码来展示下:</p>\n<pre><code>// \n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\nint main(int argc, char * argv[]) {\n //程序一直运行状态\n while (AppIsRunning) {\n      //睡眠状态，等待唤醒事件\n      id whoWakesMe = SleepForWakingUp();\n      //得到唤醒事件\n      id event = GetEvent(whoWakesMe);\n      //开始处理事件\n      HandleEvent(event);\n }\n return 0;\n}\n</code></pre><p>参考链接：</p>\n<ol>\n<li><a href=\"http://blog.ibireme.com/2015/05/18/runloop/#base\" target=\"_blank\" rel=\"external\">《深入理解RunLoop》</a></li>\n<li>摘自博文<a href=\"https://github.com/ming1016/study/wiki/CFRunLoop\" target=\"_blank\" rel=\"external\"><strong><em>CFRunLoop</em></strong></a>，原作者是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a></li>\n</ol>\n<h3 id=\"32-objc使用什么机制管理对象内存？\"><a href=\"#32-objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"32. objc使用什么机制管理对象内存？\"></a>32. objc使用什么机制管理对象内存？</h3><p>通过 retainCount 的机制来决定对象是否需要释放。<br>每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n<h3 id=\"33-ARC通过什么方式帮助开发者管理内存？\"><a href=\"#33-ARC通过什么方式帮助开发者管理内存？\" class=\"headerlink\" title=\"33. ARC通过什么方式帮助开发者管理内存？\"></a>33. ARC通过什么方式帮助开发者管理内存？</h3><p> </p><p><del>编译时根据代码上下文，插入 retain/release<br></del></p><br>ARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。<p></p>\n<p>在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。【TODO:后续更新会详细描述下】</p>\n<h3 id=\"34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"><a href=\"#34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\" class=\"headerlink\" title=\"34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"></a>34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</h3><p>分两种情况：手动干预释放时机、系统自动去释放。</p>\n<ol>\n<li>手动干预释放时机–指定autoreleasepool<br>就是所谓的：当前作用域大括号结束时释放。</li>\n<li><p>系统自动去释放–不手动指定autoreleasepool</p>\n<p>Autorelease对象出了作用域之后，会被添加到最近一次创建的自动释放池中，并会在当前的 runloop 迭代结束时释放。</p>\n</li>\n</ol>\n<p>释放的时机总结起来，可以用下图来表示：</p>\n<p><img src=\"http://i61.tinypic.com/28kodwp.jpg\" alt=\"autoreleasepool与 runloop 的关系图\"></p>\n<p>下面对这张图进行详细的解释：</p>\n<p>从程序启动到加载完成是一个完整的运行循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。</p>\n<p>我们都知道：<br><strong>所有 autorelease 的对象，在出了作用域之后，会被自动添加到最近创建的自动释放池中。</strong></p>\n<p>但是如果每次都放进应用程序的 <code>main.m</code> 中的 autoreleasepool 中，迟早有被撑满的一刻。这个过程中必定有一个释放的动作。何时？</p>\n<p>在一次完整的运行循环结束之前，会被销毁。</p>\n<p>那什么时间会创建自动释放池？运行循环检测到事件并启动后，就会创建自动释放池。 </p>\n<p>子线程的 runloop 默认是不工作，无法主动创建，必须手动创建。</p>\n<p>自定义的 NSOperation 和 NSThread 需要手动创建自动释放池。比如： 自定义的 NSOperation 类中的 main 方法里就必须添加自动释放池。否则出了作用域后，自动释放对象会因为没有自动释放池去处理它，而造成内存泄露。</p>\n<p>但对于 blockOperation 和 invocationOperation 这种默认的Operation ，系统已经帮我们封装好了，不需要手动创建自动释放池。</p>\n<p>@autoreleasepool 当自动释放池被销毁或者耗尽时，会向自动释放池中的所有对象发送 release 消息，释放自动释放池中的所有对象。</p>\n<p> 如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。</p>\n<p>参考链接：<a href=\"http://blog.sunnyxx.com/2014/10/15/behind-autorelease/\" target=\"_blank\" rel=\"external\">《黑幕背后的Autorelease》</a></p>\n<h3 id=\"35-BAD-ACCESS在什么情况下出现？\"><a href=\"#35-BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"35. BAD_ACCESS在什么情况下出现？\"></a>35. BAD_ACCESS在什么情况下出现？</h3><p>访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。<br>死循环</p>\n<h3 id=\"36-苹果是如何实现autoreleasepool的？\"><a href=\"#36-苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"36. 苹果是如何实现autoreleasepool的？\"></a>36. 苹果是如何实现autoreleasepool的？</h3><p>autoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.</p>\n<ol>\n<li><code>objc_autoreleasepoolPush</code></li>\n<li><code>objc_autoreleasepoolPop</code></li>\n<li><code>objc_autorelease</code></li>\n</ol>\n<p>看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。</p>\n<p>举例说明：我们都知道用类方法创建的对象都是 Autorelease 的，那么一旦 Person 出了作用域，当在 Person 的 dealloc 方法中打上断点，我们就可以看到这样的调用堆栈信息：</p>\n<p> <img src=\"http://i60.tinypic.com/15mfj11.jpg\" alt=\"enter image description here\"></p>\n<h3 id=\"37-使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#37-使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"37. 使用block时什么情况会发生引用循环，如何解决？\"></a>37. 使用block时什么情况会发生引用循环，如何解决？</h3><p>一个对象中强引用了block，在block中又强引用了该对象，就会发射循环引用。</p>\n<p>解决方法是将该对象使用<strong>weak或者</strong>block修饰符修饰之后再在block中使用。</p>\n<ol>\n<li>id weak weakSelf = self;<br>或者 weak __typeof(&amp;*self)weakSelf = self该方法可以设置宏</li>\n<li>id __block weakSelf = self;</li>\n</ol>\n<p>或者将其中一方强制制空 <code>xxx = nil</code>。</p>\n<p>检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  <a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"external\"><strong><em>FBRetainCycleDetector</em></strong></a> 。</p>\n<h3 id=\"38-在block内如何修改block外部变量？\"><a href=\"#38-在block内如何修改block外部变量？\" class=\"headerlink\" title=\"38. 在block内如何修改block外部变量？\"></a>38. 在block内如何修改block外部变量？</h3><p>默认情况下，在block中访问的外部变量是复制过去的，即：<strong>写操作不对原变量生效</strong>。但是你可以加上 <code>__block</code> 来让其写操作生效，示例代码如下:</p>\n<pre><code class=\"Objective-C\">    __block int a = 0;\n    void (^foo)(void) = ^{ \n        a = 1; \n    };\n    foo(); \n    //这里，a的值被修改为1\n</code></pre>\n<p>这是 <a href=\"http://weibo.com/tangqiaoboy\" target=\"_blank\" rel=\"external\">微博@唐巧_boy</a>的《iOS开发进阶》中的第11.2.3章节中的描述。你同样可以在面试中这样回答，但你并没有答到“点子上”。真正的原因，并没有书这本书里写的这么“神奇”，而且这种说法也有点牵强。面试官肯定会追问“为什么写操作就生效了？”真正的原因是这样的：</p>\n<blockquote>\n<p>我们都知道：<strong>Block不允许修改外部变量的值</strong>，这里所说的外部变量的值，指的是栈中指针的内存地址。<code>__block</code> 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。</p>\n</blockquote>\n<p><strong>Block不允许修改外部变量的值</strong>。Apple这样设计，应该是考虑到了block的特殊性，block也属于“函数”的范畴，变量进入block，实际就是已经改变了作用域。在几个作用域之间进行切换时，如果不加上这样的限制，变量的可维护性将大大降低。又比如我想在block内声明了一个与外部同名的变量，此时是允许呢还是不允许呢？只有加上了这样的限制，这样的情景才能实现。于是栈区变成了红灯区，堆区变成了绿灯区。</p>\n<p>我们可以打印下内存地址来进行验证：</p>\n<pre><code class=\"Objective-C\">    __block int a = 0;\n    NSLog(@&quot;定义前：%p&quot;, &amp;a);         //栈区\n    void (^foo)(void) = ^{\n        a = 1;\n        NSLog(@&quot;block内部：%p&quot;, &amp;a);    //堆区\n    };\n    NSLog(@&quot;定义后：%p&quot;, &amp;a);         //堆区\n    foo();\n</code></pre>\n<pre><code class=\"Objective-C\">2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义前：0x16fda86f8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] 定义后：0x155b22fc8\n2016-05-17 02:03:33.559 LeanCloudChatKit-iOS[1505:713679] block内部： 0x155b22fc8\n</code></pre>\n<p>“定义后”和“block内部”两者的内存地址是一样的，我们都知道 block 内部的变量会被 copy 到堆区，“block内部”打印的是堆地址，因而也就可以知道，“定义后”打印的也是堆的地址。</p>\n<p> 那么如何证明“block内部”打印的是堆地址？</p>\n<p> 把三个16进制的内存地址转成10进制就是：</p>\n<ol>\n<li>定义后前：6171559672</li>\n<li>block内部：5732708296</li>\n<li>定义后后：5732708296</li>\n</ol>\n<p>中间相差438851376个字节，也就是 418.5M 的空间，因为堆地址要小于栈地址，又因为iOS中一个进程的栈区内存只有1M，Mac也只有8M，显然a已经是在堆区了。</p>\n<p>这也证实了：a 在定义前是栈区，但只要进入了 block 区域，就变成了堆区。这才是 <code>__block</code> 关键字的真正作用。</p>\n<p> <code>__block</code> 关键字修饰后，int类型也从4字节变成了32字节，这是 Foundation 框架 malloc 出来的。这也同样能证实上面的结论。（PS：居然比 NSObject alloc 出来的 16  字节要多一倍）。</p>\n<p>理解到这是因为堆栈地址的变更，而非所谓的“写操作生效”，这一点至关重要，要不然你如何解释下面这个现象：</p>\n<p>以下代码编译可以通过，并且在block中成功将a的从Tom修改为Jerry。</p>\n<pre><code class=\"Objective-C\">    NSMutableString *a = [NSMutableString stringWithString:@&quot;Tom&quot;];\n    NSLog(@&quot;\\n 定以前：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p&quot;, a, &amp;a);               //a在栈区\n    void (^foo)(void) = ^{\n        a.string = @&quot;Jerry&quot;;\n        NSLog(@&quot;\\n block内部：------------------------------------\\n\\\n         a指向的堆中地址：%p；a在栈中的指针地址：%p&quot;, a, &amp;a);               //a在栈区\n        a = [NSMutableString stringWithString:@&quot;William&quot;];\n    };\n    foo();\n    NSLog(@&quot;\\n 定以后：------------------------------------\\n\\\n          a指向的堆中地址：%p；a在栈中的指针地址：%p&quot;, a, &amp;a);               //a在栈区\n</code></pre>\n<p><img src=\"http://i66.tinypic.com/34euhcy.jpg\" alt=\"enter image description here\"></p>\n<p> 这里的a已经由基本数据类型，变成了对象类型。block会对对象类型的指针进行copy，copy到堆中，但并不会改变该指针所指向的堆中的地址，所以在上面的示例代码中，block体内修改的实际是a指向的堆中的内容。</p>\n<p> 但如果我们尝试像上面图片中的65行那样做，结果会编译不通过，那是因为此时你在修改的就不是堆中的内容，而是栈中的内容。</p>\n<p>上文已经说过：<strong>Block不允许修改外部变量的值</strong>，这里所说的外部变量的值，指的是栈中指针的内存地址。栈区是红灯区，堆区才是绿灯区。</p>\n<h3 id=\"39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h3><p>系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：</p>\n<p>所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：</p>\n<pre><code class=\"Objective-C\">[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }];\n</code></pre>\n<pre><code class=\"Objective-C\">[[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }];\n</code></pre>\n<pre><code class=\"Objective-C\">[[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot; \n                                                  object:nil \n                           queue:[NSOperationQueue mainQueue]\n                                              usingBlock:^(NSNotification * notification) {\n                                                    self.someProperty = xyz; }];\n</code></pre>\n<p>这些情况不需要考虑“引用循环”。</p>\n<p>但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用：</p>\n<pre><code class=\"Objective-C\">__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^\n{\n__typeof__(self) strongSelf = weakSelf;\n[strongSelf doSomething];\n[strongSelf doSomethingElse];\n} );\n</code></pre>\n<p>类似的：</p>\n<pre><code class=\"Objective-C\">  __weak __typeof__(self) weakSelf = self;\n  _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@&quot;testKey&quot;\n                                                                object:nil\n                                                                 queue:nil\n                                                            usingBlock:^(NSNotification *note) {\n      __typeof__(self) strongSelf = weakSelf;\n      [strongSelf dismissModalViewControllerAnimated:YES];\n  }];\n</code></pre>\n<p>self –&gt; _observer –&gt; block –&gt; self 显然这也是一个循环引用。</p>\n<p>检测代码中是否存在循环引用问题，可使用 Facebook 开源的一个检测工具  <a href=\"https://github.com/facebook/FBRetainCycleDetector\" target=\"_blank\" rel=\"external\"><strong><em>FBRetainCycleDetector</em></strong></a> 。</p>\n<h3 id=\"40-GCD的队列（dispatch-queue-t）分哪两种类型？\"><a href=\"#40-GCD的队列（dispatch-queue-t）分哪两种类型？\" class=\"headerlink\" title=\"40. GCD的队列（dispatch_queue_t）分哪两种类型？\"></a>40. GCD的队列（<code>dispatch_queue_t</code>）分哪两种类型？</h3><ol>\n<li>串行队列Serial Dispatch Queue</li>\n<li>并行队列Concurrent Dispatch Queue</li>\n</ol>\n<h3 id=\"41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h3><p>使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。</p>\n<pre><code class=\"Objective-C\">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, queue, ^{ /*加载图片1 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片2 */ });\ndispatch_group_async(group, queue, ^{ /*加载图片3 */ }); \ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 合并图片\n});\n</code></pre>\n<h3 id=\"42-dispatch-barrier-async的作用是什么？\"><a href=\"#42-dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"42. dispatch_barrier_async的作用是什么？\"></a>42. <code>dispatch_barrier_async</code>的作用是什么？</h3><p> 在并行队列中，为了保持某些任务的顺序，需要等待一些任务完成后才能继续进行，使用 barrier 来等待之前任务完成，避免数据竞争等问题。<br> <code>dispatch_barrier_async</code> 函数会等待追加到Concurrent Dispatch Queue并行队列中的操作全部执行完之后，然后再执行 <code>dispatch_barrier_async</code> 函数追加的处理，等 <code>dispatch_barrier_async</code> 追加的处理执行结束之后，Concurrent Dispatch Queue才恢复之前的动作继续执行。</p>\n<p>打个比方：比如你们公司周末跟团旅游，高速休息站上，司机说：大家都去上厕所，速战速决，上完厕所就上高速。超大的公共厕所，大家同时去，程序猿很快就结束了，但程序媛就可能会慢一些，即使你第一个回来，司机也不会出发，司机要等待所有人都回来后，才能出发。 <code>dispatch_barrier_async</code> 函数追加的内容就如同 “上完厕所就上高速”这个动作。</p>\n<p>（注意：使用 <code>dispatch_barrier_async</code> ，该函数只能搭配自定义并行队列 <code>dispatch_queue_t</code> 使用。不能使用： <code>dispatch_get_global_queue</code> ，否则 <code>dispatch_barrier_async</code> 的作用会和 <code>dispatch_async</code> 的作用一模一样。 ）</p>\n<h3 id=\"43-苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#43-苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"43. 苹果为什么要废弃dispatch_get_current_queue？\"></a>43. 苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h3><p><code>dispatch_get_current_queue</code>容易造成死锁</p>\n<h3 id=\"44-以下代码运行结果如何？\"><a href=\"#44-以下代码运行结果如何？\" class=\"headerlink\" title=\"44. 以下代码运行结果如何？\"></a>44. 以下代码运行结果如何？</h3><pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@&quot;1&quot;);\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@&quot;2&quot;);\n    });\n    NSLog(@&quot;3&quot;);\n}\n</code></pre><p>只输出：1 。发生主线程锁死。</p>\n<h3 id=\"45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h3><pre><code class=\"Objective-C\">// 添加键值观察\n/*\n1 观察者，负责处理监听事件的对象\n2 观察的属性\n3 观察的选项\n4 上下文\n*/\n[self.person addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@&quot;Person Name&quot;];\n</code></pre>\n<p>observer中需要实现一下方法：</p>\n<pre><code class=\"Objective-C\">// 所有的 kvo 监听到事件，都会调用此方法\n/*\n 1. 观察的属性\n 2. 观察的对象\n 3. change 属性变化字典（新／旧）\n 4. 上下文，与监听的时候传递的一致\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;\n</code></pre>\n<h3 id=\"46-如何手动触发一个value的KVO\"><a href=\"#46-如何手动触发一个value的KVO\" class=\"headerlink\" title=\"46. 如何手动触发一个value的KVO\"></a>46. 如何手动触发一个value的KVO</h3><p>所谓的“手动触发”是区别于“自动触发”：</p>\n<p>自动触发是指类似这种场景：在注册 KVO 之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。</p>\n<p>想知道如何手动触发，必须知道自动触发 KVO 的原理：</p>\n<p>键值观察通知依赖于 NSObject 的两个方法:  <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 。在一个被观察属性发生改变之前，  <code>willChangeValueForKey:</code> 一定会被调用，这就<br>会记录旧的值。而当改变发生后，  <code>observeValueForKey:ofObject:change:context:</code> 会被调用，继而 <code>didChangeValueForKey:</code> 也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。</p>\n<p>那么“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>具体做法如下：</p>\n<p>如果这个  <code>value</code> 是  表示时间的 <code>self.now</code> ，那么代码如下：最后两行代码缺一不可。</p>\n<p>相关代码已放在仓库里。</p>\n<pre><code class=\"Objective-C\">//  .m文件\n//  Created by https://github.com/ChenYilong\n//  微博@iOS程序犭袁(http://weibo.com/luohanchenyilong/).\n//  手动触发 value 的KVO，最后两行代码缺一不可。\n\n//@property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    _now = [NSDate date];\n    [self addObserver:self forKeyPath:@&quot;now&quot; options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@&quot;1&quot;);\n    [self willChangeValueForKey:@&quot;now&quot;]; // “手动触发self.now的KVO”，必写。\n    NSLog(@&quot;2&quot;);\n    [self didChangeValueForKey:@&quot;now&quot;]; // “手动触发self.now的KVO”，必写。\n    NSLog(@&quot;4&quot;);\n}\n</code></pre>\n<p>但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：</p>\n<blockquote>\n<p>比如调用 <code>setNow:</code> 时，系统还会以某种方式在中间插入 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code> 和 <code>observeValueForKeyPath:ofObject:change:context:</code> 的调用。</p>\n</blockquote>\n<p>大家可能以为这是因为 <code>setNow:</code> 是合成方法，有时候我们也能看到有人这么写代码:</p>\n<pre><code class=\"Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@&quot;now&quot;]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@&quot;now&quot;];// 没有必要\n}\n</code></pre>\n<p>这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 <code>willChangeValueForKey:</code>  ，之后总是调用 <code>didChangeValueForkey:</code> 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。下文《apple用什么方式实现对一个对象的KVO？》会有详述。</p>\n<p>参考链接： <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-SW3\" target=\"_blank\" rel=\"external\">Manual Change Notification—Apple 官方文档</a> </p>\n<h3 id=\"47-若一个类有实例变量-NSString-foo-，调用setValue-forKey-时，可以以foo还是-foo-作为key？\"><a href=\"#47-若一个类有实例变量-NSString-foo-，调用setValue-forKey-时，可以以foo还是-foo-作为key？\" class=\"headerlink\" title=\"47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？\"></a>47. 若一个类有实例变量 <code>NSString *_foo</code> ，调用setValue:forKey:时，可以以foo还是 <code>_foo</code> 作为key？</h3><p>都可以。</p>\n<h3 id=\"48-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#48-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"48. KVC的keyPath中的集合运算符如何使用？\"></a>48. KVC的keyPath中的集合运算符如何使用？</h3><ol>\n<li>必须用在集合对象上或普通对象的集合属性上</li>\n<li>简单集合运算符有@avg， @count ， @max ， @min ，@sum，</li>\n<li>格式 @”@sum.age”或 @”集合属性.@max.age”</li>\n</ol>\n<h3 id=\"49-KVC和KVO的keyPath一定是属性么？\"><a href=\"#49-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"49. KVC和KVO的keyPath一定是属性么？\"></a>49. KVC和KVO的keyPath一定是属性么？</h3><p>KVC 支持实例变量，KVO 只能手动支持<a href=\"https://yq.aliyun.com/articles/30483\" target=\"_blank\" rel=\"external\">手动设定实例变量的KVO实现监听</a></p>\n<h3 id=\"50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h3><p>请参考：</p>\n<ol>\n<li><a href=\"http://tech.glowing.com/cn/implement-kvo/\" target=\"_blank\" rel=\"external\">《如何自己动手实现 KVO》</a></li>\n<li><a href=\"http://stackoverflow.com/a/10042641/3395008\" target=\"_blank\" rel=\"external\"><strong>KVO for manually implemented properties</strong></a> </li>\n</ol>\n<h3 id=\"51-apple用什么方式实现对一个对象的KVO？\"><a href=\"#51-apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"51. apple用什么方式实现对一个对象的KVO？\"></a>51. apple用什么方式实现对一个对象的KVO？</h3><p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>对 KVO 实现的描述：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …</p>\n</blockquote>\n<p>从<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>可以看出：Apple 并不希望过多暴露 KVO 的实现细节。不过，要是借助 runtime 提供的方法去深入挖掘，所有被掩盖的细节都会原形毕露：</p>\n<blockquote>\n<p>当你观察一个对象时，一个新的类会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象：值的更改。最后通过 <code>isa 混写（isa-swizzling）</code> 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。我画了一张示意图，如下所示：</p>\n</blockquote>\n<p><img src=\"http://i62.tinypic.com/sy57ur.jpg\" alt=\"enter image description here\"></p>\n<p> KVO 确实有点黑魔法：</p>\n<blockquote>\n<p>Apple 使用了 <code>isa 混写（isa-swizzling）</code>来实现 KVO 。</p>\n</blockquote>\n<p>下面做下详细解释：</p>\n<p>键值观察通知依赖于 NSObject 的两个方法:  <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 。在一个被观察属性发生改变之前，  <code>willChangeValueForKey:</code> 一定会被调用，这就会记录旧的值。而当改变发生后， <code>observeValueForKey:ofObject:change:context:</code> 会被调用，继而  <code>didChangeValueForKey:</code> 也会被调用。可以手动实现这些调用，但很少有人这么做。一般我们只在希望能控制回调的调用时机时才会这么做。大部分情况下，改变通知会自动调用。</p>\n<p> 比如调用 <code>setNow:</code> 时，系统还会以某种方式在中间插入 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> 的调用。大家可能以为这是因为 <code>setNow:</code> 是合成方法，有时候我们也能看到有人这么写代码:</p>\n<pre><code class=\"Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@&quot;now&quot;]; // 没有必要\n    _now = aDate;\n    [self didChangeValueForKey:@&quot;now&quot;];// 没有必要\n}\n</code></pre>\n<p>这完全没有必要，不要这么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用 <code>willChangeValueForKey:</code>  ，之后总是调用 <code>didChangeValueForkey:</code> 。怎么做到的呢?答案是通过 isa 混写（isa-swizzling）。第一次对一个对象调用 <code>addObserver:forKeyPath:options:context:</code> 时，框架会创建这个类的新的 KVO 子类，并将被观察对象转换为新子类的对象。在这个 KVO 特殊子类中， Cocoa 创建观察属性的 setter ，大致工作原理如下:</p>\n<pre><code class=\"Objective-C\">- (void)setNow:(NSDate *)aDate {\n    [self willChangeValueForKey:@&quot;now&quot;];\n    [super setValue:aDate forKey:@&quot;now&quot;];\n    [self didChangeValueForKey:@&quot;now&quot;];\n}\n</code></pre>\n<p>这种继承和方法注入是在运行时而不是编译时实现的。这就是正确命名如此重要的原因。只有在使用KVC命名约定时，KVO才能做到这一点。</p>\n<p>KVO 在实现中通过 <code>isa 混写（isa-swizzling）</code> 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。这在<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html\" target=\"_blank\" rel=\"external\">Apple 的文档</a>可以得到印证：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …</p>\n</blockquote>\n<p>然而 KVO 在实现中使用了 <code>isa 混写（ isa-swizzling）</code> ，这个的确不是很容易发现：Apple 还重写、覆盖了 <code>-class</code> 方法并返回原来的类。 企图欺骗我们：这个类没有变，就是原本那个类。。。</p>\n<p>但是，假设“被监听的对象”的类对象是 <code>MYClass</code> ，有时候我们能看到对 <code>NSKVONotifying_MYClass</code> 的引用而不是对  <code>MYClass</code>  的引用。借此我们得以知道 Apple 使用了 <code>isa 混写（isa-swizzling）</code>。具体探究过程可参考<a href=\"https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html\" target=\"_blank\" rel=\"external\"> 这篇博文 </a>。</p>\n<p>那么 <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> 这三个方法的执行顺序是怎样的呢？</p>\n<p> <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code> 很好理解，<code>observeValueForKeyPath:ofObject:change:context:</code> 的执行时机是什么时候呢？</p>\n<p> 先看一个例子：</p>\n<p>代码已放在仓库里。</p>\n<pre><code class=\"Objective-C\">- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self addObserver:self forKeyPath:@&quot;now&quot; options:NSKeyValueObservingOptionNew context:nil];\n    NSLog(@&quot;1&quot;);\n    [self willChangeValueForKey:@&quot;now&quot;]; // “手动触发self.now的KVO”，必写。\n    NSLog(@&quot;2&quot;);\n    [self didChangeValueForKey:@&quot;now&quot;]; // “手动触发self.now的KVO”，必写。\n    NSLog(@&quot;4&quot;);\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context {\n    NSLog(@&quot;3&quot;);\n}\n</code></pre>\n<p><img src=\"http://i66.tinypic.com/ncm7th.jpg\" alt=\"enter image description here\"></p>\n<p>如果单单从下面这个例子的打印上， </p>\n<p>顺序似乎是 <code>wilChangeValueForKey:</code> 、 <code>observeValueForKeyPath:ofObject:change:context:</code> 、 <code>didChangeValueForKey:</code> 。</p>\n<p>其实不然，这里有一个 <code>observeValueForKeyPath:ofObject:change:context:</code>  , 和 <code>didChangeValueForKey:</code> 到底谁先调用的问题：如果 <code>observeValueForKeyPath:ofObject:change:context:</code> 是在 <code>didChangeValueForKey:</code> 内部触发的操作呢？ 那么顺序就是： <code>wilChangeValueForKey:</code> 、  <code>didChangeValueForKey:</code>  和 <code>observeValueForKeyPath:ofObject:change:context:</code> </p>\n<p>不信你把 <code>didChangeValueForKey:</code> 注视掉，看下 <code>observeValueForKeyPath:ofObject:change:context:</code> 会不会执行。</p>\n<p>了解到这一点很重要，正如  <a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（下）.md#46-如何手动触发一个value的kvo\" target=\"_blank\" rel=\"external\">46. 如何手动触发一个value的KVO</a>  所说的：</p>\n<p>“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>而“回调的调用时机”就是在你调用 <code>didChangeValueForKey:</code> 方法时。</p>\n<h3 id=\"52-IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#52-IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"52. IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>52. IBOutlet连出来的视图属性为什么可以被设置成weak?</h3><p>参考链接：<a href=\"http://stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc\" target=\"_blank\" rel=\"external\"> <strong><em>Should IBOutlets be strong or weak under ARC?</em></strong> </a></p>\n<p>文章告诉我们：</p>\n<blockquote>\n<p>因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。</p>\n</blockquote>\n<p>不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系</p>\n<h3 id=\"53-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#53-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"53. IB中User Defined Runtime Attributes如何使用？\"></a>53. IB中User Defined Runtime Attributes如何使用？</h3><p>它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller</p>\n<h3 id=\"54-如何调试BAD-ACCESS错误\"><a href=\"#54-如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"54. 如何调试BAD_ACCESS错误\"></a>54. 如何调试BAD_ACCESS错误</h3><ol>\n<li>重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object</li>\n<li><p>通过 Zombie<br><img src=\"http://i.stack.imgur.com/ZAdi0.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>设置全局断点快速定位问题代码所在行</p>\n</li>\n<li>Xcode 7 已经集成了BAD_ACCESS捕获功能：<strong>Address Sanitizer</strong>。<br>用法如下：在配置中勾选✅Enable Address Sanitizer<br><img src=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Art/xc7-asan_2x.png\" alt=\"enter image description here\"></li>\n</ol>\n<h3 id=\"55-lldb（gdb）常用的调试命令？\"><a href=\"#55-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"55. lldb（gdb）常用的调试命令？\"></a>55. lldb（gdb）常用的调试命令？</h3><ul>\n<li>breakpoint 设置断点定位到某一个函数</li>\n<li>n 断点指针下一步</li>\n<li>po打印对象</li>\n</ul>\n<p>更多 lldb（gdb） 调试命令可查看</p>\n<ol>\n<li><a href=\"http://lldb.llvm.org/lldb-gdb.html\" target=\"_blank\" rel=\"external\"> <strong><em>The LLDB Debugger</em></strong> </a>；</li>\n<li>苹果官方文档：<a href=\"https://developer.apple.com/library/ios/technotes/tn2239/_index.html\" target=\"_blank\" rel=\"external\"> <strong><em>iOS Debugging Magic</em></strong> </a>。</li>\n</ol>\n<hr>\n<p>Posted by <a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\" rel=\"external\">Creative Commons BY-NC-ND 3.0</a></p>\n"},{"title":"iOS常用工具方法","date":"2017-06-03T14:47:26.000Z","_content":"####  1. 获取磁盘总空间大小\n\n```objectivec\n//磁盘总空间\n+ (CGFloat)diskOfAllSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@\"error: %@\", error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n```\n\n####  2. 获取磁盘可用空间大小\n\n```objectivec\n//磁盘可用空间\n+ (CGFloat)diskOfFreeSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@\"error: %@\", error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemFreeSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n```\n####  3. 获取指定路径下某个文件的大小\n\n```objectivec\n//获取文件大小\n+ (long long)fileSizeAtPath:(NSString *)filePath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:filePath]) return 0;\n    return [[fileManager attributesOfItemAtPath:filePath error:nil] fileSize];\n}\n```\n\n####  4. 获取文件夹下所有文件的大小\n\n```objectivec\n//获取文件夹下所有文件的大小\n+ (long long)folderSizeAtPath:(NSString *)folderPath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:folderPath]) return 0;\n    NSEnumerator *filesEnumerator = [[fileManager subpathsAtPath:folderPath] objectEnumerator];\n    NSString *fileName;\n    long long folerSize = 0;\n    while ((fileName = [filesEnumerator nextObject]) != nil) {\n        NSString *filePath = [folderPath stringByAppendingPathComponent:fileName];\n        folerSize += [self fileSizeAtPath:filePath];\n    }\n    return folerSize;\n}\n```\n\n####   5. 获取字符串(或汉字)首字母\n\n```objectivec\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n```\n\n####   5. 获取字符串(或汉字)首字母\n\n```objectivec\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n```\n\n####   6. 将字符串数组按照元素首字母顺序进行排序分组\n\n```objectivec\n//将字符串数组按照元素首字母顺序进行排序分组\n+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array{\n    if (array.count == 0) {\n        return nil;\n    }\n    for (id obj in array) {\n        if (![obj isKindOfClass:[NSString class]]) {\n            return nil;\n        }\n    }\n    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];\n    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];\n    //创建27个分组数组\n    for (int i = 0; i < indexedCollation.sectionTitles.count; i++) {\n        NSMutableArray *obj = [NSMutableArray array];\n        [objects addObject:obj];\n    }\n    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];\n    //按字母顺序进行分组\n    NSInteger lastIndex = -1;\n    for (int i = 0; i < array.count; i++) {\n        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];\n        [[objects objectAtIndex:index] addObject:array[i]];\n        lastIndex = index;\n    }\n    //去掉空数组\n    for (int i = 0; i < objects.count; i++) {\n        NSMutableArray *obj = objects[i];\n        if (obj.count == 0) {\n            [objects removeObject:obj];\n        }\n    }\n    //获取索引字母\n    for (NSMutableArray *obj in objects) {\n        NSString *str = obj[0];\n        NSString *key = [self firstCharacterWithString:str];\n        [keys addObject:key];\n    }\n    NSMutableDictionary *dic = [NSMutableDictionary dictionary];\n    [dic setObject:objects forKey:keys];\n    return dic;\n}\n\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n\n```\n##### 使用如下:\n```objectivec\nNSArray *arr = @[@\"guangzhou\", @\"shanghai\", @\"北京\", @\"henan\", @\"hainan\"];\nNSDictionary *dic = [Utilities dictionaryOrderByCharacterWithOriginalArray:arr];\nNSLog(@\"\\n\\ndic: %@\", dic);\n```\n![结果](http://upload-images.jianshu.io/upload_images/1803339-a63d16ad6cccc312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####  7. 获取当前时间\n\n```objectivec\n//获取当前时间\n//format: @\"yyyy-MM-dd HH:mm:ss\"、@\"yyyy年MM月dd日 HH时mm分ss秒\"\n+ (NSString *)currentDateWithFormat:(NSString *)format{\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:format];\n    return [dateFormatter stringFromDate:[NSDate date]];\n}\n```\n####  8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等\n\n```objectivec\n/**\n *  计算上次日期距离现在多久\n *\n *  @param lastTime    上次日期(需要和格式对应)\n *  @param format1     上次日期格式\n *  @param currentTime 最近日期(需要和格式对应)\n *  @param format2     最近日期格式\n *\n *  @return xx分钟前、xx小时前、xx天前\n */\n+ (NSString *)timeIntervalFromLastTime:(NSString *)lastTime\n                        lastTimeFormat:(NSString *)format1\n                         ToCurrentTime:(NSString *)currentTime\n                     currentTimeFormat:(NSString *)format2{\n    //上次时间\n    NSDateFormatter *dateFormatter1 = [[NSDateFormatter alloc]init];\n    dateFormatter1.dateFormat = format1;\n    NSDate *lastDate = [dateFormatter1 dateFromString:lastTime];\n    //当前时间\n    NSDateFormatter *dateFormatter2 = [[NSDateFormatter alloc]init];\n    dateFormatter2.dateFormat = format2;\n    NSDate *currentDate = [dateFormatter2 dateFromString:currentTime];\n    return [Utilities timeIntervalFromLastTime:lastDate ToCurrentTime:currentDate];\n}\n\n+ (NSString *)timeIntervalFromLastTime:(NSDate *)lastTime ToCurrentTime:(NSDate *)currentTime{\n    NSTimeZone *timeZone = [NSTimeZone systemTimeZone];\n    //上次时间\n    NSDate *lastDate = [lastTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:lastTime]];\n    //当前时间\n    NSDate *currentDate = [currentTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:currentTime]];\n    //时间间隔\n    NSInteger intevalTime = [currentDate timeIntervalSinceReferenceDate] - [lastDate timeIntervalSinceReferenceDate];\n\n    //秒、分、小时、天、月、年\n    NSInteger minutes = intevalTime / 60;\n    NSInteger hours = intevalTime / 60 / 60;\n    NSInteger day = intevalTime / 60 / 60 / 24;\n    NSInteger month = intevalTime / 60 / 60 / 24 / 30;\n    NSInteger yers = intevalTime / 60 / 60 / 24 / 365;\n\n    if (minutes <= 10) {\n        return  @\"刚刚\";\n    }else if (minutes < 60){\n        return [NSString stringWithFormat: @\"%ld分钟前\",(long)minutes];\n    }else if (hours < 24){\n        return [NSString stringWithFormat: @\"%ld小时前\",(long)hours];\n    }else if (day < 30){\n        return [NSString stringWithFormat: @\"%ld天前\",(long)day];\n    }else if (month < 12){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @\"M月d日\";\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }else if (yers >= 1){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @\"yyyy年M月d日\";\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }\n    return @\"\";\n}\n```\n\n#### 使用如下:\n\n```objectivec\nNSLog(@\"\\n\\nresult: %@\", [Utilities timeIntervalFromLastTime:@\"2015年12月8日 15:50\"\n                                           lastTimeFormat:@\"yyyy年MM月dd日 HH:mm\"\n                                            ToCurrentTime:@\"2015/12/08 16:12\"\n                                        currentTimeFormat:@\"yyyy/MM/dd HH:mm\"]);\n```\n\n输出结果如下:\n![结果](http://upload-images.jianshu.io/upload_images/1803339-591e3b7e5982b1b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####  9. 判断手机号码格式是否正确\n\n```objectivec\n//判断手机号码格式是否正确\n+ (BOOL)valiMobile:(NSString *)mobile{\n    mobile = [mobile stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n    if (mobile.length != 11)\n    {\n        return NO;\n    }else{\n        /**\n         * 移动号段正则表达式\n         */\n        NSString *CM_NUM = @\"^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))\\\\d{8}|(1705)\\\\d{7}$\";\n        /**\n         * 联通号段正则表达式\n         */\n        NSString *CU_NUM = @\"^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))\\\\d{8}|(1709)\\\\d{7}$\";\n        /**\n         * 电信号段正则表达式\n         */\n        NSString *CT_NUM = @\"^((133)|(153)|(177)|(18[0,1,9]))\\\\d{8}$\";\n        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CM_NUM];\n        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];\n        NSPredicate *pred2 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CU_NUM];\n        BOOL isMatch2 = [pred2 evaluateWithObject:mobile];\n        NSPredicate *pred3 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CT_NUM];\n        BOOL isMatch3 = [pred3 evaluateWithObject:mobile];\n\n        if (isMatch1 || isMatch2 || isMatch3) {\n            return YES;\n        }else{\n            return NO;\n        }\n    }\n}\n```\n\n#### 10. 判断邮箱格式是否正确\n\n```objectivec\n//利用正则表达式验证\n+ (BOOL)isAvailableEmail:(NSString *)email {\n    NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";\n    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", emailRegex];\n    return [emailTest evaluateWithObject:email];\n}\n```\n\n#### 11. 将十六进制颜色转换为 UIColor 对象\n\n```objectivec\n//将十六进制颜色转换为 UIColor 对象\n+ (UIColor *)colorWithHexString:(NSString *)color{\n    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];\n    // String should be 6 or 8 characters\n    if ([cString length] < 6) {\n        return [UIColor clearColor];\n    }\n    // strip \"0X\" or \"#\" if it appears\n    if ([cString hasPrefix:@\"0X\"])\n        cString = [cString substringFromIndex:2];\n    if ([cString hasPrefix:@\"#\"])\n        cString = [cString substringFromIndex:1];\n    if ([cString length] != 6)\n        return [UIColor clearColor];\n    // Separate into r, g, b substrings\n    NSRange range;\n    range.location = 0;\n    range.length = 2;\n    //r\n    NSString *rString = [cString substringWithRange:range];\n    //g\n    range.location = 2;\n    NSString *gString = [cString substringWithRange:range];\n    //b\n    range.location = 4;\n    NSString *bString = [cString substringWithRange:range];\n    // Scan values\n    unsigned int r, g, b;\n    [[NSScanner scannerWithString:rString] scanHexInt:&r];\n    [[NSScanner scannerWithString:gString] scanHexInt:&g];\n    [[NSScanner scannerWithString:bString] scanHexInt:&b];\n    return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];\n}\n```\n\n#### 12. 对图片进行滤镜处理\n\n```objectivec\n#pragma mark - 对图片进行滤镜处理\n// 怀旧 --> CIPhotoEffectInstant                         单色 --> CIPhotoEffectMono\n// 黑白 --> CIPhotoEffectNoir                            褪色 --> CIPhotoEffectFade\n// 色调 --> CIPhotoEffectTonal                           冲印 --> CIPhotoEffectProcess\n// 岁月 --> CIPhotoEffectTransfer                        铬黄 --> CIPhotoEffectChrome\n// CILinearToSRGBToneCurve, CISRGBToneCurveToLinear, CIGaussianBlur, CIBoxBlur, CIDiscBlur, CISepiaTone, CIDepthOfField\n+ (UIImage *)filterWithOriginalImage:(UIImage *)image filterName:(NSString *)name{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:name];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n```\n#### 13. 对图片进行模糊处理\n```objectivec\n#pragma mark - 对图片进行模糊处理\n// CIGaussianBlur ---> 高斯模糊\n// CIBoxBlur      ---> 均值模糊(Available in iOS 9.0 and later)\n// CIDiscBlur     ---> 环形卷积模糊(Available in iOS 9.0 and later)\n// CIMedianFilter ---> 中值模糊, 用于消除图像噪点, 无需设置radius(Available in iOS 9.0 and later)\n// CIMotionBlur   ---> 运动模糊, 用于模拟相机移动拍摄时的扫尾效果(Available in iOS 9.0 and later)\n+ (UIImage *)blurWithOriginalImage:(UIImage *)image blurName:(NSString *)name radius:(NSInteger)radius{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter;\n    if (name.length != 0) {\n        filter = [CIFilter filterWithName:name];\n        [filter setValue:inputImage forKey:kCIInputImageKey];\n        if (![name isEqualToString:@\"CIMedianFilter\"]) {\n            [filter setValue:@(radius) forKey:@\"inputRadius\"];\n        }\n        CIImage *result = [filter valueForKey:kCIOutputImageKey];\n        CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n        UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n        CGImageRelease(cgImage);\n        return resultImage;\n    }else{\n        return nil;\n    }\n}\n```\n\n#### 14. 调整图片饱和度、亮度、对比度\n```objectivec\n/**\n *  调整图片饱和度, 亮度, 对比度\n *\n *  @param image      目标图片\n *  @param saturation 饱和度\n *  @param brightness 亮度: -1.0 ~ 1.0\n *  @param contrast   对比度\n *\n */\n+ (UIImage *)colorControlsWithOriginalImage:(UIImage *)image\n                                 saturation:(CGFloat)saturation\n                                 brightness:(CGFloat)brightness\n                                   contrast:(CGFloat)contrast{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:@\"CIColorControls\"];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n\n    [filter setValue:@(saturation) forKey:@\"inputSaturation\"];\n    [filter setValue:@(brightness) forKey:@\"inputBrightness\"];\n    [filter setValue:@(contrast) forKey:@\"inputContrast\"];\n\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n```\n\n#### 15. 创建一张实时模糊效果 View (毛玻璃效果)\n```objectivec\n//Avilable in iOS 8.0 and later\n+ (UIVisualEffectView *)effectViewWithFrame:(CGRect)frame{\n    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];\n    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];\n    effectView.frame = frame;\n    return effectView;\n}\n```\n\n#### 16. 全屏截图\n```objectivec\n//全屏截图\n+ (UIImage *)shotScreen{\n    UIWindow *window = [UIApplication sharedApplication].keyWindow;\n    UIGraphicsBeginImageContext(window.bounds.size);\n    [window.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n\n```\n\n#### 17. 截取一张 view 生成图片\n```objectivec\n//截取view生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view{\n    UIGraphicsBeginImageContext(view.bounds.size);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n#### 18. 截取view中某个区域生成一张图片\n```objectivec\n//截取view中某个区域生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view scope:(CGRect)scope{\n    CGImageRef imageRef = CGImageCreateWithImageInRect([self shotWithView:view].CGImage, scope);\n    UIGraphicsBeginImageContext(scope.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGRect rect = CGRectMake(0, 0, scope.size.width, scope.size.height);\n    CGContextTranslateCTM(context, 0, rect.size.height);//下移\n    CGContextScaleCTM(context, 1.0f, -1.0f);//上翻\n    CGContextDrawImage(context, rect, imageRef);\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    CGImageRelease(imageRef);\n    CGContextRelease(context);\n    return image;\n}\n```\n#### 19. 压缩图片到指定尺寸大小\n```objectivec\n//压缩图片到指定尺寸大小\n+ (UIImage *)compressOriginalImage:(UIImage *)image toSize:(CGSize)size{\n    UIImage *resultImage = image;\n    UIGraphicsBeginImageContext(size);\n    [resultImage drawInRect:CGRectMake(0, 0, size.width, size.height)];\n    UIGraphicsEndImageContext();\n    return resultImage;\n}\n```\n#### 20. 压缩图片到指定文件大小\n```objectivec\n//压缩图片到指定文件大小\n+ (NSData *)compressOriginalImage:(UIImage *)image toMaxDataSizeKBytes:(CGFloat)size{\n    NSData *data = UIImageJPEGRepresentation(image, 1.0);\n    CGFloat dataKBytes = data.length/1000.0;\n    CGFloat maxQuality = 0.9f;\n    CGFloat lastData = dataKBytes;\n    while (dataKBytes > size && maxQuality > 0.01f) {\n        maxQuality = maxQuality - 0.01f;\n        data = UIImageJPEGRepresentation(image, maxQuality);\n        dataKBytes = data.length/1000.0;\n        if (lastData == dataKBytes) {\n            break;\n        }else{\n            lastData = dataKBytes;\n        }\n    }\n    return data;\n}\n```\n\n#### 21. 获取设备 IP 地址\n\n需要先引入下头文件:\n\n`#import <ifaddrs.h>`\n`#import <arpa/inet.h>`\n\n```objectivec\n//获取设备 IP 地址\n+ (NSString *)getIPAddress {\n    NSString *address = @\"error\";\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    success = getifaddrs(&interfaces);\n    if (success == 0) {\n        temp_addr = interfaces;\n        while(temp_addr != NULL) {\n            if(temp_addr->ifa_addr->sa_family == AF_INET) {\n                if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {\n                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];\n                }\n            }\n            temp_addr = temp_addr->ifa_next;\n        }\n    }\n    freeifaddrs(interfaces);\n    return address;\n}\n```\n#### 22. 判断字符串中是否含有空格\n\n```objectivec\n+ (BOOL)isHaveSpaceInString:(NSString *)string{\n    NSRange _range = [string rangeOfString:@\" \"];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n```\n\n#### 23. 判断字符串中是否含有某个字符串\n\n\n```objectivec\n+ (BOOL)isHaveString:(NSString *)string1 InString:(NSString *)string2{\n    NSRange _range = [string2 rangeOfString:string1];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n```\n\n#### 24. 判断字符串中是否含有中文\n\n```objectivec\n+ (BOOL)isHaveChineseInString:(NSString *)string{\n    for(NSInteger i = 0; i < [string length]; i++){\n        int a = [string characterAtIndex:i];\n        if (a > 0x4e00 && a < 0x9fff) {\n            return YES;\n        }\n    }\n    return NO;\n}\n```\n\n#### 25. 判断字符串是否全部为数字\n\n```objectivec\n+ (BOOL)isAllNum:(NSString *)string{\n    unichar c;\n    for (int i=0; i<string.length; i++) {\n        c=[string characterAtIndex:i];\n        if (!isdigit(c)) {\n            return NO;\n        }\n    }\n    return YES;\n}\n```\n\n#### 26. 绘制虚线\n\n```objectivec\n/*\n  ** lineFrame:     虚线的 frame\n  ** length:        虚线中短线的宽度\n  ** spacing:       虚线中短线之间的间距\n  ** color:         虚线中短线的颜色\n*/\n+ (UIView *)createDashedLineWithFrame:(CGRect)lineFrame\n                           lineLength:(int)length\n                          lineSpacing:(int)spacing\n                            lineColor:(UIColor *)color{\n    UIView *dashedLine = [[UIView alloc] initWithFrame:lineFrame];\n    dashedLine.backgroundColor = [UIColor clearColor];\n    CAShapeLayer *shapeLayer = [CAShapeLayer layer];\n    [shapeLayer setBounds:dashedLine.bounds];\n    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(dashedLine.frame) / 2, CGRectGetHeight(dashedLine.frame))];\n    [shapeLayer setFillColor:[UIColor clearColor].CGColor];\n    [shapeLayer setStrokeColor:color.CGColor];\n    [shapeLayer setLineWidth:CGRectGetHeight(dashedLine.frame)];\n    [shapeLayer setLineJoin:kCALineJoinRound];\n    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:length], [NSNumber numberWithInt:spacing], nil]];\n    CGMutablePathRef path = CGPathCreateMutable();\n    CGPathMoveToPoint(path, NULL, 0, 0);\n    CGPathAddLineToPoint(path, NULL, CGRectGetWidth(dashedLine.frame), 0);\n    [shapeLayer setPath:path];\n    CGPathRelease(path);\n    [dashedLine.layer addSublayer:shapeLayer];\n    return dashedLine;\n}\n```\n\n#### 27. 将字典对象转换为 JSON 字符串\n\n```objectivec\n+ (NSString *)jsonPrettyStringEncoded:(NSDictionary *)dictionary{\n    if ([NSJSONSerialization isValidJSONObject:dictionary ]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:NSJSONWritingPrettyPrinted error:&error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n```\n\n#### 28.将数组对象转换为 JSON 字符串\n\n```objectivec\n+ (NSString *)jsonPrettyStringEncoded:(NSArray *)array{\n    if ([NSJSONSerialization isValidJSONObject:array]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:array options:NSJSONWritingPrettyPrinted error:&error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n```\n\n#### 29. 获取 WiFi 信息\n\n需要引入头文件:\n\n`#import <SystemConfiguration/CaptiveNetwork.h>`\n\n```objectivec\n//获取 WiFi 信息\n- (NSDictionary *)fetchSSIDInfo {\n    NSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();\n    if (!ifs) {\n        return nil;\n    }\n    NSDictionary *info = nil;\n    for (NSString *ifnam in ifs) {\n        info = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);\n        if (info && [info count]) { break; }\n    }\n    return info;\n}\n```\n\n#### 30. 获取广播地址、本机地址、子网掩码、端口信息\n需要引入头文件:\n\n`#import <ifaddrs.h>`\n`#import <arpa/inet.h>`\n\n```objectivec\n//获取广播地址、本机地址、子网掩码、端口信息\n- (NSMutableDictionary *)getLocalInfoForCurrentWiFi {\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    // retrieve the current interfaces - returns 0 on success\n    success = getifaddrs(&interfaces);\n    if (success == 0) {\n        // Loop through linked list of interfaces\n        temp_addr = interfaces;\n        //*/\n        while(temp_addr != NULL) {\n            if(temp_addr->ifa_addr->sa_family == AF_INET) {\n                // Check if interface is en0 which is the wifi connection on the iPhone\n                if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {\n                    //广播地址\n                    NSString *broadcast = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_dstaddr)->sin_addr)];\n                    if (broadcast) {\n                        [dict setObject:broadcast forKey:@\"broadcast\"];\n                    }\n//                    NSLog(@\"broadcast address--%@\",broadcast);\n                    //本机地址\n                    NSString *localIp = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];\n                    if (localIp) {\n                        [dict setObject:localIp forKey:@\"localIp\"];\n                    }\n//                    NSLog(@\"local device ip--%@\",localIp);\n                    //子网掩码地址\n                    NSString *netmask = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_netmask)->sin_addr)];\n                    if (netmask) {\n                        [dict setObject:netmask forKey:@\"netmask\"];\n                    }\n//                    NSLog(@\"netmask--%@\",netmask);\n                    //--en0 端口地址\n                    NSString *interface = [NSString stringWithUTF8String:temp_addr->ifa_name];\n                    if (interface) {\n                        [dict setObject:interface forKey:@\"interface\"];\n                    }\n//                    NSLog(@\"interface--%@\",interface);\n                    return dict;\n                }\n            }\n            temp_addr = temp_addr->ifa_next;\n        }\n    }\n    // Free memory\n    freeifaddrs(interfaces);\n    return dict;\n}\n```\n\n\n\n\n\n\n","source":"_posts/iOS常用工具方法.md","raw":"---\ntitle: iOS常用工具方法\ndate: 2017-06-03 22:47:26\ncategories: \n\t- iOS合集\n---\n####  1. 获取磁盘总空间大小\n\n```objectivec\n//磁盘总空间\n+ (CGFloat)diskOfAllSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@\"error: %@\", error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n```\n\n####  2. 获取磁盘可用空间大小\n\n```objectivec\n//磁盘可用空间\n+ (CGFloat)diskOfFreeSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@\"error: %@\", error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemFreeSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n```\n####  3. 获取指定路径下某个文件的大小\n\n```objectivec\n//获取文件大小\n+ (long long)fileSizeAtPath:(NSString *)filePath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:filePath]) return 0;\n    return [[fileManager attributesOfItemAtPath:filePath error:nil] fileSize];\n}\n```\n\n####  4. 获取文件夹下所有文件的大小\n\n```objectivec\n//获取文件夹下所有文件的大小\n+ (long long)folderSizeAtPath:(NSString *)folderPath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:folderPath]) return 0;\n    NSEnumerator *filesEnumerator = [[fileManager subpathsAtPath:folderPath] objectEnumerator];\n    NSString *fileName;\n    long long folerSize = 0;\n    while ((fileName = [filesEnumerator nextObject]) != nil) {\n        NSString *filePath = [folderPath stringByAppendingPathComponent:fileName];\n        folerSize += [self fileSizeAtPath:filePath];\n    }\n    return folerSize;\n}\n```\n\n####   5. 获取字符串(或汉字)首字母\n\n```objectivec\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n```\n\n####   5. 获取字符串(或汉字)首字母\n\n```objectivec\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n```\n\n####   6. 将字符串数组按照元素首字母顺序进行排序分组\n\n```objectivec\n//将字符串数组按照元素首字母顺序进行排序分组\n+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array{\n    if (array.count == 0) {\n        return nil;\n    }\n    for (id obj in array) {\n        if (![obj isKindOfClass:[NSString class]]) {\n            return nil;\n        }\n    }\n    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];\n    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];\n    //创建27个分组数组\n    for (int i = 0; i < indexedCollation.sectionTitles.count; i++) {\n        NSMutableArray *obj = [NSMutableArray array];\n        [objects addObject:obj];\n    }\n    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];\n    //按字母顺序进行分组\n    NSInteger lastIndex = -1;\n    for (int i = 0; i < array.count; i++) {\n        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];\n        [[objects objectAtIndex:index] addObject:array[i]];\n        lastIndex = index;\n    }\n    //去掉空数组\n    for (int i = 0; i < objects.count; i++) {\n        NSMutableArray *obj = objects[i];\n        if (obj.count == 0) {\n            [objects removeObject:obj];\n        }\n    }\n    //获取索引字母\n    for (NSMutableArray *obj in objects) {\n        NSString *str = obj[0];\n        NSString *key = [self firstCharacterWithString:str];\n        [keys addObject:key];\n    }\n    NSMutableDictionary *dic = [NSMutableDictionary dictionary];\n    [dic setObject:objects forKey:keys];\n    return dic;\n}\n\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n\n```\n##### 使用如下:\n```objectivec\nNSArray *arr = @[@\"guangzhou\", @\"shanghai\", @\"北京\", @\"henan\", @\"hainan\"];\nNSDictionary *dic = [Utilities dictionaryOrderByCharacterWithOriginalArray:arr];\nNSLog(@\"\\n\\ndic: %@\", dic);\n```\n![结果](http://upload-images.jianshu.io/upload_images/1803339-a63d16ad6cccc312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####  7. 获取当前时间\n\n```objectivec\n//获取当前时间\n//format: @\"yyyy-MM-dd HH:mm:ss\"、@\"yyyy年MM月dd日 HH时mm分ss秒\"\n+ (NSString *)currentDateWithFormat:(NSString *)format{\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:format];\n    return [dateFormatter stringFromDate:[NSDate date]];\n}\n```\n####  8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等\n\n```objectivec\n/**\n *  计算上次日期距离现在多久\n *\n *  @param lastTime    上次日期(需要和格式对应)\n *  @param format1     上次日期格式\n *  @param currentTime 最近日期(需要和格式对应)\n *  @param format2     最近日期格式\n *\n *  @return xx分钟前、xx小时前、xx天前\n */\n+ (NSString *)timeIntervalFromLastTime:(NSString *)lastTime\n                        lastTimeFormat:(NSString *)format1\n                         ToCurrentTime:(NSString *)currentTime\n                     currentTimeFormat:(NSString *)format2{\n    //上次时间\n    NSDateFormatter *dateFormatter1 = [[NSDateFormatter alloc]init];\n    dateFormatter1.dateFormat = format1;\n    NSDate *lastDate = [dateFormatter1 dateFromString:lastTime];\n    //当前时间\n    NSDateFormatter *dateFormatter2 = [[NSDateFormatter alloc]init];\n    dateFormatter2.dateFormat = format2;\n    NSDate *currentDate = [dateFormatter2 dateFromString:currentTime];\n    return [Utilities timeIntervalFromLastTime:lastDate ToCurrentTime:currentDate];\n}\n\n+ (NSString *)timeIntervalFromLastTime:(NSDate *)lastTime ToCurrentTime:(NSDate *)currentTime{\n    NSTimeZone *timeZone = [NSTimeZone systemTimeZone];\n    //上次时间\n    NSDate *lastDate = [lastTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:lastTime]];\n    //当前时间\n    NSDate *currentDate = [currentTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:currentTime]];\n    //时间间隔\n    NSInteger intevalTime = [currentDate timeIntervalSinceReferenceDate] - [lastDate timeIntervalSinceReferenceDate];\n\n    //秒、分、小时、天、月、年\n    NSInteger minutes = intevalTime / 60;\n    NSInteger hours = intevalTime / 60 / 60;\n    NSInteger day = intevalTime / 60 / 60 / 24;\n    NSInteger month = intevalTime / 60 / 60 / 24 / 30;\n    NSInteger yers = intevalTime / 60 / 60 / 24 / 365;\n\n    if (minutes <= 10) {\n        return  @\"刚刚\";\n    }else if (minutes < 60){\n        return [NSString stringWithFormat: @\"%ld分钟前\",(long)minutes];\n    }else if (hours < 24){\n        return [NSString stringWithFormat: @\"%ld小时前\",(long)hours];\n    }else if (day < 30){\n        return [NSString stringWithFormat: @\"%ld天前\",(long)day];\n    }else if (month < 12){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @\"M月d日\";\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }else if (yers >= 1){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @\"yyyy年M月d日\";\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }\n    return @\"\";\n}\n```\n\n#### 使用如下:\n\n```objectivec\nNSLog(@\"\\n\\nresult: %@\", [Utilities timeIntervalFromLastTime:@\"2015年12月8日 15:50\"\n                                           lastTimeFormat:@\"yyyy年MM月dd日 HH:mm\"\n                                            ToCurrentTime:@\"2015/12/08 16:12\"\n                                        currentTimeFormat:@\"yyyy/MM/dd HH:mm\"]);\n```\n\n输出结果如下:\n![结果](http://upload-images.jianshu.io/upload_images/1803339-591e3b7e5982b1b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####  9. 判断手机号码格式是否正确\n\n```objectivec\n//判断手机号码格式是否正确\n+ (BOOL)valiMobile:(NSString *)mobile{\n    mobile = [mobile stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n    if (mobile.length != 11)\n    {\n        return NO;\n    }else{\n        /**\n         * 移动号段正则表达式\n         */\n        NSString *CM_NUM = @\"^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))\\\\d{8}|(1705)\\\\d{7}$\";\n        /**\n         * 联通号段正则表达式\n         */\n        NSString *CU_NUM = @\"^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))\\\\d{8}|(1709)\\\\d{7}$\";\n        /**\n         * 电信号段正则表达式\n         */\n        NSString *CT_NUM = @\"^((133)|(153)|(177)|(18[0,1,9]))\\\\d{8}$\";\n        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CM_NUM];\n        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];\n        NSPredicate *pred2 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CU_NUM];\n        BOOL isMatch2 = [pred2 evaluateWithObject:mobile];\n        NSPredicate *pred3 = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", CT_NUM];\n        BOOL isMatch3 = [pred3 evaluateWithObject:mobile];\n\n        if (isMatch1 || isMatch2 || isMatch3) {\n            return YES;\n        }else{\n            return NO;\n        }\n    }\n}\n```\n\n#### 10. 判断邮箱格式是否正确\n\n```objectivec\n//利用正则表达式验证\n+ (BOOL)isAvailableEmail:(NSString *)email {\n    NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";\n    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", emailRegex];\n    return [emailTest evaluateWithObject:email];\n}\n```\n\n#### 11. 将十六进制颜色转换为 UIColor 对象\n\n```objectivec\n//将十六进制颜色转换为 UIColor 对象\n+ (UIColor *)colorWithHexString:(NSString *)color{\n    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];\n    // String should be 6 or 8 characters\n    if ([cString length] < 6) {\n        return [UIColor clearColor];\n    }\n    // strip \"0X\" or \"#\" if it appears\n    if ([cString hasPrefix:@\"0X\"])\n        cString = [cString substringFromIndex:2];\n    if ([cString hasPrefix:@\"#\"])\n        cString = [cString substringFromIndex:1];\n    if ([cString length] != 6)\n        return [UIColor clearColor];\n    // Separate into r, g, b substrings\n    NSRange range;\n    range.location = 0;\n    range.length = 2;\n    //r\n    NSString *rString = [cString substringWithRange:range];\n    //g\n    range.location = 2;\n    NSString *gString = [cString substringWithRange:range];\n    //b\n    range.location = 4;\n    NSString *bString = [cString substringWithRange:range];\n    // Scan values\n    unsigned int r, g, b;\n    [[NSScanner scannerWithString:rString] scanHexInt:&r];\n    [[NSScanner scannerWithString:gString] scanHexInt:&g];\n    [[NSScanner scannerWithString:bString] scanHexInt:&b];\n    return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];\n}\n```\n\n#### 12. 对图片进行滤镜处理\n\n```objectivec\n#pragma mark - 对图片进行滤镜处理\n// 怀旧 --> CIPhotoEffectInstant                         单色 --> CIPhotoEffectMono\n// 黑白 --> CIPhotoEffectNoir                            褪色 --> CIPhotoEffectFade\n// 色调 --> CIPhotoEffectTonal                           冲印 --> CIPhotoEffectProcess\n// 岁月 --> CIPhotoEffectTransfer                        铬黄 --> CIPhotoEffectChrome\n// CILinearToSRGBToneCurve, CISRGBToneCurveToLinear, CIGaussianBlur, CIBoxBlur, CIDiscBlur, CISepiaTone, CIDepthOfField\n+ (UIImage *)filterWithOriginalImage:(UIImage *)image filterName:(NSString *)name{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:name];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n```\n#### 13. 对图片进行模糊处理\n```objectivec\n#pragma mark - 对图片进行模糊处理\n// CIGaussianBlur ---> 高斯模糊\n// CIBoxBlur      ---> 均值模糊(Available in iOS 9.0 and later)\n// CIDiscBlur     ---> 环形卷积模糊(Available in iOS 9.0 and later)\n// CIMedianFilter ---> 中值模糊, 用于消除图像噪点, 无需设置radius(Available in iOS 9.0 and later)\n// CIMotionBlur   ---> 运动模糊, 用于模拟相机移动拍摄时的扫尾效果(Available in iOS 9.0 and later)\n+ (UIImage *)blurWithOriginalImage:(UIImage *)image blurName:(NSString *)name radius:(NSInteger)radius{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter;\n    if (name.length != 0) {\n        filter = [CIFilter filterWithName:name];\n        [filter setValue:inputImage forKey:kCIInputImageKey];\n        if (![name isEqualToString:@\"CIMedianFilter\"]) {\n            [filter setValue:@(radius) forKey:@\"inputRadius\"];\n        }\n        CIImage *result = [filter valueForKey:kCIOutputImageKey];\n        CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n        UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n        CGImageRelease(cgImage);\n        return resultImage;\n    }else{\n        return nil;\n    }\n}\n```\n\n#### 14. 调整图片饱和度、亮度、对比度\n```objectivec\n/**\n *  调整图片饱和度, 亮度, 对比度\n *\n *  @param image      目标图片\n *  @param saturation 饱和度\n *  @param brightness 亮度: -1.0 ~ 1.0\n *  @param contrast   对比度\n *\n */\n+ (UIImage *)colorControlsWithOriginalImage:(UIImage *)image\n                                 saturation:(CGFloat)saturation\n                                 brightness:(CGFloat)brightness\n                                   contrast:(CGFloat)contrast{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:@\"CIColorControls\"];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n\n    [filter setValue:@(saturation) forKey:@\"inputSaturation\"];\n    [filter setValue:@(brightness) forKey:@\"inputBrightness\"];\n    [filter setValue:@(contrast) forKey:@\"inputContrast\"];\n\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n```\n\n#### 15. 创建一张实时模糊效果 View (毛玻璃效果)\n```objectivec\n//Avilable in iOS 8.0 and later\n+ (UIVisualEffectView *)effectViewWithFrame:(CGRect)frame{\n    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];\n    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];\n    effectView.frame = frame;\n    return effectView;\n}\n```\n\n#### 16. 全屏截图\n```objectivec\n//全屏截图\n+ (UIImage *)shotScreen{\n    UIWindow *window = [UIApplication sharedApplication].keyWindow;\n    UIGraphicsBeginImageContext(window.bounds.size);\n    [window.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n\n```\n\n#### 17. 截取一张 view 生成图片\n```objectivec\n//截取view生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view{\n    UIGraphicsBeginImageContext(view.bounds.size);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n#### 18. 截取view中某个区域生成一张图片\n```objectivec\n//截取view中某个区域生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view scope:(CGRect)scope{\n    CGImageRef imageRef = CGImageCreateWithImageInRect([self shotWithView:view].CGImage, scope);\n    UIGraphicsBeginImageContext(scope.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGRect rect = CGRectMake(0, 0, scope.size.width, scope.size.height);\n    CGContextTranslateCTM(context, 0, rect.size.height);//下移\n    CGContextScaleCTM(context, 1.0f, -1.0f);//上翻\n    CGContextDrawImage(context, rect, imageRef);\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    CGImageRelease(imageRef);\n    CGContextRelease(context);\n    return image;\n}\n```\n#### 19. 压缩图片到指定尺寸大小\n```objectivec\n//压缩图片到指定尺寸大小\n+ (UIImage *)compressOriginalImage:(UIImage *)image toSize:(CGSize)size{\n    UIImage *resultImage = image;\n    UIGraphicsBeginImageContext(size);\n    [resultImage drawInRect:CGRectMake(0, 0, size.width, size.height)];\n    UIGraphicsEndImageContext();\n    return resultImage;\n}\n```\n#### 20. 压缩图片到指定文件大小\n```objectivec\n//压缩图片到指定文件大小\n+ (NSData *)compressOriginalImage:(UIImage *)image toMaxDataSizeKBytes:(CGFloat)size{\n    NSData *data = UIImageJPEGRepresentation(image, 1.0);\n    CGFloat dataKBytes = data.length/1000.0;\n    CGFloat maxQuality = 0.9f;\n    CGFloat lastData = dataKBytes;\n    while (dataKBytes > size && maxQuality > 0.01f) {\n        maxQuality = maxQuality - 0.01f;\n        data = UIImageJPEGRepresentation(image, maxQuality);\n        dataKBytes = data.length/1000.0;\n        if (lastData == dataKBytes) {\n            break;\n        }else{\n            lastData = dataKBytes;\n        }\n    }\n    return data;\n}\n```\n\n#### 21. 获取设备 IP 地址\n\n需要先引入下头文件:\n\n`#import <ifaddrs.h>`\n`#import <arpa/inet.h>`\n\n```objectivec\n//获取设备 IP 地址\n+ (NSString *)getIPAddress {\n    NSString *address = @\"error\";\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    success = getifaddrs(&interfaces);\n    if (success == 0) {\n        temp_addr = interfaces;\n        while(temp_addr != NULL) {\n            if(temp_addr->ifa_addr->sa_family == AF_INET) {\n                if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {\n                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];\n                }\n            }\n            temp_addr = temp_addr->ifa_next;\n        }\n    }\n    freeifaddrs(interfaces);\n    return address;\n}\n```\n#### 22. 判断字符串中是否含有空格\n\n```objectivec\n+ (BOOL)isHaveSpaceInString:(NSString *)string{\n    NSRange _range = [string rangeOfString:@\" \"];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n```\n\n#### 23. 判断字符串中是否含有某个字符串\n\n\n```objectivec\n+ (BOOL)isHaveString:(NSString *)string1 InString:(NSString *)string2{\n    NSRange _range = [string2 rangeOfString:string1];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n```\n\n#### 24. 判断字符串中是否含有中文\n\n```objectivec\n+ (BOOL)isHaveChineseInString:(NSString *)string{\n    for(NSInteger i = 0; i < [string length]; i++){\n        int a = [string characterAtIndex:i];\n        if (a > 0x4e00 && a < 0x9fff) {\n            return YES;\n        }\n    }\n    return NO;\n}\n```\n\n#### 25. 判断字符串是否全部为数字\n\n```objectivec\n+ (BOOL)isAllNum:(NSString *)string{\n    unichar c;\n    for (int i=0; i<string.length; i++) {\n        c=[string characterAtIndex:i];\n        if (!isdigit(c)) {\n            return NO;\n        }\n    }\n    return YES;\n}\n```\n\n#### 26. 绘制虚线\n\n```objectivec\n/*\n  ** lineFrame:     虚线的 frame\n  ** length:        虚线中短线的宽度\n  ** spacing:       虚线中短线之间的间距\n  ** color:         虚线中短线的颜色\n*/\n+ (UIView *)createDashedLineWithFrame:(CGRect)lineFrame\n                           lineLength:(int)length\n                          lineSpacing:(int)spacing\n                            lineColor:(UIColor *)color{\n    UIView *dashedLine = [[UIView alloc] initWithFrame:lineFrame];\n    dashedLine.backgroundColor = [UIColor clearColor];\n    CAShapeLayer *shapeLayer = [CAShapeLayer layer];\n    [shapeLayer setBounds:dashedLine.bounds];\n    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(dashedLine.frame) / 2, CGRectGetHeight(dashedLine.frame))];\n    [shapeLayer setFillColor:[UIColor clearColor].CGColor];\n    [shapeLayer setStrokeColor:color.CGColor];\n    [shapeLayer setLineWidth:CGRectGetHeight(dashedLine.frame)];\n    [shapeLayer setLineJoin:kCALineJoinRound];\n    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:length], [NSNumber numberWithInt:spacing], nil]];\n    CGMutablePathRef path = CGPathCreateMutable();\n    CGPathMoveToPoint(path, NULL, 0, 0);\n    CGPathAddLineToPoint(path, NULL, CGRectGetWidth(dashedLine.frame), 0);\n    [shapeLayer setPath:path];\n    CGPathRelease(path);\n    [dashedLine.layer addSublayer:shapeLayer];\n    return dashedLine;\n}\n```\n\n#### 27. 将字典对象转换为 JSON 字符串\n\n```objectivec\n+ (NSString *)jsonPrettyStringEncoded:(NSDictionary *)dictionary{\n    if ([NSJSONSerialization isValidJSONObject:dictionary ]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:NSJSONWritingPrettyPrinted error:&error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n```\n\n#### 28.将数组对象转换为 JSON 字符串\n\n```objectivec\n+ (NSString *)jsonPrettyStringEncoded:(NSArray *)array{\n    if ([NSJSONSerialization isValidJSONObject:array]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:array options:NSJSONWritingPrettyPrinted error:&error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n```\n\n#### 29. 获取 WiFi 信息\n\n需要引入头文件:\n\n`#import <SystemConfiguration/CaptiveNetwork.h>`\n\n```objectivec\n//获取 WiFi 信息\n- (NSDictionary *)fetchSSIDInfo {\n    NSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();\n    if (!ifs) {\n        return nil;\n    }\n    NSDictionary *info = nil;\n    for (NSString *ifnam in ifs) {\n        info = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);\n        if (info && [info count]) { break; }\n    }\n    return info;\n}\n```\n\n#### 30. 获取广播地址、本机地址、子网掩码、端口信息\n需要引入头文件:\n\n`#import <ifaddrs.h>`\n`#import <arpa/inet.h>`\n\n```objectivec\n//获取广播地址、本机地址、子网掩码、端口信息\n- (NSMutableDictionary *)getLocalInfoForCurrentWiFi {\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    // retrieve the current interfaces - returns 0 on success\n    success = getifaddrs(&interfaces);\n    if (success == 0) {\n        // Loop through linked list of interfaces\n        temp_addr = interfaces;\n        //*/\n        while(temp_addr != NULL) {\n            if(temp_addr->ifa_addr->sa_family == AF_INET) {\n                // Check if interface is en0 which is the wifi connection on the iPhone\n                if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {\n                    //广播地址\n                    NSString *broadcast = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_dstaddr)->sin_addr)];\n                    if (broadcast) {\n                        [dict setObject:broadcast forKey:@\"broadcast\"];\n                    }\n//                    NSLog(@\"broadcast address--%@\",broadcast);\n                    //本机地址\n                    NSString *localIp = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];\n                    if (localIp) {\n                        [dict setObject:localIp forKey:@\"localIp\"];\n                    }\n//                    NSLog(@\"local device ip--%@\",localIp);\n                    //子网掩码地址\n                    NSString *netmask = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_netmask)->sin_addr)];\n                    if (netmask) {\n                        [dict setObject:netmask forKey:@\"netmask\"];\n                    }\n//                    NSLog(@\"netmask--%@\",netmask);\n                    //--en0 端口地址\n                    NSString *interface = [NSString stringWithUTF8String:temp_addr->ifa_name];\n                    if (interface) {\n                        [dict setObject:interface forKey:@\"interface\"];\n                    }\n//                    NSLog(@\"interface--%@\",interface);\n                    return dict;\n                }\n            }\n            temp_addr = temp_addr->ifa_next;\n        }\n    }\n    // Free memory\n    freeifaddrs(interfaces);\n    return dict;\n}\n```\n\n\n\n\n\n\n","slug":"iOS常用工具方法","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lt000j9quzpzc4o8fa","content":"<h4 id=\"1-获取磁盘总空间大小\"><a href=\"#1-获取磁盘总空间大小\" class=\"headerlink\" title=\"1. 获取磁盘总空间大小\"></a>1. 获取磁盘总空间大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//磁盘总空间</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>diskOfAllSizeMBytes<span class=\"token punctuation\">{</span>\n    CGFloat size <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    NSError <span class=\"token operator\">*</span>error<span class=\"token punctuation\">;</span>\n    NSDictionary <span class=\"token operator\">*</span>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSFileManager defaultManager<span class=\"token punctuation\">]</span> attributesOfFileSystemForPath<span class=\"token punctuation\">:</span><span class=\"token function\">NSHomeDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> error<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> DEBUG</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"error: %@\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        NSNumber <span class=\"token operator\">*</span>number <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dic objectForKey<span class=\"token punctuation\">:</span>NSFileSystemSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>number floatValue<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"2-获取磁盘可用空间大小\"><a href=\"#2-获取磁盘可用空间大小\" class=\"headerlink\" title=\"2. 获取磁盘可用空间大小\"></a>2. 获取磁盘可用空间大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//磁盘可用空间</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>diskOfFreeSizeMBytes<span class=\"token punctuation\">{</span>\n    CGFloat size <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    NSError <span class=\"token operator\">*</span>error<span class=\"token punctuation\">;</span>\n    NSDictionary <span class=\"token operator\">*</span>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSFileManager defaultManager<span class=\"token punctuation\">]</span> attributesOfFileSystemForPath<span class=\"token punctuation\">:</span><span class=\"token function\">NSHomeDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> error<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> DEBUG</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"error: %@\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        NSNumber <span class=\"token operator\">*</span>number <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dic objectForKey<span class=\"token punctuation\">:</span>NSFileSystemFreeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>number floatValue<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"3-获取指定路径下某个文件的大小\"><a href=\"#3-获取指定路径下某个文件的大小\" class=\"headerlink\" title=\"3. 获取指定路径下某个文件的大小\"></a>3. 获取指定路径下某个文件的大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取文件大小</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>fileSizeAtPath<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>filePath<span class=\"token punctuation\">{</span>\n    NSFileManager <span class=\"token operator\">*</span>fileManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSFileManager defaultManager<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>fileManager fileExistsAtPath<span class=\"token punctuation\">:</span>filePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>fileManager attributesOfItemAtPath<span class=\"token punctuation\">:</span>filePath error<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span> fileSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"4-获取文件夹下所有文件的大小\"><a href=\"#4-获取文件夹下所有文件的大小\" class=\"headerlink\" title=\"4. 获取文件夹下所有文件的大小\"></a>4. 获取文件夹下所有文件的大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取文件夹下所有文件的大小</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>folderSizeAtPath<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>folderPath<span class=\"token punctuation\">{</span>\n    NSFileManager <span class=\"token operator\">*</span>fileManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSFileManager defaultManager<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>fileManager fileExistsAtPath<span class=\"token punctuation\">:</span>folderPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    NSEnumerator <span class=\"token operator\">*</span>filesEnumerator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>fileManager subpathsAtPath<span class=\"token punctuation\">:</span>folderPath<span class=\"token punctuation\">]</span> objectEnumerator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>fileName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> folerSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>filesEnumerator nextObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSString <span class=\"token operator\">*</span>filePath <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>folderPath stringByAppendingPathComponent<span class=\"token punctuation\">:</span>fileName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        folerSize <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> fileSizeAtPath<span class=\"token punctuation\">:</span>filePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> folerSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"5-获取字符串-或汉字-首字母\"><a href=\"#5-获取字符串-或汉字-首字母\" class=\"headerlink\" title=\"5. 获取字符串(或汉字)首字母\"></a>5. 获取字符串(或汉字)首字母</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取字符串(或汉字)首字母</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>firstCharacterWithString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    NSMutableString <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableString stringWithString<span class=\"token punctuation\">:</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformMandarinLatin<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformStripDiacritics<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>pingyin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>str capitalizedString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>pingyin substringToIndex<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"5-获取字符串-或汉字-首字母-1\"><a href=\"#5-获取字符串-或汉字-首字母-1\" class=\"headerlink\" title=\"5. 获取字符串(或汉字)首字母\"></a>5. 获取字符串(或汉字)首字母</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取字符串(或汉字)首字母</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>firstCharacterWithString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    NSMutableString <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableString stringWithString<span class=\"token punctuation\">:</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformMandarinLatin<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformStripDiacritics<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>pingyin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>str capitalizedString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>pingyin substringToIndex<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"6-将字符串数组按照元素首字母顺序进行排序分组\"><a href=\"#6-将字符串数组按照元素首字母顺序进行排序分组\" class=\"headerlink\" title=\"6. 将字符串数组按照元素首字母顺序进行排序分组\"></a>6. 将字符串数组按照元素首字母顺序进行排序分组</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//将字符串数组按照元素首字母顺序进行排序分组</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSDictionary <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dictionaryOrderByCharacterWithOriginalArray<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>array<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>id obj <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>obj isKindOfClass<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSString class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    UILocalizedIndexedCollation <span class=\"token operator\">*</span>indexedCollation <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UILocalizedIndexedCollation currentCollation<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSMutableArray <span class=\"token operator\">*</span>objects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithCapacity<span class=\"token punctuation\">:</span>indexedCollation<span class=\"token punctuation\">.</span>sectionTitles<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建27个分组数组</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> indexedCollation<span class=\"token punctuation\">.</span>sectionTitles<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSMutableArray <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>objects addObject<span class=\"token punctuation\">:</span>obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    NSMutableArray <span class=\"token operator\">*</span>keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithCapacity<span class=\"token punctuation\">:</span>objects<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//按字母顺序进行分组</span>\n    NSInteger lastIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSInteger index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>indexedCollation sectionForObject<span class=\"token punctuation\">:</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> collationStringSelector<span class=\"token punctuation\">:</span><span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>uppercaseString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>objects objectAtIndex<span class=\"token punctuation\">:</span>index<span class=\"token punctuation\">]</span> addObject<span class=\"token punctuation\">:</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        lastIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//去掉空数组</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> objects<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSMutableArray <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>objects removeObject<span class=\"token punctuation\">:</span>obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取索引字母</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>NSMutableArray <span class=\"token operator\">*</span>obj <span class=\"token keyword\">in</span> objects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSString <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        NSString <span class=\"token operator\">*</span>key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> firstCharacterWithString<span class=\"token punctuation\">:</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>keys addObject<span class=\"token punctuation\">:</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    NSMutableDictionary <span class=\"token operator\">*</span>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableDictionary dictionary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>dic setObject<span class=\"token punctuation\">:</span>objects forKey<span class=\"token punctuation\">:</span>keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dic<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//获取字符串(或汉字)首字母</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>firstCharacterWithString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    NSMutableString <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableString stringWithString<span class=\"token punctuation\">:</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformMandarinLatin<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFStringTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CFMutableStringRef<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> kCFStringTransformStripDiacritics<span class=\"token punctuation\">,</span> NO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>pingyin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>str capitalizedString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>pingyin substringToIndex<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"使用如下\"><a href=\"#使用如下\" class=\"headerlink\" title=\"使用如下:\"></a>使用如下:</h5><pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSArray <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"guangzhou\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"shanghai\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"北京\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"henan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"hainan\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSDictionary <span class=\"token operator\">*</span>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Utilities dictionaryOrderByCharacterWithOriginalArray<span class=\"token punctuation\">:</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"\\n\\ndic: %@\"</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1803339-a63d16ad6cccc312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果\"></p>\n<h4 id=\"7-获取当前时间\"><a href=\"#7-获取当前时间\" class=\"headerlink\" title=\"7. 获取当前时间\"></a>7. 获取当前时间</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取当前时间</span>\n<span class=\"token comment\" spellcheck=\"true\">//format: @\"yyyy-MM-dd HH:mm:ss\"、@\"yyyy年MM月dd日 HH时mm分ss秒\"</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>currentDateWithFormat<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>format<span class=\"token punctuation\">{</span>\n    NSDateFormatter <span class=\"token operator\">*</span>dateFormatter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSDateFormatter alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>dateFormatter setDateFormat<span class=\"token punctuation\">:</span>format<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>dateFormatter stringFromDate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSDate date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"8-计算上次日期距离现在多久-如-xx-小时前、xx-分钟前等\"><a href=\"#8-计算上次日期距离现在多久-如-xx-小时前、xx-分钟前等\" class=\"headerlink\" title=\"8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等\"></a>8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">/**\n *  计算上次日期距离现在多久\n *\n *  @param lastTime    上次日期(需要和格式对应)\n *  @param format1     上次日期格式\n *  @param currentTime 最近日期(需要和格式对应)\n *  @param format2     最近日期格式\n *\n *  @return xx分钟前、xx小时前、xx天前\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>timeIntervalFromLastTime<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastTime\n                        lastTimeFormat<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>format1\n                         ToCurrentTime<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>currentTime\n                     currentTimeFormat<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>format2<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//上次时间</span>\n    NSDateFormatter <span class=\"token operator\">*</span>dateFormatter1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSDateFormatter alloc<span class=\"token punctuation\">]</span>init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dateFormatter1<span class=\"token punctuation\">.</span>dateFormat <span class=\"token operator\">=</span> format1<span class=\"token punctuation\">;</span>\n    NSDate <span class=\"token operator\">*</span>lastDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dateFormatter1 dateFromString<span class=\"token punctuation\">:</span>lastTime<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//当前时间</span>\n    NSDateFormatter <span class=\"token operator\">*</span>dateFormatter2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSDateFormatter alloc<span class=\"token punctuation\">]</span>init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dateFormatter2<span class=\"token punctuation\">.</span>dateFormat <span class=\"token operator\">=</span> format2<span class=\"token punctuation\">;</span>\n    NSDate <span class=\"token operator\">*</span>currentDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dateFormatter2 dateFromString<span class=\"token punctuation\">:</span>currentTime<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Utilities timeIntervalFromLastTime<span class=\"token punctuation\">:</span>lastDate ToCurrentTime<span class=\"token punctuation\">:</span>currentDate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>timeIntervalFromLastTime<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSDate <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastTime ToCurrentTime<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSDate <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>currentTime<span class=\"token punctuation\">{</span>\n    NSTimeZone <span class=\"token operator\">*</span>timeZone <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSTimeZone systemTimeZone<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//上次时间</span>\n    NSDate <span class=\"token operator\">*</span>lastDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>lastTime dateByAddingTimeInterval<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>timeZone secondsFromGMTForDate<span class=\"token punctuation\">:</span>lastTime<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//当前时间</span>\n    NSDate <span class=\"token operator\">*</span>currentDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>currentTime dateByAddingTimeInterval<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>timeZone secondsFromGMTForDate<span class=\"token punctuation\">:</span>currentTime<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//时间间隔</span>\n    NSInteger intevalTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>currentDate timeIntervalSinceReferenceDate<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>lastDate timeIntervalSinceReferenceDate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//秒、分、小时、天、月、年</span>\n    NSInteger minutes <span class=\"token operator\">=</span> intevalTime <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    NSInteger hours <span class=\"token operator\">=</span> intevalTime <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    NSInteger day <span class=\"token operator\">=</span> intevalTime <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    NSInteger month <span class=\"token operator\">=</span> intevalTime <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span> <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    NSInteger yers <span class=\"token operator\">=</span> intevalTime <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span> <span class=\"token operator\">/</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>  <span class=\"token string\">@\"刚刚\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>NSString stringWithFormat<span class=\"token punctuation\">:</span> <span class=\"token string\">@\"%ld分钟前\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>minutes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>NSString stringWithFormat<span class=\"token punctuation\">:</span> <span class=\"token string\">@\"%ld小时前\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>hours<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>NSString stringWithFormat<span class=\"token punctuation\">:</span> <span class=\"token string\">@\"%ld天前\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>day<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NSDateFormatter <span class=\"token operator\">*</span> df <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSDateFormatter alloc<span class=\"token punctuation\">]</span>init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        df<span class=\"token punctuation\">.</span>dateFormat <span class=\"token operator\">=</span> <span class=\"token string\">@\"M月d日\"</span><span class=\"token punctuation\">;</span>\n        NSString <span class=\"token operator\">*</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>df stringFromDate<span class=\"token punctuation\">:</span>lastDate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yers <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NSDateFormatter <span class=\"token operator\">*</span> df <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSDateFormatter alloc<span class=\"token punctuation\">]</span>init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        df<span class=\"token punctuation\">.</span>dateFormat <span class=\"token operator\">=</span> <span class=\"token string\">@\"yyyy年M月d日\"</span><span class=\"token punctuation\">;</span>\n        NSString <span class=\"token operator\">*</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>df stringFromDate<span class=\"token punctuation\">:</span>lastDate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">@\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"使用如下-1\"><a href=\"#使用如下-1\" class=\"headerlink\" title=\"使用如下:\"></a>使用如下:</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"\\n\\nresult: %@\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Utilities timeIntervalFromLastTime<span class=\"token punctuation\">:</span><span class=\"token string\">@\"2015年12月8日 15:50\"</span>\n                                           lastTimeFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"yyyy年MM月dd日 HH:mm\"</span>\n                                            ToCurrentTime<span class=\"token punctuation\">:</span><span class=\"token string\">@\"2015/12/08 16:12\"</span>\n                                        currentTimeFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"yyyy/MM/dd HH:mm\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>输出结果如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-591e3b7e5982b1b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果\"></p>\n<h4 id=\"9-判断手机号码格式是否正确\"><a href=\"#9-判断手机号码格式是否正确\" class=\"headerlink\" title=\"9. 判断手机号码格式是否正确\"></a>9. 判断手机号码格式是否正确</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//判断手机号码格式是否正确</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>valiMobile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mobile<span class=\"token punctuation\">{</span>\n    mobile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mobile stringByReplacingOccurrencesOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\" \"</span> withString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mobile<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 移动号段正则表达式\n         */</span>\n        NSString <span class=\"token operator\">*</span>CM_NUM <span class=\"token operator\">=</span> <span class=\"token string\">@\"^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))\\\\d{8}|(1705)\\\\d{7}$\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 联通号段正则表达式\n         */</span>\n        NSString <span class=\"token operator\">*</span>CU_NUM <span class=\"token operator\">=</span> <span class=\"token string\">@\"^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))\\\\d{8}|(1709)\\\\d{7}$\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 电信号段正则表达式\n         */</span>\n        NSString <span class=\"token operator\">*</span>CT_NUM <span class=\"token operator\">=</span> <span class=\"token string\">@\"^((133)|(153)|(177)|(18[0,1,9]))\\\\d{8}$\"</span><span class=\"token punctuation\">;</span>\n        NSPredicate <span class=\"token operator\">*</span>pred1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"SELF MATCHES %@\"</span><span class=\"token punctuation\">,</span> CM_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        BOOL isMatch1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pred1 evaluateWithObject<span class=\"token punctuation\">:</span>mobile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        NSPredicate <span class=\"token operator\">*</span>pred2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"SELF MATCHES %@\"</span><span class=\"token punctuation\">,</span> CU_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        BOOL isMatch2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pred2 evaluateWithObject<span class=\"token punctuation\">:</span>mobile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        NSPredicate <span class=\"token operator\">*</span>pred3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"SELF MATCHES %@\"</span><span class=\"token punctuation\">,</span> CT_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        BOOL isMatch3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pred3 evaluateWithObject<span class=\"token punctuation\">:</span>mobile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMatch1 <span class=\"token operator\">||</span> isMatch2 <span class=\"token operator\">||</span> isMatch3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"10-判断邮箱格式是否正确\"><a href=\"#10-判断邮箱格式是否正确\" class=\"headerlink\" title=\"10. 判断邮箱格式是否正确\"></a>10. 判断邮箱格式是否正确</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//利用正则表达式验证</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>isAvailableEmail<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>email <span class=\"token punctuation\">{</span>\n    NSString <span class=\"token operator\">*</span>emailRegex <span class=\"token operator\">=</span> <span class=\"token string\">@\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\"</span><span class=\"token punctuation\">;</span>\n    NSPredicate <span class=\"token operator\">*</span>emailTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSPredicate predicateWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"SELF MATCHES %@\"</span><span class=\"token punctuation\">,</span> emailRegex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>emailTest evaluateWithObject<span class=\"token punctuation\">:</span>email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"11-将十六进制颜色转换为-UIColor-对象\"><a href=\"#11-将十六进制颜色转换为-UIColor-对象\" class=\"headerlink\" title=\"11. 将十六进制颜色转换为 UIColor 对象\"></a>11. 将十六进制颜色转换为 UIColor 对象</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//将十六进制颜色转换为 UIColor 对象</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIColor <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>colorWithHexString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>color<span class=\"token punctuation\">{</span>\n    NSString <span class=\"token operator\">*</span>cString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>color stringByTrimmingCharactersInSet<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSCharacterSet whitespaceAndNewlineCharacterSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> uppercaseString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// String should be 6 or 8 characters</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cString length<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>UIColor clearColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// strip \"0X\" or \"#\" if it appears</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cString hasPrefix<span class=\"token punctuation\">:</span><span class=\"token string\">@\"0X\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        cString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cString substringFromIndex<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cString hasPrefix<span class=\"token punctuation\">:</span><span class=\"token string\">@\"#\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        cString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cString substringFromIndex<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cString length<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>UIColor clearColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Separate into r, g, b substrings</span>\n    NSRange range<span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//r</span>\n    NSString <span class=\"token operator\">*</span>rString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cString substringWithRange<span class=\"token punctuation\">:</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//g</span>\n    range<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>gString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cString substringWithRange<span class=\"token punctuation\">:</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//b</span>\n    range<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    NSString <span class=\"token operator\">*</span>bString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cString substringWithRange<span class=\"token punctuation\">:</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Scan values</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSScanner scannerWithString<span class=\"token punctuation\">:</span>rString<span class=\"token punctuation\">]</span> scanHexInt<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSScanner scannerWithString<span class=\"token punctuation\">:</span>gString<span class=\"token punctuation\">]</span> scanHexInt<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSScanner scannerWithString<span class=\"token punctuation\">:</span>bString<span class=\"token punctuation\">]</span> scanHexInt<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>UIColor colorWithRed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> r <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">)</span> green<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> g <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">)</span> blue<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> b <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">)</span> alpha<span class=\"token punctuation\">:</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"12-对图片进行滤镜处理\"><a href=\"#12-对图片进行滤镜处理\" class=\"headerlink\" title=\"12. 对图片进行滤镜处理\"></a>12. 对图片进行滤镜处理</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 对图片进行滤镜处理</span>\n<span class=\"token comment\" spellcheck=\"true\">// 怀旧 --> CIPhotoEffectInstant                         单色 --> CIPhotoEffectMono</span>\n<span class=\"token comment\" spellcheck=\"true\">// 黑白 --> CIPhotoEffectNoir                            褪色 --> CIPhotoEffectFade</span>\n<span class=\"token comment\" spellcheck=\"true\">// 色调 --> CIPhotoEffectTonal                           冲印 --> CIPhotoEffectProcess</span>\n<span class=\"token comment\" spellcheck=\"true\">// 岁月 --> CIPhotoEffectTransfer                        铬黄 --> CIPhotoEffectChrome</span>\n<span class=\"token comment\" spellcheck=\"true\">// CILinearToSRGBToneCurve, CISRGBToneCurveToLinear, CIGaussianBlur, CIBoxBlur, CIDiscBlur, CISepiaTone, CIDepthOfField</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>filterWithOriginalImage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>image filterName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name<span class=\"token punctuation\">{</span>\n    CIContext <span class=\"token operator\">*</span>context <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIContext contextWithOptions<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIImage <span class=\"token operator\">*</span>inputImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CIImage alloc<span class=\"token punctuation\">]</span> initWithImage<span class=\"token punctuation\">:</span>image<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIFilter <span class=\"token operator\">*</span>filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIFilter filterWithName<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span>inputImage forKey<span class=\"token punctuation\">:</span>kCIInputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIImage <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>filter valueForKey<span class=\"token punctuation\">:</span>kCIOutputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CGImageRef cgImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>context createCGImage<span class=\"token punctuation\">:</span>result fromRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>result extent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    UIImage <span class=\"token operator\">*</span>resultImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIImage imageWithCGImage<span class=\"token punctuation\">:</span>cgImage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGImageRelease</span><span class=\"token punctuation\">(</span>cgImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> resultImage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"13-对图片进行模糊处理\"><a href=\"#13-对图片进行模糊处理\" class=\"headerlink\" title=\"13. 对图片进行模糊处理\"></a>13. 对图片进行模糊处理</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> mark - 对图片进行模糊处理</span>\n<span class=\"token comment\" spellcheck=\"true\">// CIGaussianBlur ---> 高斯模糊</span>\n<span class=\"token comment\" spellcheck=\"true\">// CIBoxBlur      ---> 均值模糊(Available in iOS 9.0 and later)</span>\n<span class=\"token comment\" spellcheck=\"true\">// CIDiscBlur     ---> 环形卷积模糊(Available in iOS 9.0 and later)</span>\n<span class=\"token comment\" spellcheck=\"true\">// CIMedianFilter ---> 中值模糊, 用于消除图像噪点, 无需设置radius(Available in iOS 9.0 and later)</span>\n<span class=\"token comment\" spellcheck=\"true\">// CIMotionBlur   ---> 运动模糊, 用于模拟相机移动拍摄时的扫尾效果(Available in iOS 9.0 and later)</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>blurWithOriginalImage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>image blurName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name radius<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">)</span>radius<span class=\"token punctuation\">{</span>\n    CIContext <span class=\"token operator\">*</span>context <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIContext contextWithOptions<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIImage <span class=\"token operator\">*</span>inputImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CIImage alloc<span class=\"token punctuation\">]</span> initWithImage<span class=\"token punctuation\">:</span>image<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIFilter <span class=\"token operator\">*</span>filter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIFilter filterWithName<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span>inputImage forKey<span class=\"token punctuation\">:</span>kCIInputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>name isEqualToString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"CIMedianFilter\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span> forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"inputRadius\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        CIImage <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>filter valueForKey<span class=\"token punctuation\">:</span>kCIOutputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        CGImageRef cgImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>context createCGImage<span class=\"token punctuation\">:</span>result fromRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>result extent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        UIImage <span class=\"token operator\">*</span>resultImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIImage imageWithCGImage<span class=\"token punctuation\">:</span>cgImage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">CGImageRelease</span><span class=\"token punctuation\">(</span>cgImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultImage<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"14-调整图片饱和度、亮度、对比度\"><a href=\"#14-调整图片饱和度、亮度、对比度\" class=\"headerlink\" title=\"14. 调整图片饱和度、亮度、对比度\"></a>14. 调整图片饱和度、亮度、对比度</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">/**\n *  调整图片饱和度, 亮度, 对比度\n *\n *  @param image      目标图片\n *  @param saturation 饱和度\n *  @param brightness 亮度: -1.0 ~ 1.0\n *  @param contrast   对比度\n *\n */</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>colorControlsWithOriginalImage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>image\n                                 saturation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>saturation\n                                 brightness<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>brightness\n                                   contrast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>contrast<span class=\"token punctuation\">{</span>\n    CIContext <span class=\"token operator\">*</span>context <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIContext contextWithOptions<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIImage <span class=\"token operator\">*</span>inputImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CIImage alloc<span class=\"token punctuation\">]</span> initWithImage<span class=\"token punctuation\">:</span>image<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CIFilter <span class=\"token operator\">*</span>filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CIFilter filterWithName<span class=\"token punctuation\">:</span><span class=\"token string\">@\"CIColorControls\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span>inputImage forKey<span class=\"token punctuation\">:</span>kCIInputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span>saturation<span class=\"token punctuation\">)</span> forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"inputSaturation\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span>brightness<span class=\"token punctuation\">)</span> forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"inputBrightness\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>filter setValue<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span>contrast<span class=\"token punctuation\">)</span> forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"inputContrast\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    CIImage <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>filter valueForKey<span class=\"token punctuation\">:</span>kCIOutputImageKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CGImageRef cgImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>context createCGImage<span class=\"token punctuation\">:</span>result fromRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>result extent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    UIImage <span class=\"token operator\">*</span>resultImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIImage imageWithCGImage<span class=\"token punctuation\">:</span>cgImage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGImageRelease</span><span class=\"token punctuation\">(</span>cgImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> resultImage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"15-创建一张实时模糊效果-View-毛玻璃效果\"><a href=\"#15-创建一张实时模糊效果-View-毛玻璃效果\" class=\"headerlink\" title=\"15. 创建一张实时模糊效果 View (毛玻璃效果)\"></a>15. 创建一张实时模糊效果 View (毛玻璃效果)</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//Avilable in iOS 8.0 and later</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIVisualEffectView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>effectViewWithFrame<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span>frame<span class=\"token punctuation\">{</span>\n    UIBlurEffect <span class=\"token operator\">*</span>effect <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIBlurEffect effectWithStyle<span class=\"token punctuation\">:</span>UIBlurEffectStyleLight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    UIVisualEffectView <span class=\"token operator\">*</span>effectView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIVisualEffectView alloc<span class=\"token punctuation\">]</span> initWithEffect<span class=\"token punctuation\">:</span>effect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    effectView<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> effectView<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"16-全屏截图\"><a href=\"#16-全屏截图\" class=\"headerlink\" title=\"16. 全屏截图\"></a>16. 全屏截图</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//全屏截图</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>shotScreen<span class=\"token punctuation\">{</span>\n    UIWindow <span class=\"token operator\">*</span>window <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIApplication sharedApplication<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keyWindow<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsBeginImageContext</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>layer renderInContext<span class=\"token punctuation\">:</span><span class=\"token function\">UIGraphicsGetCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    UIImage <span class=\"token operator\">*</span>image <span class=\"token operator\">=</span> <span class=\"token function\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsEndImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> image<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"17-截取一张-view-生成图片\"><a href=\"#17-截取一张-view-生成图片\" class=\"headerlink\" title=\"17. 截取一张 view 生成图片\"></a>17. 截取一张 view 生成图片</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//截取view生成一张图片</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>shotWithView<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>view<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">UIGraphicsBeginImageContext</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>view<span class=\"token punctuation\">.</span>layer renderInContext<span class=\"token punctuation\">:</span><span class=\"token function\">UIGraphicsGetCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    UIImage <span class=\"token operator\">*</span>image <span class=\"token operator\">=</span> <span class=\"token function\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsEndImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> image<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"18-截取view中某个区域生成一张图片\"><a href=\"#18-截取view中某个区域生成一张图片\" class=\"headerlink\" title=\"18. 截取view中某个区域生成一张图片\"></a>18. 截取view中某个区域生成一张图片</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//截取view中某个区域生成一张图片</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>shotWithView<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>view scope<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span>scope<span class=\"token punctuation\">{</span>\n    CGImageRef imageRef <span class=\"token operator\">=</span> <span class=\"token function\">CGImageCreateWithImageInRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> shotWithView<span class=\"token punctuation\">:</span>view<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>CGImage<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsBeginImageContext</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CGContextRef context <span class=\"token operator\">=</span> <span class=\"token function\">UIGraphicsGetCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CGRect rect <span class=\"token operator\">=</span> <span class=\"token function\">CGRectMake</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGContextTranslateCTM</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//下移</span>\n    <span class=\"token function\">CGContextScaleCTM</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//上翻</span>\n    <span class=\"token function\">CGContextDrawImage</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> imageRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    UIImage <span class=\"token operator\">*</span>image <span class=\"token operator\">=</span> <span class=\"token function\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsEndImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGImageRelease</span><span class=\"token punctuation\">(</span>imageRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGContextRelease</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> image<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"19-压缩图片到指定尺寸大小\"><a href=\"#19-压缩图片到指定尺寸大小\" class=\"headerlink\" title=\"19. 压缩图片到指定尺寸大小\"></a>19. 压缩图片到指定尺寸大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//压缩图片到指定尺寸大小</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>compressOriginalImage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>image toSize<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGSize<span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">{</span>\n    UIImage <span class=\"token operator\">*</span>resultImage <span class=\"token operator\">=</span> image<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsBeginImageContext</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>resultImage drawInRect<span class=\"token punctuation\">:</span><span class=\"token function\">CGRectMake</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UIGraphicsEndImageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> resultImage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"20-压缩图片到指定文件大小\"><a href=\"#20-压缩图片到指定文件大小\" class=\"headerlink\" title=\"20. 压缩图片到指定文件大小\"></a>20. 压缩图片到指定文件大小</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//压缩图片到指定文件大小</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSData <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>compressOriginalImage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIImage <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>image toMaxDataSizeKBytes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">{</span>\n    NSData <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">UIImageJPEGRepresentation</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CGFloat dataKBytes <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">;</span>\n    CGFloat maxQuality <span class=\"token operator\">=</span> <span class=\"token number\">0.9f</span><span class=\"token punctuation\">;</span>\n    CGFloat lastData <span class=\"token operator\">=</span> dataKBytes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>dataKBytes <span class=\"token operator\">></span> size <span class=\"token operator\">&amp;&amp;</span> maxQuality <span class=\"token operator\">></span> <span class=\"token number\">0.01f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        maxQuality <span class=\"token operator\">=</span> maxQuality <span class=\"token operator\">-</span> <span class=\"token number\">0.01f</span><span class=\"token punctuation\">;</span>\n        data <span class=\"token operator\">=</span> <span class=\"token function\">UIImageJPEGRepresentation</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> maxQuality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataKBytes <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastData <span class=\"token operator\">==</span> dataKBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            lastData <span class=\"token operator\">=</span> dataKBytes<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"21-获取设备-IP-地址\"><a href=\"#21-获取设备-IP-地址\" class=\"headerlink\" title=\"21. 获取设备 IP 地址\"></a>21. 获取设备 IP 地址</h4><p>需要先引入下头文件:</p>\n<p><code>#import &lt;ifaddrs.h&gt;</code><br><code>#import &lt;arpa/inet.h&gt;</code></p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取设备 IP 地址</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>getIPAddress <span class=\"token punctuation\">{</span>\n    NSString <span class=\"token operator\">*</span>address <span class=\"token operator\">=</span> <span class=\"token string\">@\"error\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ifaddrs <span class=\"token operator\">*</span>interfaces <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ifaddrs <span class=\"token operator\">*</span>temp_addr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> success <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    success <span class=\"token operator\">=</span> <span class=\"token function\">getifaddrs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        temp_addr <span class=\"token operator\">=</span> interfaces<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp_addr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp_addr<span class=\"token operator\">-></span>ifa_addr<span class=\"token operator\">-></span>sa_family <span class=\"token operator\">==</span> AF_INET<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span>temp_addr<span class=\"token operator\">-></span>ifa_name<span class=\"token punctuation\">]</span> isEqualToString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"en0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    address <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr_in <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>temp_addr<span class=\"token operator\">-></span>ifa_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            temp_addr <span class=\"token operator\">=</span> temp_addr<span class=\"token operator\">-></span>ifa_next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">freeifaddrs</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"22-判断字符串中是否含有空格\"><a href=\"#22-判断字符串中是否含有空格\" class=\"headerlink\" title=\"22. 判断字符串中是否含有空格\"></a>22. 判断字符串中是否含有空格</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>isHaveSpaceInString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    NSRange _range <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>string rangeOfString<span class=\"token punctuation\">:</span><span class=\"token string\">@\" \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_range<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"23-判断字符串中是否含有某个字符串\"><a href=\"#23-判断字符串中是否含有某个字符串\" class=\"headerlink\" title=\"23. 判断字符串中是否含有某个字符串\"></a>23. 判断字符串中是否含有某个字符串</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>isHaveString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string1 InString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string2<span class=\"token punctuation\">{</span>\n    NSRange _range <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>string2 rangeOfString<span class=\"token punctuation\">:</span>string1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_range<span class=\"token punctuation\">.</span>location <span class=\"token operator\">!=</span> NSNotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"24-判断字符串中是否含有中文\"><a href=\"#24-判断字符串中是否含有中文\" class=\"headerlink\" title=\"24. 判断字符串中是否含有中文\"></a>24. 判断字符串中是否含有中文</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>isHaveChineseInString<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>NSInteger i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span>string length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>string characterAtIndex<span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0x4e00</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x9fff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"25-判断字符串是否全部为数字\"><a href=\"#25-判断字符串是否全部为数字\" class=\"headerlink\" title=\"25. 判断字符串是否全部为数字\"></a>25. 判断字符串是否全部为数字</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>isAllNum<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>string<span class=\"token punctuation\">{</span>\n    unichar c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>string characterAtIndex<span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"26-绘制虚线\"><a href=\"#26-绘制虚线\" class=\"headerlink\" title=\"26. 绘制虚线\"></a>26. 绘制虚线</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">/*\n  ** lineFrame:     虚线的 frame\n  ** length:        虚线中短线的宽度\n  ** spacing:       虚线中短线之间的间距\n  ** color:         虚线中短线的颜色\n*/</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>createDashedLineWithFrame<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span>lineFrame\n                           lineLength<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>length\n                          lineSpacing<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>spacing\n                            lineColor<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>UIColor <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>color<span class=\"token punctuation\">{</span>\n    UIView <span class=\"token operator\">*</span>dashedLine <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> initWithFrame<span class=\"token punctuation\">:</span>lineFrame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dashedLine<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor clearColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CAShapeLayer <span class=\"token operator\">*</span>shapeLayer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CAShapeLayer layer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setBounds<span class=\"token punctuation\">:</span>dashedLine<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setPosition<span class=\"token punctuation\">:</span><span class=\"token function\">CGPointMake</span><span class=\"token punctuation\">(</span><span class=\"token function\">CGRectGetWidth</span><span class=\"token punctuation\">(</span>dashedLine<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">CGRectGetHeight</span><span class=\"token punctuation\">(</span>dashedLine<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setFillColor<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>UIColor clearColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>CGColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setStrokeColor<span class=\"token punctuation\">:</span>color<span class=\"token punctuation\">.</span>CGColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setLineWidth<span class=\"token punctuation\">:</span><span class=\"token function\">CGRectGetHeight</span><span class=\"token punctuation\">(</span>dashedLine<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setLineJoin<span class=\"token punctuation\">:</span>kCALineJoinRound<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setLineDashPattern<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSArray arrayWithObjects<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSNumber numberWithInt<span class=\"token punctuation\">:</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>NSNumber numberWithInt<span class=\"token punctuation\">:</span>spacing<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    CGMutablePathRef path <span class=\"token operator\">=</span> <span class=\"token function\">CGPathCreateMutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGPathMoveToPoint</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGPathAddLineToPoint</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token function\">CGRectGetWidth</span><span class=\"token punctuation\">(</span>dashedLine<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>shapeLayer setPath<span class=\"token punctuation\">:</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CGPathRelease</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>dashedLine<span class=\"token punctuation\">.</span>layer addSublayer<span class=\"token punctuation\">:</span>shapeLayer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dashedLine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"27-将字典对象转换为-JSON-字符串\"><a href=\"#27-将字典对象转换为-JSON-字符串\" class=\"headerlink\" title=\"27. 将字典对象转换为 JSON 字符串\"></a>27. 将字典对象转换为 JSON 字符串</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>jsonPrettyStringEncoded<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSDictionary <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dictionary<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>NSJSONSerialization isValidJSONObject<span class=\"token punctuation\">:</span>dictionary <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSError <span class=\"token operator\">*</span>error<span class=\"token punctuation\">;</span>\n        NSData <span class=\"token operator\">*</span>jsonData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSJSONSerialization dataWithJSONObject<span class=\"token punctuation\">:</span>dictionary options<span class=\"token punctuation\">:</span>NSJSONWritingPrettyPrinted error<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            NSString <span class=\"token operator\">*</span>json <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithData<span class=\"token punctuation\">:</span>jsonData encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"28-将数组对象转换为-JSON-字符串\"><a href=\"#28-将数组对象转换为-JSON-字符串\" class=\"headerlink\" title=\"28.将数组对象转换为 JSON 字符串\"></a>28.将数组对象转换为 JSON 字符串</h4><pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>jsonPrettyStringEncoded<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>array<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>NSJSONSerialization isValidJSONObject<span class=\"token punctuation\">:</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        NSError <span class=\"token operator\">*</span>error<span class=\"token punctuation\">;</span>\n        NSData <span class=\"token operator\">*</span>jsonData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSJSONSerialization dataWithJSONObject<span class=\"token punctuation\">:</span>array options<span class=\"token punctuation\">:</span>NSJSONWritingPrettyPrinted error<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            NSString <span class=\"token operator\">*</span>json <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithData<span class=\"token punctuation\">:</span>jsonData encoding<span class=\"token punctuation\">:</span>NSUTF8StringEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"29-获取-WiFi-信息\"><a href=\"#29-获取-WiFi-信息\" class=\"headerlink\" title=\"29. 获取 WiFi 信息\"></a>29. 获取 WiFi 信息</h4><p>需要引入头文件:</p>\n<p><code>#import &lt;SystemConfiguration/CaptiveNetwork.h&gt;</code></p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取 WiFi 信息</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSDictionary <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fetchSSIDInfo <span class=\"token punctuation\">{</span>\n    NSArray <span class=\"token operator\">*</span>ifs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__bridge_transfer NSArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CNCopySupportedInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    NSDictionary <span class=\"token operator\">*</span>info <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span>ifnam <span class=\"token keyword\">in</span> ifs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__bridge_transfer NSDictionary <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CNCopyCurrentNetworkInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__bridge CFStringRef<span class=\"token punctuation\">)</span>ifnam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span>info count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"30-获取广播地址、本机地址、子网掩码、端口信息\"><a href=\"#30-获取广播地址、本机地址、子网掩码、端口信息\" class=\"headerlink\" title=\"30. 获取广播地址、本机地址、子网掩码、端口信息\"></a>30. 获取广播地址、本机地址、子网掩码、端口信息</h4><p>需要引入头文件:</p>\n<p><code>#import &lt;ifaddrs.h&gt;</code><br><code>#import &lt;arpa/inet.h&gt;</code></p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//获取广播地址、本机地址、子网掩码、端口信息</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSMutableDictionary <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>getLocalInfoForCurrentWiFi <span class=\"token punctuation\">{</span>\n    NSMutableDictionary <span class=\"token operator\">*</span>dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableDictionary dictionary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ifaddrs <span class=\"token operator\">*</span>interfaces <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ifaddrs <span class=\"token operator\">*</span>temp_addr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> success <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// retrieve the current interfaces - returns 0 on success</span>\n    success <span class=\"token operator\">=</span> <span class=\"token function\">getifaddrs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Loop through linked list of interfaces</span>\n        temp_addr <span class=\"token operator\">=</span> interfaces<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//*/</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp_addr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp_addr<span class=\"token operator\">-></span>ifa_addr<span class=\"token operator\">-></span>sa_family <span class=\"token operator\">==</span> AF_INET<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Check if interface is en0 which is the wifi connection on the iPhone</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span>temp_addr<span class=\"token operator\">-></span>ifa_name<span class=\"token punctuation\">]</span> isEqualToString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"en0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//广播地址</span>\n                    NSString <span class=\"token operator\">*</span>broadcast <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr_in <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>temp_addr<span class=\"token operator\">-></span>ifa_dstaddr<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>broadcast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span>dict setObject<span class=\"token punctuation\">:</span>broadcast forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"broadcast\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//                    NSLog(@\"broadcast address--%@\",broadcast);</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//本机地址</span>\n                    NSString <span class=\"token operator\">*</span>localIp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr_in <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>temp_addr<span class=\"token operator\">-></span>ifa_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localIp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span>dict setObject<span class=\"token punctuation\">:</span>localIp forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"localIp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//                    NSLog(@\"local device ip--%@\",localIp);</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//子网掩码地址</span>\n                    NSString <span class=\"token operator\">*</span>netmask <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr_in <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>temp_addr<span class=\"token operator\">-></span>ifa_netmask<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>netmask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span>dict setObject<span class=\"token punctuation\">:</span>netmask forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"netmask\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//                    NSLog(@\"netmask--%@\",netmask);</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//--en0 端口地址</span>\n                    NSString <span class=\"token operator\">*</span>interface <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span>temp_addr<span class=\"token operator\">-></span>ifa_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interface<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span>dict setObject<span class=\"token punctuation\">:</span>interface forKey<span class=\"token punctuation\">:</span><span class=\"token string\">@\"interface\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//                    NSLog(@\"interface--%@\",interface);</span>\n                    <span class=\"token keyword\">return</span> dict<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            temp_addr <span class=\"token operator\">=</span> temp_addr<span class=\"token operator\">-></span>ifa_next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Free memory</span>\n    <span class=\"token function\">freeifaddrs</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dict<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-获取磁盘总空间大小\"><a href=\"#1-获取磁盘总空间大小\" class=\"headerlink\" title=\"1. 获取磁盘总空间大小\"></a>1. 获取磁盘总空间大小</h4><pre><code class=\"objectivec\">//磁盘总空间\n+ (CGFloat)diskOfAllSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&amp;error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@&quot;error: %@&quot;, error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n</code></pre>\n<h4 id=\"2-获取磁盘可用空间大小\"><a href=\"#2-获取磁盘可用空间大小\" class=\"headerlink\" title=\"2. 获取磁盘可用空间大小\"></a>2. 获取磁盘可用空间大小</h4><pre><code class=\"objectivec\">//磁盘可用空间\n+ (CGFloat)diskOfFreeSizeMBytes{\n    CGFloat size = 0.0;\n    NSError *error;\n    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&amp;error];\n    if (error) {\n#ifdef DEBUG\n        NSLog(@&quot;error: %@&quot;, error.localizedDescription);\n#endif\n    }else{\n        NSNumber *number = [dic objectForKey:NSFileSystemFreeSize];\n        size = [number floatValue]/1024/1024;\n    }\n    return size;\n}\n</code></pre>\n<h4 id=\"3-获取指定路径下某个文件的大小\"><a href=\"#3-获取指定路径下某个文件的大小\" class=\"headerlink\" title=\"3. 获取指定路径下某个文件的大小\"></a>3. 获取指定路径下某个文件的大小</h4><pre><code class=\"objectivec\">//获取文件大小\n+ (long long)fileSizeAtPath:(NSString *)filePath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:filePath]) return 0;\n    return [[fileManager attributesOfItemAtPath:filePath error:nil] fileSize];\n}\n</code></pre>\n<h4 id=\"4-获取文件夹下所有文件的大小\"><a href=\"#4-获取文件夹下所有文件的大小\" class=\"headerlink\" title=\"4. 获取文件夹下所有文件的大小\"></a>4. 获取文件夹下所有文件的大小</h4><pre><code class=\"objectivec\">//获取文件夹下所有文件的大小\n+ (long long)folderSizeAtPath:(NSString *)folderPath{\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    if (![fileManager fileExistsAtPath:folderPath]) return 0;\n    NSEnumerator *filesEnumerator = [[fileManager subpathsAtPath:folderPath] objectEnumerator];\n    NSString *fileName;\n    long long folerSize = 0;\n    while ((fileName = [filesEnumerator nextObject]) != nil) {\n        NSString *filePath = [folderPath stringByAppendingPathComponent:fileName];\n        folerSize += [self fileSizeAtPath:filePath];\n    }\n    return folerSize;\n}\n</code></pre>\n<h4 id=\"5-获取字符串-或汉字-首字母\"><a href=\"#5-获取字符串-或汉字-首字母\" class=\"headerlink\" title=\"5. 获取字符串(或汉字)首字母\"></a>5. 获取字符串(或汉字)首字母</h4><pre><code class=\"objectivec\">//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n</code></pre>\n<h4 id=\"5-获取字符串-或汉字-首字母-1\"><a href=\"#5-获取字符串-或汉字-首字母-1\" class=\"headerlink\" title=\"5. 获取字符串(或汉字)首字母\"></a>5. 获取字符串(或汉字)首字母</h4><pre><code class=\"objectivec\">//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n</code></pre>\n<h4 id=\"6-将字符串数组按照元素首字母顺序进行排序分组\"><a href=\"#6-将字符串数组按照元素首字母顺序进行排序分组\" class=\"headerlink\" title=\"6. 将字符串数组按照元素首字母顺序进行排序分组\"></a>6. 将字符串数组按照元素首字母顺序进行排序分组</h4><pre><code class=\"objectivec\">//将字符串数组按照元素首字母顺序进行排序分组\n+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array{\n    if (array.count == 0) {\n        return nil;\n    }\n    for (id obj in array) {\n        if (![obj isKindOfClass:[NSString class]]) {\n            return nil;\n        }\n    }\n    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];\n    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];\n    //创建27个分组数组\n    for (int i = 0; i &lt; indexedCollation.sectionTitles.count; i++) {\n        NSMutableArray *obj = [NSMutableArray array];\n        [objects addObject:obj];\n    }\n    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];\n    //按字母顺序进行分组\n    NSInteger lastIndex = -1;\n    for (int i = 0; i &lt; array.count; i++) {\n        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];\n        [[objects objectAtIndex:index] addObject:array[i]];\n        lastIndex = index;\n    }\n    //去掉空数组\n    for (int i = 0; i &lt; objects.count; i++) {\n        NSMutableArray *obj = objects[i];\n        if (obj.count == 0) {\n            [objects removeObject:obj];\n        }\n    }\n    //获取索引字母\n    for (NSMutableArray *obj in objects) {\n        NSString *str = obj[0];\n        NSString *key = [self firstCharacterWithString:str];\n        [keys addObject:key];\n    }\n    NSMutableDictionary *dic = [NSMutableDictionary dictionary];\n    [dic setObject:objects forKey:keys];\n    return dic;\n}\n\n//获取字符串(或汉字)首字母\n+ (NSString *)firstCharacterWithString:(NSString *)string{\n    NSMutableString *str = [NSMutableString stringWithString:string];\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);\n    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);\n    NSString *pingyin = [str capitalizedString];\n    return [pingyin substringToIndex:1];\n}\n</code></pre>\n<h5 id=\"使用如下\"><a href=\"#使用如下\" class=\"headerlink\" title=\"使用如下:\"></a>使用如下:</h5><pre><code class=\"objectivec\">NSArray *arr = @[@&quot;guangzhou&quot;, @&quot;shanghai&quot;, @&quot;北京&quot;, @&quot;henan&quot;, @&quot;hainan&quot;];\nNSDictionary *dic = [Utilities dictionaryOrderByCharacterWithOriginalArray:arr];\nNSLog(@&quot;\\n\\ndic: %@&quot;, dic);\n</code></pre>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1803339-a63d16ad6cccc312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果\"></p>\n<h4 id=\"7-获取当前时间\"><a href=\"#7-获取当前时间\" class=\"headerlink\" title=\"7. 获取当前时间\"></a>7. 获取当前时间</h4><pre><code class=\"objectivec\">//获取当前时间\n//format: @&quot;yyyy-MM-dd HH:mm:ss&quot;、@&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;\n+ (NSString *)currentDateWithFormat:(NSString *)format{\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:format];\n    return [dateFormatter stringFromDate:[NSDate date]];\n}\n</code></pre>\n<h4 id=\"8-计算上次日期距离现在多久-如-xx-小时前、xx-分钟前等\"><a href=\"#8-计算上次日期距离现在多久-如-xx-小时前、xx-分钟前等\" class=\"headerlink\" title=\"8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等\"></a>8. 计算上次日期距离现在多久, 如 xx 小时前、xx 分钟前等</h4><pre><code class=\"objectivec\">/**\n *  计算上次日期距离现在多久\n *\n *  @param lastTime    上次日期(需要和格式对应)\n *  @param format1     上次日期格式\n *  @param currentTime 最近日期(需要和格式对应)\n *  @param format2     最近日期格式\n *\n *  @return xx分钟前、xx小时前、xx天前\n */\n+ (NSString *)timeIntervalFromLastTime:(NSString *)lastTime\n                        lastTimeFormat:(NSString *)format1\n                         ToCurrentTime:(NSString *)currentTime\n                     currentTimeFormat:(NSString *)format2{\n    //上次时间\n    NSDateFormatter *dateFormatter1 = [[NSDateFormatter alloc]init];\n    dateFormatter1.dateFormat = format1;\n    NSDate *lastDate = [dateFormatter1 dateFromString:lastTime];\n    //当前时间\n    NSDateFormatter *dateFormatter2 = [[NSDateFormatter alloc]init];\n    dateFormatter2.dateFormat = format2;\n    NSDate *currentDate = [dateFormatter2 dateFromString:currentTime];\n    return [Utilities timeIntervalFromLastTime:lastDate ToCurrentTime:currentDate];\n}\n\n+ (NSString *)timeIntervalFromLastTime:(NSDate *)lastTime ToCurrentTime:(NSDate *)currentTime{\n    NSTimeZone *timeZone = [NSTimeZone systemTimeZone];\n    //上次时间\n    NSDate *lastDate = [lastTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:lastTime]];\n    //当前时间\n    NSDate *currentDate = [currentTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:currentTime]];\n    //时间间隔\n    NSInteger intevalTime = [currentDate timeIntervalSinceReferenceDate] - [lastDate timeIntervalSinceReferenceDate];\n\n    //秒、分、小时、天、月、年\n    NSInteger minutes = intevalTime / 60;\n    NSInteger hours = intevalTime / 60 / 60;\n    NSInteger day = intevalTime / 60 / 60 / 24;\n    NSInteger month = intevalTime / 60 / 60 / 24 / 30;\n    NSInteger yers = intevalTime / 60 / 60 / 24 / 365;\n\n    if (minutes &lt;= 10) {\n        return  @&quot;刚刚&quot;;\n    }else if (minutes &lt; 60){\n        return [NSString stringWithFormat: @&quot;%ld分钟前&quot;,(long)minutes];\n    }else if (hours &lt; 24){\n        return [NSString stringWithFormat: @&quot;%ld小时前&quot;,(long)hours];\n    }else if (day &lt; 30){\n        return [NSString stringWithFormat: @&quot;%ld天前&quot;,(long)day];\n    }else if (month &lt; 12){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @&quot;M月d日&quot;;\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }else if (yers &gt;= 1){\n        NSDateFormatter * df =[[NSDateFormatter alloc]init];\n        df.dateFormat = @&quot;yyyy年M月d日&quot;;\n        NSString * time = [df stringFromDate:lastDate];\n        return time;\n    }\n    return @&quot;&quot;;\n}\n</code></pre>\n<h4 id=\"使用如下-1\"><a href=\"#使用如下-1\" class=\"headerlink\" title=\"使用如下:\"></a>使用如下:</h4><pre><code class=\"objectivec\">NSLog(@&quot;\\n\\nresult: %@&quot;, [Utilities timeIntervalFromLastTime:@&quot;2015年12月8日 15:50&quot;\n                                           lastTimeFormat:@&quot;yyyy年MM月dd日 HH:mm&quot;\n                                            ToCurrentTime:@&quot;2015/12/08 16:12&quot;\n                                        currentTimeFormat:@&quot;yyyy/MM/dd HH:mm&quot;]);\n</code></pre>\n<p>输出结果如下:<br><img src=\"http://upload-images.jianshu.io/upload_images/1803339-591e3b7e5982b1b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果\"></p>\n<h4 id=\"9-判断手机号码格式是否正确\"><a href=\"#9-判断手机号码格式是否正确\" class=\"headerlink\" title=\"9. 判断手机号码格式是否正确\"></a>9. 判断手机号码格式是否正确</h4><pre><code class=\"objectivec\">//判断手机号码格式是否正确\n+ (BOOL)valiMobile:(NSString *)mobile{\n    mobile = [mobile stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];\n    if (mobile.length != 11)\n    {\n        return NO;\n    }else{\n        /**\n         * 移动号段正则表达式\n         */\n        NSString *CM_NUM = @&quot;^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))\\\\d{8}|(1705)\\\\d{7}$&quot;;\n        /**\n         * 联通号段正则表达式\n         */\n        NSString *CU_NUM = @&quot;^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))\\\\d{8}|(1709)\\\\d{7}$&quot;;\n        /**\n         * 电信号段正则表达式\n         */\n        NSString *CT_NUM = @&quot;^((133)|(153)|(177)|(18[0,1,9]))\\\\d{8}$&quot;;\n        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CM_NUM];\n        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];\n        NSPredicate *pred2 = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CU_NUM];\n        BOOL isMatch2 = [pred2 evaluateWithObject:mobile];\n        NSPredicate *pred3 = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CT_NUM];\n        BOOL isMatch3 = [pred3 evaluateWithObject:mobile];\n\n        if (isMatch1 || isMatch2 || isMatch3) {\n            return YES;\n        }else{\n            return NO;\n        }\n    }\n}\n</code></pre>\n<h4 id=\"10-判断邮箱格式是否正确\"><a href=\"#10-判断邮箱格式是否正确\" class=\"headerlink\" title=\"10. 判断邮箱格式是否正确\"></a>10. 判断邮箱格式是否正确</h4><pre><code class=\"objectivec\">//利用正则表达式验证\n+ (BOOL)isAvailableEmail:(NSString *)email {\n    NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}&quot;;\n    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];\n    return [emailTest evaluateWithObject:email];\n}\n</code></pre>\n<h4 id=\"11-将十六进制颜色转换为-UIColor-对象\"><a href=\"#11-将十六进制颜色转换为-UIColor-对象\" class=\"headerlink\" title=\"11. 将十六进制颜色转换为 UIColor 对象\"></a>11. 将十六进制颜色转换为 UIColor 对象</h4><pre><code class=\"objectivec\">//将十六进制颜色转换为 UIColor 对象\n+ (UIColor *)colorWithHexString:(NSString *)color{\n    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];\n    // String should be 6 or 8 characters\n    if ([cString length] &lt; 6) {\n        return [UIColor clearColor];\n    }\n    // strip &quot;0X&quot; or &quot;#&quot; if it appears\n    if ([cString hasPrefix:@&quot;0X&quot;])\n        cString = [cString substringFromIndex:2];\n    if ([cString hasPrefix:@&quot;#&quot;])\n        cString = [cString substringFromIndex:1];\n    if ([cString length] != 6)\n        return [UIColor clearColor];\n    // Separate into r, g, b substrings\n    NSRange range;\n    range.location = 0;\n    range.length = 2;\n    //r\n    NSString *rString = [cString substringWithRange:range];\n    //g\n    range.location = 2;\n    NSString *gString = [cString substringWithRange:range];\n    //b\n    range.location = 4;\n    NSString *bString = [cString substringWithRange:range];\n    // Scan values\n    unsigned int r, g, b;\n    [[NSScanner scannerWithString:rString] scanHexInt:&amp;r];\n    [[NSScanner scannerWithString:gString] scanHexInt:&amp;g];\n    [[NSScanner scannerWithString:bString] scanHexInt:&amp;b];\n    return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];\n}\n</code></pre>\n<h4 id=\"12-对图片进行滤镜处理\"><a href=\"#12-对图片进行滤镜处理\" class=\"headerlink\" title=\"12. 对图片进行滤镜处理\"></a>12. 对图片进行滤镜处理</h4><pre><code class=\"objectivec\">#pragma mark - 对图片进行滤镜处理\n// 怀旧 --&gt; CIPhotoEffectInstant                         单色 --&gt; CIPhotoEffectMono\n// 黑白 --&gt; CIPhotoEffectNoir                            褪色 --&gt; CIPhotoEffectFade\n// 色调 --&gt; CIPhotoEffectTonal                           冲印 --&gt; CIPhotoEffectProcess\n// 岁月 --&gt; CIPhotoEffectTransfer                        铬黄 --&gt; CIPhotoEffectChrome\n// CILinearToSRGBToneCurve, CISRGBToneCurveToLinear, CIGaussianBlur, CIBoxBlur, CIDiscBlur, CISepiaTone, CIDepthOfField\n+ (UIImage *)filterWithOriginalImage:(UIImage *)image filterName:(NSString *)name{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:name];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n</code></pre>\n<h4 id=\"13-对图片进行模糊处理\"><a href=\"#13-对图片进行模糊处理\" class=\"headerlink\" title=\"13. 对图片进行模糊处理\"></a>13. 对图片进行模糊处理</h4><pre><code class=\"objectivec\">#pragma mark - 对图片进行模糊处理\n// CIGaussianBlur ---&gt; 高斯模糊\n// CIBoxBlur      ---&gt; 均值模糊(Available in iOS 9.0 and later)\n// CIDiscBlur     ---&gt; 环形卷积模糊(Available in iOS 9.0 and later)\n// CIMedianFilter ---&gt; 中值模糊, 用于消除图像噪点, 无需设置radius(Available in iOS 9.0 and later)\n// CIMotionBlur   ---&gt; 运动模糊, 用于模拟相机移动拍摄时的扫尾效果(Available in iOS 9.0 and later)\n+ (UIImage *)blurWithOriginalImage:(UIImage *)image blurName:(NSString *)name radius:(NSInteger)radius{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter;\n    if (name.length != 0) {\n        filter = [CIFilter filterWithName:name];\n        [filter setValue:inputImage forKey:kCIInputImageKey];\n        if (![name isEqualToString:@&quot;CIMedianFilter&quot;]) {\n            [filter setValue:@(radius) forKey:@&quot;inputRadius&quot;];\n        }\n        CIImage *result = [filter valueForKey:kCIOutputImageKey];\n        CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n        UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n        CGImageRelease(cgImage);\n        return resultImage;\n    }else{\n        return nil;\n    }\n}\n</code></pre>\n<h4 id=\"14-调整图片饱和度、亮度、对比度\"><a href=\"#14-调整图片饱和度、亮度、对比度\" class=\"headerlink\" title=\"14. 调整图片饱和度、亮度、对比度\"></a>14. 调整图片饱和度、亮度、对比度</h4><pre><code class=\"objectivec\">/**\n *  调整图片饱和度, 亮度, 对比度\n *\n *  @param image      目标图片\n *  @param saturation 饱和度\n *  @param brightness 亮度: -1.0 ~ 1.0\n *  @param contrast   对比度\n *\n */\n+ (UIImage *)colorControlsWithOriginalImage:(UIImage *)image\n                                 saturation:(CGFloat)saturation\n                                 brightness:(CGFloat)brightness\n                                   contrast:(CGFloat)contrast{\n    CIContext *context = [CIContext contextWithOptions:nil];\n    CIImage *inputImage = [[CIImage alloc] initWithImage:image];\n    CIFilter *filter = [CIFilter filterWithName:@&quot;CIColorControls&quot;];\n    [filter setValue:inputImage forKey:kCIInputImageKey];\n\n    [filter setValue:@(saturation) forKey:@&quot;inputSaturation&quot;];\n    [filter setValue:@(brightness) forKey:@&quot;inputBrightness&quot;];\n    [filter setValue:@(contrast) forKey:@&quot;inputContrast&quot;];\n\n    CIImage *result = [filter valueForKey:kCIOutputImageKey];\n    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];\n    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];\n    CGImageRelease(cgImage);\n    return resultImage;\n}\n</code></pre>\n<h4 id=\"15-创建一张实时模糊效果-View-毛玻璃效果\"><a href=\"#15-创建一张实时模糊效果-View-毛玻璃效果\" class=\"headerlink\" title=\"15. 创建一张实时模糊效果 View (毛玻璃效果)\"></a>15. 创建一张实时模糊效果 View (毛玻璃效果)</h4><pre><code class=\"objectivec\">//Avilable in iOS 8.0 and later\n+ (UIVisualEffectView *)effectViewWithFrame:(CGRect)frame{\n    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];\n    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];\n    effectView.frame = frame;\n    return effectView;\n}\n</code></pre>\n<h4 id=\"16-全屏截图\"><a href=\"#16-全屏截图\" class=\"headerlink\" title=\"16. 全屏截图\"></a>16. 全屏截图</h4><pre><code class=\"objectivec\">//全屏截图\n+ (UIImage *)shotScreen{\n    UIWindow *window = [UIApplication sharedApplication].keyWindow;\n    UIGraphicsBeginImageContext(window.bounds.size);\n    [window.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n</code></pre>\n<h4 id=\"17-截取一张-view-生成图片\"><a href=\"#17-截取一张-view-生成图片\" class=\"headerlink\" title=\"17. 截取一张 view 生成图片\"></a>17. 截取一张 view 生成图片</h4><pre><code class=\"objectivec\">//截取view生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view{\n    UIGraphicsBeginImageContext(view.bounds.size);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n</code></pre>\n<h4 id=\"18-截取view中某个区域生成一张图片\"><a href=\"#18-截取view中某个区域生成一张图片\" class=\"headerlink\" title=\"18. 截取view中某个区域生成一张图片\"></a>18. 截取view中某个区域生成一张图片</h4><pre><code class=\"objectivec\">//截取view中某个区域生成一张图片\n+ (UIImage *)shotWithView:(UIView *)view scope:(CGRect)scope{\n    CGImageRef imageRef = CGImageCreateWithImageInRect([self shotWithView:view].CGImage, scope);\n    UIGraphicsBeginImageContext(scope.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGRect rect = CGRectMake(0, 0, scope.size.width, scope.size.height);\n    CGContextTranslateCTM(context, 0, rect.size.height);//下移\n    CGContextScaleCTM(context, 1.0f, -1.0f);//上翻\n    CGContextDrawImage(context, rect, imageRef);\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    CGImageRelease(imageRef);\n    CGContextRelease(context);\n    return image;\n}\n</code></pre>\n<h4 id=\"19-压缩图片到指定尺寸大小\"><a href=\"#19-压缩图片到指定尺寸大小\" class=\"headerlink\" title=\"19. 压缩图片到指定尺寸大小\"></a>19. 压缩图片到指定尺寸大小</h4><pre><code class=\"objectivec\">//压缩图片到指定尺寸大小\n+ (UIImage *)compressOriginalImage:(UIImage *)image toSize:(CGSize)size{\n    UIImage *resultImage = image;\n    UIGraphicsBeginImageContext(size);\n    [resultImage drawInRect:CGRectMake(0, 0, size.width, size.height)];\n    UIGraphicsEndImageContext();\n    return resultImage;\n}\n</code></pre>\n<h4 id=\"20-压缩图片到指定文件大小\"><a href=\"#20-压缩图片到指定文件大小\" class=\"headerlink\" title=\"20. 压缩图片到指定文件大小\"></a>20. 压缩图片到指定文件大小</h4><pre><code class=\"objectivec\">//压缩图片到指定文件大小\n+ (NSData *)compressOriginalImage:(UIImage *)image toMaxDataSizeKBytes:(CGFloat)size{\n    NSData *data = UIImageJPEGRepresentation(image, 1.0);\n    CGFloat dataKBytes = data.length/1000.0;\n    CGFloat maxQuality = 0.9f;\n    CGFloat lastData = dataKBytes;\n    while (dataKBytes &gt; size &amp;&amp; maxQuality &gt; 0.01f) {\n        maxQuality = maxQuality - 0.01f;\n        data = UIImageJPEGRepresentation(image, maxQuality);\n        dataKBytes = data.length/1000.0;\n        if (lastData == dataKBytes) {\n            break;\n        }else{\n            lastData = dataKBytes;\n        }\n    }\n    return data;\n}\n</code></pre>\n<h4 id=\"21-获取设备-IP-地址\"><a href=\"#21-获取设备-IP-地址\" class=\"headerlink\" title=\"21. 获取设备 IP 地址\"></a>21. 获取设备 IP 地址</h4><p>需要先引入下头文件:</p>\n<p><code>#import &lt;ifaddrs.h&gt;</code><br><code>#import &lt;arpa/inet.h&gt;</code></p>\n<pre><code class=\"objectivec\">//获取设备 IP 地址\n+ (NSString *)getIPAddress {\n    NSString *address = @&quot;error&quot;;\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    success = getifaddrs(&amp;interfaces);\n    if (success == 0) {\n        temp_addr = interfaces;\n        while(temp_addr != NULL) {\n            if(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) {\n                if([[NSString stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:@&quot;en0&quot;]) {\n                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];\n                }\n            }\n            temp_addr = temp_addr-&gt;ifa_next;\n        }\n    }\n    freeifaddrs(interfaces);\n    return address;\n}\n</code></pre>\n<h4 id=\"22-判断字符串中是否含有空格\"><a href=\"#22-判断字符串中是否含有空格\" class=\"headerlink\" title=\"22. 判断字符串中是否含有空格\"></a>22. 判断字符串中是否含有空格</h4><pre><code class=\"objectivec\">+ (BOOL)isHaveSpaceInString:(NSString *)string{\n    NSRange _range = [string rangeOfString:@&quot; &quot;];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n</code></pre>\n<h4 id=\"23-判断字符串中是否含有某个字符串\"><a href=\"#23-判断字符串中是否含有某个字符串\" class=\"headerlink\" title=\"23. 判断字符串中是否含有某个字符串\"></a>23. 判断字符串中是否含有某个字符串</h4><pre><code class=\"objectivec\">+ (BOOL)isHaveString:(NSString *)string1 InString:(NSString *)string2{\n    NSRange _range = [string2 rangeOfString:string1];\n    if (_range.location != NSNotFound) {\n        return YES;\n    }else {\n        return NO;\n    }\n}\n</code></pre>\n<h4 id=\"24-判断字符串中是否含有中文\"><a href=\"#24-判断字符串中是否含有中文\" class=\"headerlink\" title=\"24. 判断字符串中是否含有中文\"></a>24. 判断字符串中是否含有中文</h4><pre><code class=\"objectivec\">+ (BOOL)isHaveChineseInString:(NSString *)string{\n    for(NSInteger i = 0; i &lt; [string length]; i++){\n        int a = [string characterAtIndex:i];\n        if (a &gt; 0x4e00 &amp;&amp; a &lt; 0x9fff) {\n            return YES;\n        }\n    }\n    return NO;\n}\n</code></pre>\n<h4 id=\"25-判断字符串是否全部为数字\"><a href=\"#25-判断字符串是否全部为数字\" class=\"headerlink\" title=\"25. 判断字符串是否全部为数字\"></a>25. 判断字符串是否全部为数字</h4><pre><code class=\"objectivec\">+ (BOOL)isAllNum:(NSString *)string{\n    unichar c;\n    for (int i=0; i&lt;string.length; i++) {\n        c=[string characterAtIndex:i];\n        if (!isdigit(c)) {\n            return NO;\n        }\n    }\n    return YES;\n}\n</code></pre>\n<h4 id=\"26-绘制虚线\"><a href=\"#26-绘制虚线\" class=\"headerlink\" title=\"26. 绘制虚线\"></a>26. 绘制虚线</h4><pre><code class=\"objectivec\">/*\n  ** lineFrame:     虚线的 frame\n  ** length:        虚线中短线的宽度\n  ** spacing:       虚线中短线之间的间距\n  ** color:         虚线中短线的颜色\n*/\n+ (UIView *)createDashedLineWithFrame:(CGRect)lineFrame\n                           lineLength:(int)length\n                          lineSpacing:(int)spacing\n                            lineColor:(UIColor *)color{\n    UIView *dashedLine = [[UIView alloc] initWithFrame:lineFrame];\n    dashedLine.backgroundColor = [UIColor clearColor];\n    CAShapeLayer *shapeLayer = [CAShapeLayer layer];\n    [shapeLayer setBounds:dashedLine.bounds];\n    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(dashedLine.frame) / 2, CGRectGetHeight(dashedLine.frame))];\n    [shapeLayer setFillColor:[UIColor clearColor].CGColor];\n    [shapeLayer setStrokeColor:color.CGColor];\n    [shapeLayer setLineWidth:CGRectGetHeight(dashedLine.frame)];\n    [shapeLayer setLineJoin:kCALineJoinRound];\n    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:length], [NSNumber numberWithInt:spacing], nil]];\n    CGMutablePathRef path = CGPathCreateMutable();\n    CGPathMoveToPoint(path, NULL, 0, 0);\n    CGPathAddLineToPoint(path, NULL, CGRectGetWidth(dashedLine.frame), 0);\n    [shapeLayer setPath:path];\n    CGPathRelease(path);\n    [dashedLine.layer addSublayer:shapeLayer];\n    return dashedLine;\n}\n</code></pre>\n<h4 id=\"27-将字典对象转换为-JSON-字符串\"><a href=\"#27-将字典对象转换为-JSON-字符串\" class=\"headerlink\" title=\"27. 将字典对象转换为 JSON 字符串\"></a>27. 将字典对象转换为 JSON 字符串</h4><pre><code class=\"objectivec\">+ (NSString *)jsonPrettyStringEncoded:(NSDictionary *)dictionary{\n    if ([NSJSONSerialization isValidJSONObject:dictionary ]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:NSJSONWritingPrettyPrinted error:&amp;error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n</code></pre>\n<h4 id=\"28-将数组对象转换为-JSON-字符串\"><a href=\"#28-将数组对象转换为-JSON-字符串\" class=\"headerlink\" title=\"28.将数组对象转换为 JSON 字符串\"></a>28.将数组对象转换为 JSON 字符串</h4><pre><code class=\"objectivec\">+ (NSString *)jsonPrettyStringEncoded:(NSArray *)array{\n    if ([NSJSONSerialization isValidJSONObject:array]) {\n        NSError *error;\n        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:array options:NSJSONWritingPrettyPrinted error:&amp;error];\n        if (!error) {\n            NSString *json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n            return json;\n        }\n    }\n    return nil;\n}\n</code></pre>\n<h4 id=\"29-获取-WiFi-信息\"><a href=\"#29-获取-WiFi-信息\" class=\"headerlink\" title=\"29. 获取 WiFi 信息\"></a>29. 获取 WiFi 信息</h4><p>需要引入头文件:</p>\n<p><code>#import &lt;SystemConfiguration/CaptiveNetwork.h&gt;</code></p>\n<pre><code class=\"objectivec\">//获取 WiFi 信息\n- (NSDictionary *)fetchSSIDInfo {\n    NSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();\n    if (!ifs) {\n        return nil;\n    }\n    NSDictionary *info = nil;\n    for (NSString *ifnam in ifs) {\n        info = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);\n        if (info &amp;&amp; [info count]) { break; }\n    }\n    return info;\n}\n</code></pre>\n<h4 id=\"30-获取广播地址、本机地址、子网掩码、端口信息\"><a href=\"#30-获取广播地址、本机地址、子网掩码、端口信息\" class=\"headerlink\" title=\"30. 获取广播地址、本机地址、子网掩码、端口信息\"></a>30. 获取广播地址、本机地址、子网掩码、端口信息</h4><p>需要引入头文件:</p>\n<p><code>#import &lt;ifaddrs.h&gt;</code><br><code>#import &lt;arpa/inet.h&gt;</code></p>\n<pre><code class=\"objectivec\">//获取广播地址、本机地址、子网掩码、端口信息\n- (NSMutableDictionary *)getLocalInfoForCurrentWiFi {\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    struct ifaddrs *interfaces = NULL;\n    struct ifaddrs *temp_addr = NULL;\n    int success = 0;\n    // retrieve the current interfaces - returns 0 on success\n    success = getifaddrs(&amp;interfaces);\n    if (success == 0) {\n        // Loop through linked list of interfaces\n        temp_addr = interfaces;\n        //*/\n        while(temp_addr != NULL) {\n            if(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET) {\n                // Check if interface is en0 which is the wifi connection on the iPhone\n                if([[NSString stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:@&quot;en0&quot;]) {\n                    //广播地址\n                    NSString *broadcast = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr-&gt;ifa_dstaddr)-&gt;sin_addr)];\n                    if (broadcast) {\n                        [dict setObject:broadcast forKey:@&quot;broadcast&quot;];\n                    }\n//                    NSLog(@&quot;broadcast address--%@&quot;,broadcast);\n                    //本机地址\n                    NSString *localIp = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];\n                    if (localIp) {\n                        [dict setObject:localIp forKey:@&quot;localIp&quot;];\n                    }\n//                    NSLog(@&quot;local device ip--%@&quot;,localIp);\n                    //子网掩码地址\n                    NSString *netmask = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr-&gt;ifa_netmask)-&gt;sin_addr)];\n                    if (netmask) {\n                        [dict setObject:netmask forKey:@&quot;netmask&quot;];\n                    }\n//                    NSLog(@&quot;netmask--%@&quot;,netmask);\n                    //--en0 端口地址\n                    NSString *interface = [NSString stringWithUTF8String:temp_addr-&gt;ifa_name];\n                    if (interface) {\n                        [dict setObject:interface forKey:@&quot;interface&quot;];\n                    }\n//                    NSLog(@&quot;interface--%@&quot;,interface);\n                    return dict;\n                }\n            }\n            temp_addr = temp_addr-&gt;ifa_next;\n        }\n    }\n    // Free memory\n    freeifaddrs(interfaces);\n    return dict;\n}\n</code></pre>\n"},{"title":"我是不懂浪漫","date":"2017-06-05T14:50:48.000Z","_content":"![一](http://oqepgj2jp.bkt.clouddn.com/1.jpg)\n\n> 1\n\n![二](http://oqepgj2jp.bkt.clouddn.com/2.jpg)\n\n> 2\n\n![三](http://oqepgj2jp.bkt.clouddn.com/3.jpg)\n\n> 3\n\n![四](http://oqepgj2jp.bkt.clouddn.com/4.jpg)\n\n> 4\n\n\n![五](http://oqepgj2jp.bkt.clouddn.com/5.jpg)\n\n> 5\n\n\n![六](http://oqepgj2jp.bkt.clouddn.com/6.jpg)\n\n> 6\n\n\n\n","source":"_posts/我是不懂浪漫.md","raw":"---\ntitle: 我是不懂浪漫\ndate: 2017-06-05 22:50:48\ncategories: \n\t- 自言语\n---\n![一](http://oqepgj2jp.bkt.clouddn.com/1.jpg)\n\n> 1\n\n![二](http://oqepgj2jp.bkt.clouddn.com/2.jpg)\n\n> 2\n\n![三](http://oqepgj2jp.bkt.clouddn.com/3.jpg)\n\n> 3\n\n![四](http://oqepgj2jp.bkt.clouddn.com/4.jpg)\n\n> 4\n\n\n![五](http://oqepgj2jp.bkt.clouddn.com/5.jpg)\n\n> 5\n\n\n![六](http://oqepgj2jp.bkt.clouddn.com/6.jpg)\n\n> 6\n\n\n\n","slug":"我是不懂浪漫","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lv000m9quzrqdqmoby","content":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/1.jpg\" alt=\"一\"></p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/2.jpg\" alt=\"二\"></p>\n<blockquote>\n<p>2</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/3.jpg\" alt=\"三\"></p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/4.jpg\" alt=\"四\"></p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/5.jpg\" alt=\"五\"></p>\n<blockquote>\n<p>5</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/6.jpg\" alt=\"六\"></p>\n<blockquote>\n<p>6</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/1.jpg\" alt=\"一\"></p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/2.jpg\" alt=\"二\"></p>\n<blockquote>\n<p>2</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/3.jpg\" alt=\"三\"></p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/4.jpg\" alt=\"四\"></p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/5.jpg\" alt=\"五\"></p>\n<blockquote>\n<p>5</p>\n</blockquote>\n<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/6.jpg\" alt=\"六\"></p>\n<blockquote>\n<p>6</p>\n</blockquote>\n"},{"title":"玩转iOS中UITextField的placeholder颜色","date":"2017-05-23T05:59:59.000Z","_content":"![珍惜时间](http://oqepgj2jp.bkt.clouddn.com/wallpaper-2572384.jpg)\n>`UITextField`是iOS开发中经常使用到的控件，它有一个`placeholder`属性，也就是占位文字。默认占位文字颜色是` 70% gray`,但有时我们可能需要修改其占位文字的颜色，下文中将为大家介绍三中修改方法,并就动态改变颜色做相关说明（关于动态改变：当UITextField为第一响应者时为一种颜色，取消第一响应者时为另一种颜色）。\n\n##方法1\n- 设置 `attributedPlaceholder`属性\n- 说明：此种方式对于无需动态改变`placeholder`颜色较为方便。\n\n---\n- 代码1（单色）\n\n```objectivec\nNSMutableDictionary *attrs = [NSMutableDictionary dictionary]; // 创建属性字典\n  attrs[NSFontAttributeName] = [UIFont systemFontOfSize:17]; // 设置font\n  attrs[NSForegroundColorAttributeName] = [UIColor greenColor]; // 设置颜色\n  NSAttributedString *attStr = [[NSAttributedString alloc] initWithString:@\"夏虫不可以语冰\" attributes:attrs]; // 初始化富文本占位字符串\n  self.textField.attributedPlaceholder = attStr;\n```\n- 效果1\n![单色placeholder](http://upload-images.jianshu.io/upload_images/2115041-b0b505d18f2888a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 代码2（复色）\n\n```objectivec\nNSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithString:@\"夏虫不可以语冰\"];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor redColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(0, 2)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor greenColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:17.0]} range:NSMakeRange(2, 3)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor blueColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(5, 2)];\n    self.textField.attributedPlaceholder = attStr;\n```\n- 效果\n![复色placeholder](http://upload-images.jianshu.io/upload_images/2115041-d9430dd8f3e57343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##方法2\n- 自定义UITextField,重写`- (void)drawPlaceholderInRect:(CGRect)rect;`\n- 说明：此种方式只能设置一次状态,不能动态的改变`placeholder`的颜色,但可以设置`placeholder`所在位置。\n\n---\n- 代码\n\n```objectivec\n- (void)drawPlaceholderInRect:(CGRect)rect\n{\n    [self.placeholder drawInRect:CGRectMake(0, 2, rect.size.width, 25) withAttributes:@{ NSFontAttributeName: [UIFont systemFontOfSize:16.0],\n                                        NSForegroundColorAttributeName : [UIColor blueColor],\n                                     }];\n}\n```\n- 效果\n![placeholder](http://upload-images.jianshu.io/upload_images/2115041-cf46f67c604c2c9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##方法3\n- 自定义UITextField,利用runTime找出UITextFiled内部隐藏的成员变量和属性，利用KVC进行修改。\n- 说明：此种方式对于动态改变`placeholder`颜色较为方便。\n\n- **拓展代码**（利用runTime找出成员变量和属性，程序中无需使用，只是帮助我们看清UITextField内部结构，知道其中的相关成员变量和属性，然后赋值即可）。\n\n```objectivec\n#import \"SJTextField.h\"\n#import <objc/runtime.h>\n@implementation SJTextField\n\n// 初始化调用一次 用于查看UITextField中的成员属性和变量\n+ (void)initialize\n{\n    [self getIvars];\n    // [self getProperties];\n}\n\n// 获取所有属性\n+ (void)getProperties\n{\n    unsigned int count = 0;\n    objc_property_t *properties = class_copyPropertyList([UITextField class], &count);\n    for (int i = 0; i<count; i++) {\n        // 取出属性\n        objc_property_t property = properties[i];\n        \n        // 打印属性名字\n        NSLog(@\"%s<---->%s\", property_getName(property), property_getAttributes(property));\n    }\n    free(properties);\n}\n\n// 获取所有成员变量\n+ (void)getIvars\n{\n    unsigned int count = 0;\n    // 拷贝出所有的成员变量列表\n    Ivar *ivars = class_copyIvarList([UITextField class], &count);\n    for (int i = 0; i<count; i++) {\n        // 取出成员变量\n        //        Ivar ivar = *(ivars + i);\n        Ivar ivar = ivars[i];\n        \n        // 打印成员变量名字\n        NSLog(@\"%s %s\", ivar_getName(ivar), ivar_getTypeEncoding(ivar));\n    }\n    // 释放\n    free(ivars);\n}\n@end\n```\n- **拓展点** 可以查到有两个关于`placeholder`的属性和变量，分别是`_placeholderLabel.textColor`和`_placeholderLabel`，故下面就是用来设置动态改变`placeholder`颜色的代码。\n- 代码（在自定义UITextField中）\n\n```objectivec\n#import \"SJTextField.h\"\n#import <objc/runtime.h>\n@implementation SJTextField\nstatic NSString * const SJPlacerholderColorKeyPath = @\"_placeholderLabel.textColor\";\n- (void)awakeFromNib\n{\n// 设置placeholder开始颜色（方式一）\n//    UILabel *placeholderLabel = [self valueForKeyPath:@\"_placeholderLabel\"];\n//    placeholderLabel.textColor = [UIColor redColor];   \n   // 设置placeholder开始颜色（方式二）\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    // 不成为第一响应者\n    [self resignFirstResponder];\n}\n\n/**\n * 当前文本框聚焦时就会调用\n */\n- (BOOL)becomeFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor redColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super becomeFirstResponder];\n}\n\n/**\n * 当前文本框失去焦点时就会调用\n */\n- (BOOL)resignFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super resignFirstResponder];\n}\n@end\n```\n- 效果\n\n\n![未进入编辑状态](http://upload-images.jianshu.io/upload_images/2115041-9c0ca6ff0ec7c261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![进入编辑状态](http://upload-images.jianshu.io/upload_images/2115041-6c9aacd3d30f3655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nEnd.\n\n\n","source":"_posts/玩转iOS中UITextField的placeholder颜色.md","raw":"---\ntitle: 玩转iOS中UITextField的placeholder颜色\ndate: 2017-05-23 13:59:59\ncategories: \n\t- iOS合集\n---\n![珍惜时间](http://oqepgj2jp.bkt.clouddn.com/wallpaper-2572384.jpg)\n>`UITextField`是iOS开发中经常使用到的控件，它有一个`placeholder`属性，也就是占位文字。默认占位文字颜色是` 70% gray`,但有时我们可能需要修改其占位文字的颜色，下文中将为大家介绍三中修改方法,并就动态改变颜色做相关说明（关于动态改变：当UITextField为第一响应者时为一种颜色，取消第一响应者时为另一种颜色）。\n\n##方法1\n- 设置 `attributedPlaceholder`属性\n- 说明：此种方式对于无需动态改变`placeholder`颜色较为方便。\n\n---\n- 代码1（单色）\n\n```objectivec\nNSMutableDictionary *attrs = [NSMutableDictionary dictionary]; // 创建属性字典\n  attrs[NSFontAttributeName] = [UIFont systemFontOfSize:17]; // 设置font\n  attrs[NSForegroundColorAttributeName] = [UIColor greenColor]; // 设置颜色\n  NSAttributedString *attStr = [[NSAttributedString alloc] initWithString:@\"夏虫不可以语冰\" attributes:attrs]; // 初始化富文本占位字符串\n  self.textField.attributedPlaceholder = attStr;\n```\n- 效果1\n![单色placeholder](http://upload-images.jianshu.io/upload_images/2115041-b0b505d18f2888a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 代码2（复色）\n\n```objectivec\nNSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithString:@\"夏虫不可以语冰\"];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor redColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(0, 2)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor greenColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:17.0]} range:NSMakeRange(2, 3)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor blueColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(5, 2)];\n    self.textField.attributedPlaceholder = attStr;\n```\n- 效果\n![复色placeholder](http://upload-images.jianshu.io/upload_images/2115041-d9430dd8f3e57343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##方法2\n- 自定义UITextField,重写`- (void)drawPlaceholderInRect:(CGRect)rect;`\n- 说明：此种方式只能设置一次状态,不能动态的改变`placeholder`的颜色,但可以设置`placeholder`所在位置。\n\n---\n- 代码\n\n```objectivec\n- (void)drawPlaceholderInRect:(CGRect)rect\n{\n    [self.placeholder drawInRect:CGRectMake(0, 2, rect.size.width, 25) withAttributes:@{ NSFontAttributeName: [UIFont systemFontOfSize:16.0],\n                                        NSForegroundColorAttributeName : [UIColor blueColor],\n                                     }];\n}\n```\n- 效果\n![placeholder](http://upload-images.jianshu.io/upload_images/2115041-cf46f67c604c2c9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##方法3\n- 自定义UITextField,利用runTime找出UITextFiled内部隐藏的成员变量和属性，利用KVC进行修改。\n- 说明：此种方式对于动态改变`placeholder`颜色较为方便。\n\n- **拓展代码**（利用runTime找出成员变量和属性，程序中无需使用，只是帮助我们看清UITextField内部结构，知道其中的相关成员变量和属性，然后赋值即可）。\n\n```objectivec\n#import \"SJTextField.h\"\n#import <objc/runtime.h>\n@implementation SJTextField\n\n// 初始化调用一次 用于查看UITextField中的成员属性和变量\n+ (void)initialize\n{\n    [self getIvars];\n    // [self getProperties];\n}\n\n// 获取所有属性\n+ (void)getProperties\n{\n    unsigned int count = 0;\n    objc_property_t *properties = class_copyPropertyList([UITextField class], &count);\n    for (int i = 0; i<count; i++) {\n        // 取出属性\n        objc_property_t property = properties[i];\n        \n        // 打印属性名字\n        NSLog(@\"%s<---->%s\", property_getName(property), property_getAttributes(property));\n    }\n    free(properties);\n}\n\n// 获取所有成员变量\n+ (void)getIvars\n{\n    unsigned int count = 0;\n    // 拷贝出所有的成员变量列表\n    Ivar *ivars = class_copyIvarList([UITextField class], &count);\n    for (int i = 0; i<count; i++) {\n        // 取出成员变量\n        //        Ivar ivar = *(ivars + i);\n        Ivar ivar = ivars[i];\n        \n        // 打印成员变量名字\n        NSLog(@\"%s %s\", ivar_getName(ivar), ivar_getTypeEncoding(ivar));\n    }\n    // 释放\n    free(ivars);\n}\n@end\n```\n- **拓展点** 可以查到有两个关于`placeholder`的属性和变量，分别是`_placeholderLabel.textColor`和`_placeholderLabel`，故下面就是用来设置动态改变`placeholder`颜色的代码。\n- 代码（在自定义UITextField中）\n\n```objectivec\n#import \"SJTextField.h\"\n#import <objc/runtime.h>\n@implementation SJTextField\nstatic NSString * const SJPlacerholderColorKeyPath = @\"_placeholderLabel.textColor\";\n- (void)awakeFromNib\n{\n// 设置placeholder开始颜色（方式一）\n//    UILabel *placeholderLabel = [self valueForKeyPath:@\"_placeholderLabel\"];\n//    placeholderLabel.textColor = [UIColor redColor];   \n   // 设置placeholder开始颜色（方式二）\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    // 不成为第一响应者\n    [self resignFirstResponder];\n}\n\n/**\n * 当前文本框聚焦时就会调用\n */\n- (BOOL)becomeFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor redColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super becomeFirstResponder];\n}\n\n/**\n * 当前文本框失去焦点时就会调用\n */\n- (BOOL)resignFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super resignFirstResponder];\n}\n@end\n```\n- 效果\n\n\n![未进入编辑状态](http://upload-images.jianshu.io/upload_images/2115041-9c0ca6ff0ec7c261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![进入编辑状态](http://upload-images.jianshu.io/upload_images/2115041-6c9aacd3d30f3655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nEnd.\n\n\n","slug":"玩转iOS中UITextField的placeholder颜色","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61lx000n9quz91h4vwvh","content":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wallpaper-2572384.jpg\" alt=\"珍惜时间\"></p>\n<blockquote>\n<p><code>UITextField</code>是iOS开发中经常使用到的控件，它有一个<code>placeholder</code>属性，也就是占位文字。默认占位文字颜色是<code>70% gray</code>,但有时我们可能需要修改其占位文字的颜色，下文中将为大家介绍三中修改方法,并就动态改变颜色做相关说明（关于动态改变：当UITextField为第一响应者时为一种颜色，取消第一响应者时为另一种颜色）。</p>\n</blockquote>\n<p>##方法1</p>\n<ul>\n<li>设置 <code>attributedPlaceholder</code>属性</li>\n<li>说明：此种方式对于无需动态改变<code>placeholder</code>颜色较为方便。</li>\n</ul>\n<hr>\n<ul>\n<li>代码1（单色）</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableDictionary <span class=\"token operator\">*</span>attrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableDictionary dictionary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建属性字典</span>\n  attrs<span class=\"token punctuation\">[</span>NSFontAttributeName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIFont systemFontOfSize<span class=\"token punctuation\">:</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 设置font</span>\n  attrs<span class=\"token punctuation\">[</span>NSForegroundColorAttributeName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor greenColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 设置颜色</span>\n  NSAttributedString <span class=\"token operator\">*</span>attStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSAttributedString alloc<span class=\"token punctuation\">]</span> initWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"夏虫不可以语冰\"</span> attributes<span class=\"token punctuation\">:</span>attrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 初始化富文本占位字符串</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>textField<span class=\"token punctuation\">.</span>attributedPlaceholder <span class=\"token operator\">=</span> attStr<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><p>效果1<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-b0b505d18f2888a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单色placeholder\"></p>\n</li>\n<li><p>代码2（复色）</p>\n</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableAttributedString <span class=\"token operator\">*</span>attStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableAttributedString alloc<span class=\"token punctuation\">]</span> initWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"夏虫不可以语冰\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span>attStr setAttributes<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span>NSForegroundColorAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIColor redColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            NSFontAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIFont systemFontOfSize<span class=\"token punctuation\">:</span><span class=\"token number\">15.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> range<span class=\"token punctuation\">:</span><span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span>attStr setAttributes<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span>NSForegroundColorAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIColor greenColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            NSFontAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIFont systemFontOfSize<span class=\"token punctuation\">:</span><span class=\"token number\">17.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> range<span class=\"token punctuation\">:</span><span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span>attStr setAttributes<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span>NSForegroundColorAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIColor blueColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            NSFontAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIFont systemFontOfSize<span class=\"token punctuation\">:</span><span class=\"token number\">15.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> range<span class=\"token punctuation\">:</span><span class=\"token function\">NSMakeRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>textField<span class=\"token punctuation\">.</span>attributedPlaceholder <span class=\"token operator\">=</span> attStr<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>效果<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-d9430dd8f3e57343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复色placeholder\"></li>\n</ul>\n<p>##方法2</p>\n<ul>\n<li>自定义UITextField,重写<code>- (void)drawPlaceholderInRect:(CGRect)rect;</code></li>\n<li>说明：此种方式只能设置一次状态,不能动态的改变<code>placeholder</code>的颜色,但可以设置<code>placeholder</code>所在位置。</li>\n</ul>\n<hr>\n<ul>\n<li>代码</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>drawPlaceholderInRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span>rect\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>placeholder drawInRect<span class=\"token punctuation\">:</span><span class=\"token function\">CGRectMake</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> withAttributes<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">{</span> NSFontAttributeName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIFont systemFontOfSize<span class=\"token punctuation\">:</span><span class=\"token number\">16.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                        NSForegroundColorAttributeName <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UIColor blueColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>效果<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-cf46f67c604c2c9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"placeholder\"></li>\n</ul>\n<p>##方法3</p>\n<ul>\n<li>自定义UITextField,利用runTime找出UITextFiled内部隐藏的成员变量和属性，利用KVC进行修改。</li>\n<li><p>说明：此种方式对于动态改变<code>placeholder</code>颜色较为方便。</p>\n</li>\n<li><p><strong>拓展代码</strong>（利用runTime找出成员变量和属性，程序中无需使用，只是帮助我们看清UITextField内部结构，知道其中的相关成员变量和属性，然后赋值即可）。</p>\n</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"SJTextField.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;objc/runtime.h></span>\n<span class=\"token keyword\">@implementation</span> SJTextField\n\n<span class=\"token comment\" spellcheck=\"true\">// 初始化调用一次 用于查看UITextField中的成员属性和变量</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>initialize\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> getIvars<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// [self getProperties];</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 获取所有属性</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>getProperties\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    objc_property_t <span class=\"token operator\">*</span>properties <span class=\"token operator\">=</span> <span class=\"token function\">class_copyPropertyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>UITextField class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 取出属性</span>\n        objc_property_t property <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 打印属性名字</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%s&lt;---->%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">property_getName</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">property_getAttributes</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 获取所有成员变量</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>getIvars\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 拷贝出所有的成员变量列表</span>\n    Ivar <span class=\"token operator\">*</span>ivars <span class=\"token operator\">=</span> <span class=\"token function\">class_copyIvarList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>UITextField class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 取出成员变量</span>\n        <span class=\"token comment\" spellcheck=\"true\">//        Ivar ivar = *(ivars + i);</span>\n        Ivar ivar <span class=\"token operator\">=</span> ivars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 打印成员变量名字</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%s %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ivar_getName</span><span class=\"token punctuation\">(</span>ivar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ivar_getTypeEncoding</span><span class=\"token punctuation\">(</span>ivar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 释放</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ivars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<ul>\n<li><strong>拓展点</strong> 可以查到有两个关于<code>placeholder</code>的属性和变量，分别是<code>_placeholderLabel.textColor</code>和<code>_placeholderLabel</code>，故下面就是用来设置动态改变<code>placeholder</code>颜色的代码。</li>\n<li>代码（在自定义UITextField中）</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"SJTextField.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;objc/runtime.h></span>\n<span class=\"token keyword\">@implementation</span> SJTextField\n<span class=\"token keyword\">static</span> NSString <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> SJPlacerholderColorKeyPath <span class=\"token operator\">=</span> <span class=\"token string\">@\"_placeholderLabel.textColor\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>awakeFromNib\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">// 设置placeholder开始颜色（方式一）</span>\n<span class=\"token comment\" spellcheck=\"true\">//    UILabel *placeholderLabel = [self valueForKeyPath:@\"_placeholderLabel\"];</span>\n<span class=\"token comment\" spellcheck=\"true\">//    placeholderLabel.textColor = [UIColor redColor];   </span>\n   <span class=\"token comment\" spellcheck=\"true\">// 设置placeholder开始颜色（方式二）</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> setValue<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>UIColor greenColor<span class=\"token punctuation\">]</span> forKeyPath<span class=\"token punctuation\">:</span>SJPlacerholderColorKeyPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 不成为第一响应者</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> resignFirstResponder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 当前文本框聚焦时就会调用\n */</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>becomeFirstResponder\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 修改占位文字颜色</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> setValue<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>UIColor redColor<span class=\"token punctuation\">]</span> forKeyPath<span class=\"token punctuation\">:</span>SJPlacerholderColorKeyPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> becomeFirstResponder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 当前文本框失去焦点时就会调用\n */</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>resignFirstResponder\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 修改占位文字颜色</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> setValue<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>UIColor greenColor<span class=\"token punctuation\">]</span> forKeyPath<span class=\"token punctuation\">:</span>SJPlacerholderColorKeyPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> resignFirstResponder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2115041-9c0ca6ff0ec7c261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未进入编辑状态\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2115041-6c9aacd3d30f3655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"进入编辑状态\"></p>\n<p>End.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oqepgj2jp.bkt.clouddn.com/wallpaper-2572384.jpg\" alt=\"珍惜时间\"></p>\n<blockquote>\n<p><code>UITextField</code>是iOS开发中经常使用到的控件，它有一个<code>placeholder</code>属性，也就是占位文字。默认占位文字颜色是<code>70% gray</code>,但有时我们可能需要修改其占位文字的颜色，下文中将为大家介绍三中修改方法,并就动态改变颜色做相关说明（关于动态改变：当UITextField为第一响应者时为一种颜色，取消第一响应者时为另一种颜色）。</p>\n</blockquote>\n<p>##方法1</p>\n<ul>\n<li>设置 <code>attributedPlaceholder</code>属性</li>\n<li>说明：此种方式对于无需动态改变<code>placeholder</code>颜色较为方便。</li>\n</ul>\n<hr>\n<ul>\n<li>代码1（单色）</li>\n</ul>\n<pre><code class=\"objectivec\">NSMutableDictionary *attrs = [NSMutableDictionary dictionary]; // 创建属性字典\n  attrs[NSFontAttributeName] = [UIFont systemFontOfSize:17]; // 设置font\n  attrs[NSForegroundColorAttributeName] = [UIColor greenColor]; // 设置颜色\n  NSAttributedString *attStr = [[NSAttributedString alloc] initWithString:@&quot;夏虫不可以语冰&quot; attributes:attrs]; // 初始化富文本占位字符串\n  self.textField.attributedPlaceholder = attStr;\n</code></pre>\n<ul>\n<li><p>效果1<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-b0b505d18f2888a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单色placeholder\"></p>\n</li>\n<li><p>代码2（复色）</p>\n</li>\n</ul>\n<pre><code class=\"objectivec\">NSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithString:@&quot;夏虫不可以语冰&quot;];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor redColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(0, 2)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor greenColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:17.0]} range:NSMakeRange(2, 3)];\n [attStr setAttributes:@{NSForegroundColorAttributeName : [UIColor blueColor],\n                            NSFontAttributeName : [UIFont systemFontOfSize:15.0]} range:NSMakeRange(5, 2)];\n    self.textField.attributedPlaceholder = attStr;\n</code></pre>\n<ul>\n<li>效果<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-d9430dd8f3e57343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复色placeholder\"></li>\n</ul>\n<p>##方法2</p>\n<ul>\n<li>自定义UITextField,重写<code>- (void)drawPlaceholderInRect:(CGRect)rect;</code></li>\n<li>说明：此种方式只能设置一次状态,不能动态的改变<code>placeholder</code>的颜色,但可以设置<code>placeholder</code>所在位置。</li>\n</ul>\n<hr>\n<ul>\n<li>代码</li>\n</ul>\n<pre><code class=\"objectivec\">- (void)drawPlaceholderInRect:(CGRect)rect\n{\n    [self.placeholder drawInRect:CGRectMake(0, 2, rect.size.width, 25) withAttributes:@{ NSFontAttributeName: [UIFont systemFontOfSize:16.0],\n                                        NSForegroundColorAttributeName : [UIColor blueColor],\n                                     }];\n}\n</code></pre>\n<ul>\n<li>效果<br><img src=\"http://upload-images.jianshu.io/upload_images/2115041-cf46f67c604c2c9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"placeholder\"></li>\n</ul>\n<p>##方法3</p>\n<ul>\n<li>自定义UITextField,利用runTime找出UITextFiled内部隐藏的成员变量和属性，利用KVC进行修改。</li>\n<li><p>说明：此种方式对于动态改变<code>placeholder</code>颜色较为方便。</p>\n</li>\n<li><p><strong>拓展代码</strong>（利用runTime找出成员变量和属性，程序中无需使用，只是帮助我们看清UITextField内部结构，知道其中的相关成员变量和属性，然后赋值即可）。</p>\n</li>\n</ul>\n<pre><code class=\"objectivec\">#import &quot;SJTextField.h&quot;\n#import &lt;objc/runtime.h&gt;\n@implementation SJTextField\n\n// 初始化调用一次 用于查看UITextField中的成员属性和变量\n+ (void)initialize\n{\n    [self getIvars];\n    // [self getProperties];\n}\n\n// 获取所有属性\n+ (void)getProperties\n{\n    unsigned int count = 0;\n    objc_property_t *properties = class_copyPropertyList([UITextField class], &amp;count);\n    for (int i = 0; i&lt;count; i++) {\n        // 取出属性\n        objc_property_t property = properties[i];\n\n        // 打印属性名字\n        NSLog(@&quot;%s&lt;----&gt;%s&quot;, property_getName(property), property_getAttributes(property));\n    }\n    free(properties);\n}\n\n// 获取所有成员变量\n+ (void)getIvars\n{\n    unsigned int count = 0;\n    // 拷贝出所有的成员变量列表\n    Ivar *ivars = class_copyIvarList([UITextField class], &amp;count);\n    for (int i = 0; i&lt;count; i++) {\n        // 取出成员变量\n        //        Ivar ivar = *(ivars + i);\n        Ivar ivar = ivars[i];\n\n        // 打印成员变量名字\n        NSLog(@&quot;%s %s&quot;, ivar_getName(ivar), ivar_getTypeEncoding(ivar));\n    }\n    // 释放\n    free(ivars);\n}\n@end\n</code></pre>\n<ul>\n<li><strong>拓展点</strong> 可以查到有两个关于<code>placeholder</code>的属性和变量，分别是<code>_placeholderLabel.textColor</code>和<code>_placeholderLabel</code>，故下面就是用来设置动态改变<code>placeholder</code>颜色的代码。</li>\n<li>代码（在自定义UITextField中）</li>\n</ul>\n<pre><code class=\"objectivec\">#import &quot;SJTextField.h&quot;\n#import &lt;objc/runtime.h&gt;\n@implementation SJTextField\nstatic NSString * const SJPlacerholderColorKeyPath = @&quot;_placeholderLabel.textColor&quot;;\n- (void)awakeFromNib\n{\n// 设置placeholder开始颜色（方式一）\n//    UILabel *placeholderLabel = [self valueForKeyPath:@&quot;_placeholderLabel&quot;];\n//    placeholderLabel.textColor = [UIColor redColor];   \n   // 设置placeholder开始颜色（方式二）\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    // 不成为第一响应者\n    [self resignFirstResponder];\n}\n\n/**\n * 当前文本框聚焦时就会调用\n */\n- (BOOL)becomeFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor redColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super becomeFirstResponder];\n}\n\n/**\n * 当前文本框失去焦点时就会调用\n */\n- (BOOL)resignFirstResponder\n{\n    // 修改占位文字颜色\n    [self setValue:[UIColor greenColor] forKeyPath:SJPlacerholderColorKeyPath];\n    return [super resignFirstResponder];\n}\n@end\n</code></pre>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2115041-9c0ca6ff0ec7c261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未进入编辑状态\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2115041-6c9aacd3d30f3655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"进入编辑状态\"></p>\n<p>End.</p>\n"},{"title":"《招聘一个靠谱的iOS》面试题参考答案（上）","date":"2017-05-24T06:56:32.000Z","_content":"[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)—参考答案（上）\n\n\n说明：面试题来源是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)的这篇博文：[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)，其中共55题，除第一题为纠错题外，其他54道均为简答题。\n\n\n作者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。\n\n答案为[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)整理，未经出题者校对，如有纰漏，请向[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)指正。\n\n----------\n\n# 索引\n\n 1.  [风格纠错题](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-风格纠错题) \n\n  1.  [优化部分](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#优化部分) \n  2.  [硬伤部分](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#硬伤部分) \n 2.   [什么情况使用 weak 关键字，相比 assign 有什么不同？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2-什么情况使用-weak-关键字相比-assign-有什么不同) \n 3.  [怎么用 copy 关键字？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#3-怎么用-copy-关键字) \n 4.  [这个写法会出什么问题： @property (copy) NSMutableArray *array;](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#4-这个写法会出什么问题-property-copy-nsmutablearray-array) \n 5.  [ 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#5-如何让自己的类用-copy-修饰符如何重写带-copy-关键字的-setter) \n 6.  [@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#6-property-的本质是什么ivargettersetter-是如何生成并添加到这个类中的) \n 7.  [@protocol 和 category 中如何使用 @property](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#7-protocol-和-category-中如何使用-property) \n 8.  [ runtime 如何实现 weak 属性](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#8-runtime-如何实现-weak-属性) \n 9.  [@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#9-property中有哪些属性关键字-property-后面可以有哪些修饰符) \n 10. [ weak属性需要在dealloc中置nil么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#10-weak属性需要在dealloc中置nil么)\n 11.  [@synthesize和@dynamic分别有什么作用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#11-synthesize和dynamic分别有什么作用) \n 12.  [ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#12-arc下不显式指定任何属性关键字时默认的关键字都有哪些) \n 13.  [用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#13-用property声明的nsstring或nsarraynsdictionary经常使用copy关键字为什么如果改用strong关键字可能造成什么问题) \n  1.  [对非集合类对象的copy操作](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-对非集合类对象的copy操作) \n  2.  [集合类对象的copy与mutableCopy](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2集合类对象的copy与mutablecopy) \n 14.  [@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#14-synthesize合成实例变量的规则是什么假如property名为foo存在一个名为_foo的实例变量那么还会自动合成新变量么) \n 15.  [在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#15-在有了自动合成属性实例变量之后synthesize还有哪些使用场景) \n 16.  [objc中向一个nil对象发送消息将会发生什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#16-objc中向一个nil对象发送消息将会发生什么) \n 17.  [objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#17-objc中向一个对象发送消息obj-foo和objc_msgsend函数之间有什么关系) \n 18.  [什么时候会报unrecognized selector的异常？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#18-什么时候会报unrecognized-selector的异常) \n 19.  [一个objc对象如何进行内存布局？（考虑有父类的情况）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#19-一个objc对象如何进行内存布局考虑有父类的情况) \n 20. [一个objc对象的isa的指针指向什么？有什么作用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#20-一个objc对象的isa的指针指向什么有什么作用)\n 21.  [下面的代码输出什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#21-下面的代码输出什么) \n\n\n ```objectivec\n\t@implementation Son : Father\n\t- (id)init\n\t{\n\t    self = [super init];\n\t    if (self) {\n\t        NSLog(@\"%@\", NSStringFromClass([self class]));\n\t        NSLog(@\"%@\", NSStringFromClass([super class]));\n\t    }\n\t    return self;\n\t}\n\t@end\n ```\n\n 22. 22--55题，请看下篇。\n\n### 1. 风格纠错题\n![enter image description here](http://i.imgur.com/O7Zev94.png)\n修改完的代码：\n\n修改方法有很多种，现给出一种做示例：\n\n\n ```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject<NSCopying>\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n@end\n ```\n\n\n\n\n下面对具体修改的地方，分两部分做下介绍：**硬伤部分** 和 **优化部分**\n。因为**硬伤部分**没什么技术含量，为了节省大家时间，放在后面讲，大神请直接看**优化部分**。\n\n\n#### **优化部分**\n\n 1. enum 建议使用 `NS_ENUM` 和 `NS_OPTIONS` 宏来定义枚举类型，参见官方的 [Adopting Modern Objective-C](https://developer.apple.com/library/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html) 一文：\n\n\n ```objectivec\n//定义一个枚举\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n ```\n （仅仅让性别包含男和女可能并不严谨，最严谨的做法可以参考 [这里](https://github.com/ChenYilong/iOSInterviewQuestions/issues/9) 。）\n \n 2. age 属性的类型：应避免使用基本类型，建议使用 Foundation 数据类型，对应关系如下：\n \n ```objectivec\n\tint -> NSInteger\n\tunsigned -> NSUInteger\n\tfloat -> CGFloat\n\t动画时间 -> NSTimeInterval\n```\n同时考虑到 age 的特点，应使用 NSUInteger ，而非 int 。\n这样做的是基于64-bit 适配考虑，详情可参考出题者的博文[《64-bit Tips》](http://blog.sunnyxx.com/2014/12/20/64-bit-tips/)。\n\n\n 3. 如果工程项目非常庞大，需要拆分成不同的模块，可以在类、typedef宏命名的时候使用前缀。\n 4. doLogIn方法不应写在该类中： <p><del>虽然`LogIn`的命名不太清晰，但笔者猜测是login的意思， （勘误：Login是名词，LogIn 是动词，都表示登陆的意思。见： [ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）</del></p>登录操作属于业务逻辑，观察类名 UserModel ，以及属性的命名方式，该类应该是一个 Model 而不是一个“ MVVM 模式下的 ViewModel ”：\n\n\n > 无论是 MVC 模式还是 MVVM 模式，业务逻辑都不应当写在 Model 里：MVC 应在 C，MVVM 应在 VM。\n\n\n （如果抛开命名规范，假设该类真的是 MVVM 模式里的 ViewModel ，那么 UserModel 这个类可能对应的是用户注册页面，如果有特殊的业务需求，比如： `-logIn` 对应的应当是注册并登录的一个 Button ，出现 `-logIn` 方法也可能是合理的。）\n\n 5.  doLogIn 方法命名不规范：添加了多余的动词前缀。\n请牢记：\n\n  > 如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用 `do`，`does` 这种多余的关键字，动词本身的暗示就足够了。\n\n 应为 `-logIn` （注意： `Login` 是名词， `LogIn`  是动词，都表示登陆。  见[ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）\n\n 6. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;`方法中不要用 `with` 来连接两个参数: `withAge:` 应当换为`age:`，`age:` 已经足以清晰说明参数的作用，也不建议用 `andAge:` ：通常情况下，即使有类似 `withA:withB:` 的命名需求，也通常是使用`withA:andB:` 这种命名，用来表示方法执行了两个相对独立的操作（*从设计上来说，这时候也可以拆分成两个独立的方法*），它不应该用作阐明有多个参数，比如下面的：\n\n  ```objectivec\n//错误，不要使用\"and\"来连接参数\n- (int)runModalForDirectory:(NSString *)path andFile:(NSString *)name andTypes:(NSArray *)fileTypes;\n//错误，不要使用\"and\"来阐明有多个参数\n- (instancetype)initWithName:(CGFloat)width andAge:(CGFloat)height;\n//正确，使用\"and\"来表示两个相对独立的操作\n- (BOOL)openFile:(NSString *)fullPath withApplication:(NSString *)appName andDeactivate:(BOOL)flag;\n```\n\n 7. 由于字符串值可能会改变，所以要把相关属性的“内存管理语义”声明为 copy 。(原因在下文有详细论述：***用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？***)\n 8. “性别”(sex）属性的：该类中只给出了一种“初始化方法” (initializer)用于设置“姓名”(Name)和“年龄”(Age)的初始值，那如何对“性别”(Sex）初始化？\n\n Objective-C 有 designated 和 secondary 初始化方法的观念。 designated 初始化方法是提供所有的参数，secondary 初始化方法是一个或多个，并且提供一个或者更多的默认参数来调用 designated 初始化方法的初始化方法。举例说明：\n\n \n\n \n ```objectivec\n\n    // .m文件\n    // http://weibo.com/luohanchenyilong/\n    // https://github.com/ChenYilong\n    //\n\n    @implementation CYLUser\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age\n                             sex:(CYLSex)sex {\n        if(self = [super init]) {\n            _name = [name copy];\n            _age = age;\n            _sex = sex;\n        }\n        return self;\n    }\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age {\n        return [self initWithName:name age:age sex:nil];\n    }\n\n    @end\n```\n\n\n\n\n\n\n 上面的代码中initWithName:age:sex: 就是 designated 初始化方法，另外的是 secondary 初始化方法。因为仅仅是调用类实现的 designated 初始化方法。\n\n  因为出题者没有给出 `.m` 文件，所以有两种猜测：1：本来打算只设计一个 designated 初始化方法，但漏掉了“性别”(sex）属性。那么最终的修改代码就是上文给出的第一种修改方法。2：不打算初始时初始化“性别”(sex）属性，打算后期再修改，如果是这种情况，那么应该把“性别”(sex）属性设为 readwrite 属性，最终给出的修改代码应该是：\n\n\n\n \n ```objectivec\n\n\n\t// .h文件\n\t// http://weibo.com/luohanchenyilong/\n\t// https://github.com/ChenYilong\n\t// 第二种修改方法（基于第一种修改方法的基础上）\n\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n\n\t@interface CYLUser : NSObject<NSCopying>\n\n\t@property (nonatomic, readonly, copy) NSString *name;\n\t@property (nonatomic, readonly, assign) NSUInteger age;\n\t@property (nonatomic, readwrite, assign) CYLSex sex;\n\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age;\n\t+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n\t@end\n```\n\n\n  `.h` 中暴露 designated 初始化方法，是为了方便子类化 （想了解更多，请戳--》 [***《禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）》***](http://is.gd/OQ49zk)。）\n\n\n   - 按照接口设计的惯例，如果设计了“初始化方法” (initializer)，也应当搭配一个快捷构造方法。而快捷构造方法的返回值，建议为 instancetype，为保持一致性，init 方法和快捷构造方法的返回类型最好都用 instancetype。\n   - 如果基于第一种修改方法：既然该类中已经有一个“初始化方法” (initializer)，用于设置“姓名”(Name)、“年龄”(Age)和“性别”(Sex）的初始值:\n那么在设计对应 `@property` 时就应该尽量使用不可变的对象：其三个属性都应该设为“只读”。用初始化方法设置好属性值之后，就不能再改变了。在本例中，仍需声明属性的“内存管理语义”。于是可以把属性的定义改成这样\n\n\n ```objectivec\n        @property (nonatomic, readonly, copy) NSString *name;\n        @property (nonatomic, readonly, assign) NSUInteger age;\n        @property (nonatomic, readonly, assign) CYLSex sex;\n ```\n\n      由于是只读属性，所以编译器不会为其创建对应的“设置方法”，即便如此，我们还是要写上这些属性的语义，以此表明初始化方法在设置这些属性值时所用的方式。要是不写明语义的话，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而且低效。\n      \n 9. `initUserModelWithUserName` 如果改为 `initWithName` 会更加简洁，而且足够清晰。\n 10. `UserModel` 如果改为 `User` 会更加简洁，而且足够清晰。\n 11. `UserSex`如果改为`Sex` 会更加简洁，而且足够清晰。\n 12. 第二个 `@property` 中 assign 和 nonatomic 调换位置。\n 推荐按照下面的格式来定义属性\n\n ```objectivec\n@property (nonatomic, readwrite, copy) NSString *name;\n ```\n 属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理。 这样做你的属性更容易修改正确，并且更好阅读。这在[《禅与Objective-C编程艺术 >》](https://github.com/oa414/objc-zen-book-cn#属性定义)里有介绍。而且习惯上修改某个属性的修饰符时，一般从属性名从右向左搜索需要修动的修饰符。最可能从最右边开始修改这些属性的修饰符，根据经验这些修饰符被修改的可能性从高到底应为：内存管理 > 读写权限 >原子操作。\n\n#### ***硬伤部分***\n\n 1. 在-和(void)之间应该有一个空格\n 3. enum 中驼峰命名法和下划线命名法混用错误：枚举类型的命名规则和函数的命名规则相同：命名时使用驼峰命名法，勿使用下划线命名法。\n 3. enum 左括号前加一个空格，或者将左括号换到下一行\n 4. enum 右括号后加一个空格\n 2. `UserModel :NSObject` 应为`UserModel : NSObject`，也就是`:`右侧少了一个空格。\n 2.  `@interface` 与 `@property` 属性声明中间应当间隔一行。\n 2. 两个方法定义之间不需要换行，有时为了区分方法的功能也可间隔一行，但示例代码中间隔了两行。\n 9. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中方法名与参数之间多了空格。而且 `-` 与 `(id)` 之间少了空格。\n 10. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中方法名与参数之间多了空格：`(NSString*)name` 前多了空格。\n 10. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中 `(NSString*)name`,应为 `(NSString *)name`，少了空格。 \n 7.  <p><del>doLogIn方法中的 `LogIn` 命名不清晰：笔者猜测是login的意思，应该是粗心手误造成的。\n （勘误： `Login` 是名词， `LogIn`  是动词，都表示登陆的意思。见： [ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）</del></p>\n\n### 2. 什么情况使用 weak 关键字，相比 assign 有什么不同？\n什么情况使用 weak 关键字？\n\n\n 1. 在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性\n\n 2. 自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：***《IBOutlet连出来的视图属性为什么可以被设置成weak?》***\n\n不同点：\n \n 1. `weak` 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似，\n然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n而 `assign` 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 \nNSlnteger 等)的简单赋值操作。\n\n 2. assign 可以用非 OC 对象,而 weak 必须用于 OC 对象\n\n### 3. 怎么用 copy 关键字？\n用途：\n\n 1. NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；\n 2. block 也经常使用 copy 关键字，具体原因见[官方文档：***Objects Use Properties to Keep Track of Blocks***](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12)：\n\n  block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.在 ARC 中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但写上 copy 也无伤大雅，还能时刻提醒我们：编译器自动对 block 进行了 copy 操作。如果不写 copy ，该类的调用者有可能会忘记或者根本不知道“编译器会自动对 block 进行了 copy 操作”，他们有可能会在调用之前自行拷贝属性值。这种操作多余而低效。你也许会感觉我这种做法有些怪异，不需要写依然写。如果你这样想，其实是你“日用而不知”，你平时开发中是经常在用我说的这种做法的，比如下面的属性不写copy也行，但是你会选择写还是不写呢？\n\n\n ```objectivec\n @property (nonatomic, copy) NSString *userId;\n\n - (instancetype)initWithUserId:(NSString *)userId {\n    self = [super init];\n    if (!self) {\n        return nil;\n    }\n    _userId = [userId copy];\n    return self;\n }\n\n ```\n\n\n ![enter image description here](http://i.imgur.com/VlVKl8L.png)\n\n下面做下解释：\n copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。\n当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。\n\n\n> 用 `@property` 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。\n \n该问题在下文中也有论述：***用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？***\n\n\n### 4. 这个写法会出什么问题： `@property (copy) NSMutableArray *array;`\n两个问题：1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；2、使用了 atomic 属性会严重影响性能 ； \n\n第1条的相关原因在下文中有论述***《用@property声明的NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？》*** 以及上文***《怎么用 copy 关键字？》***也有论述。\n\n比如下面的代码就会发生崩溃\n\n \n \n```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\n@property (nonatomic, copy) NSMutableArray *mutableArray;\n```\n\n\n```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\nNSMutableArray *array = [NSMutableArray arrayWithObjects:@1,@2,nil];\nself.mutableArray = array;\n[self.mutableArray removeObjectAtIndex:0];\n```\n\n接下来就会奔溃：\n\n \n```objectivec\n -[__NSArrayI removeObjectAtIndex:]: unrecognized selector sent to instance 0x7fcd1bc30460\n```\n\n\n\n第2条原因，如下：\n\n> 该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明 nonatomic 可以节省这些虽然很小但是不必要额外开销。\n\n在默认情况下，由编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的”(atomic))。\n\n在iOS开发中，你会发现，几乎所有属性都声明为 nonatomic。\n\n一般情况下并不要求属性必须是“原子的”，因为这并不能保证“线程安全” ( thread safety)，若要实现“线程安全”的操作，还需采用更为深层的锁定机制才行。例如，一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为 atomic，也还是会读到不同的属性值。\n\n因此，开发iOS程序时一般都会使用 nonatomic 属性。但是在开发 Mac OS X 程序时，使用\n atomic 属性通常都不会有性能瓶颈。\n\n### 5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\n\n\n> 若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 `NSCopying` 与 `NSMutableCopying` 协议。\n\n\n\n\n具体步骤：\n\n 1. 需声明该类遵从 NSCopying 协议\n 2. 实现 NSCopying 协议。该协议只有一个方法: \n\n ```objectivec\n- (id)copyWithZone:(NSZone *)zone;\n```\n注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是 “copyWithZone” 方法。\n\n以第一题的代码为例：\n   \n\n ```objectivec\n\t// .h文件\n\t// http://weibo.com/luohanchenyilong/\n\t// https://github.com/ChenYilong\n\t// 修改完的代码\n\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n\n\t@interface CYLUser : NSObject<NSCopying>\n\n\t@property (nonatomic, readonly, copy) NSString *name;\n\t@property (nonatomic, readonly, assign) NSUInteger age;\n\t@property (nonatomic, readonly, assign) CYLSex sex;\n\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\t+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n\t@end\n ```\n\n\n然后实现协议中规定的方法：\n\n \n```objectivec\n- (id)copyWithZone:(NSZone *)zone {\n\tCYLUser *copy = [[[self class] allocWithZone:zone] \n\t\t             initWithName:_name\n \t\t\t\t\t\t\t      age:_age\n\t\t\t\t\t\t          sex:_sex];\n\treturn copy;\n}\n```\n但在实际的项目中，不可能这么简单，遇到更复杂一点，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。举个例子，假如 CYLUser 中含有一个数组，与其他 CYLUser 对象建立或解除朋友关系的那些方法都需要操作这个数组。那么在这种情况下，你得把这个包含朋友对象的数组也一并拷贝过来。下面列出了实现此功能所需的全部代码:\n\n```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 以第一题《风格纠错题》里的代码为例\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject<NSCopying>\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n- (void)addFriend:(CYLUser *)user;\n- (void)removeFriend:(CYLUser *)user;\n\n@end\n```\n\n// .m文件\n\n\n\n ```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n//\n\n@implementation CYLUser {\n    NSMutableSet *_friends;\n}\n\n- (void)setName:(NSString *)name {\n    _name = [name copy];\n}\n\n- (instancetype)initWithName:(NSString *)name\n                         age:(NSUInteger)age\n                         sex:(CYLSex)sex {\n    if(self = [super init]) {\n        _name = [name copy];\n        _age = age;\n        _sex = sex;\n        _friends = [[NSMutableSet alloc] init];\n    }\n    return self;\n}\n\n- (void)addFriend:(CYLUser *)user {\n    [_friends addObject:user];\n}\n\n- (void)removeFriend:(CYLUser *)user {\n    [_friends removeObject:user];\n}\n\n- (id)copyWithZone:(NSZone *)zone {\n    CYLUser *copy = [[[self class] allocWithZone:zone]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [_friends mutableCopy];\n    return copy;\n}\n\n- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n\n@end\n\n ```\n\n以上做法能满足基本的需求，但是也有缺陷：\n\n> 如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。\n\n【注：深浅拷贝的概念，在下文中有介绍，详见下文的：***用@property声明的 NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用 strong 关键字，可能造成什么问题？***】\n\n在例子中，存放朋友对象的 set 是用 “copyWithZone:” 方法来拷贝的，这种浅拷贝方式不会逐个复制 set 中的元素。若需要深拷贝的话，则可像下面这样，编写一个专供深拷贝所用的方法:\n\t\n\n ```objectivec\n- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n\n ```\n\n至于***如何重写带 copy 关键字的 setter***这个问题，\n\n\n如果抛开本例来回答的话，如下：\n\n\n \n```objectivec\n- (void)setName:(NSString *)name {\n    //[_name release];\n    _name = [name copy];\n}\n```\n\n不过也有争议，有人说“苹果如果像下面这样干，是不是效率会高一些？”\n\n\n ```objectivec\n- (void)setName:(NSString *)name {\n    if (_name != name) {\n        //[_name release];//MRC\n        _name = [name copy];\n    }\n}\n ```\n\n\n\n这样真得高效吗？不见得！这种写法“看上去很美、很合理”，但在实际开发中，它更像下图里的做法：\n\n![enter image description here](http://i.imgur.com/UwV9oSn.jpeg)\n\n克强总理这样评价你的代码风格：\n\n![enter image description here](http://i.imgur.com/N77Lkic.png)\n\n我和总理的意见基本一致：\n\n\n> 老百姓 copy 一下，咋就这么难？\n\n\n\n\n你可能会说：\n\n \n之所以在这里做`if判断` 这个操作：是因为一个 if 可能避免一个耗时的copy，还是很划算的。\n(在刚刚讲的：《如何让自己的类用 copy 修饰符？》里的那种复杂的copy，我们可以称之为 “耗时的copy”，但是对 NSString 的 copy 还称不上。)\n\n\n但是你有没有考虑过代价：\n\n\n> 你每次调用 `setX:` 都会做 if 判断，这会让 `setX:` 变慢，如果你在 `setX:`写了一串复杂的 `if+elseif+elseif+...` 判断，将会更慢。\n\n要回答“哪个效率会高一些？”这个问题，不能脱离实际开发，就算 copy 操作十分耗时，if 判断也不见得一定会更快，除非你把一个“ @property他当前的值 ”赋给了他自己，代码看起来就像：\n\n```objectivec\n[a setX:x1];\n[a setX:x1];    //你确定你要这么干？与其在setter中判断，为什么不把代码写好？\n```\n\n或者\n\n\n```objectivec\n[a setX:[a x]];   //队友咆哮道：你在干嘛？！！\n```\n\n> 不要在 setter 里进行像 `if(_obj != newObj)` 这样的判断。（该观点参考链接：[ ***How To Write Cocoa Object Setters： Principle 3: Only Optimize After You Measure*** ](http://vgable.com/blog/tag/autorelease/)\n）\n\n\n什么情况会在 copy setter 里做 if 判断？\n例如，车速可能就有最高速的限制，车速也不可能出现负值，如果车子的最高速为300，则 setter 的方法就要改写成这样：\n\n \n```objectivec\n-(void)setSpeed:(int)_speed{\n    if(_speed < 0) speed = 0;\n    if(_speed > 300) speed = 300;\n    _speed = speed;\n}\n```\n\n\n\n回到这个题目，如果单单就上文的代码而言，我们不需要也不能重写 name 的 setter ：由于是 name 是只读属性，所以编译器不会为其创建对应的“设置方法”，用初始化方法设置好属性值之后，就不能再改变了。（ 在本例中，之所以还要声明属性的“内存管理语义”--copy，是因为：如果不写 copy，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而低效）。\n\n那如何确保 name 被 copy？在初始化方法(initializer)中做：\n\n ```objectivec\n\t- (instancetype)initWithName:(NSString *)name \n\t\t\t\t\t\t\t\t age:(NSUInteger)age \n\t\t\t\t\t\t\t\t sex:(CYLSex)sex {\n\t     if(self = [super init]) {\n\t     \t_name = [name copy];\n\t     \t_age = age;\n\t     \t_sex = sex;\n\t     \t_friends = [[NSMutableSet alloc] init];\n\t     }\n\t     return self;\n\t}\n\n ```\n\n\n\t\n### 6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\n\n**@property 的本质是什么？**\n\n> @property = ivar + getter + setter;\n\n下面解释下：\n\n> “属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。\n\n“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 `Objective-C 2.0` 的一部分。\n而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。\n正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:\n\n> 编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。\n所以你也可以这么说：\n\n> @property = getter + setter;\n\n例如下面这个类：\n\n\n\n ```objectivec\n@interface Person : NSObject\n@property NSString *firstName;\n@property NSString *lastName;\n@end\n ```\n\n\n上述代码写出来的类与下面这种写法等效：\n\n\n\n ```objectivec\n@interface Person : NSObject\n- (NSString *)firstName;\n- (void)setFirstName:(NSString *)firstName;\n- (NSString *)lastName;\n- (void)setLastName:(NSString *)lastName;\n@end\n ```\n\n**更新**：\n\nproperty在runtime中是`objc_property_t`定义如下:\n\n```objectivec\ntypedef struct objc_property *objc_property_t;\n```\n\n而`objc_property`是一个结构体，包括name和attributes，定义如下：\n\n```objectivec\nstruct property_t {\n    const char *name;\n    const char *attributes;\n};\n```\n\n而attributes本质是`objc_property_attribute_t`，定义了property的一些属性，定义如下：\n\n```objectivec\n/// Defines a property attribute\ntypedef struct {\n    const char *name;           /**< The name of the attribute */\n    const char *value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。\n\n例如：我们定义一个string的property`@property (nonatomic, copy) NSString *string;`，通过 `property_getAttributes(property)`获取到attributes并打印出来之后的结果为`T@\"NSString\",C,N,V_string`\n\n其中T就代表类型，可参阅[Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。\n\n\n\n**ivar、getter、setter 是如何生成并添加到这个类中的?**\n\n> “自动合成”( autosynthesis)\n\n完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译\n器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为\n `_firstName` 与 `_lastName`。也可以在类的实现代码里通过\n `@synthesize` 语法来指定实例变量的名字.\n\n\n\n ```objectivec\n@implementation Person\n@synthesize firstName = _myFirstName;\n@synthesize lastName = _myLastName;\n@end\n ```\n\n我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西\n\n 1. `OBJC_IVAR_$类名$属性名称` ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。\n 2. setter 与 getter 方法对应的实现函数\n 2. `ivar_list` ：成员变量列表\n 2. `method_list` ：方法列表\n 2. `prop_list` ：属性列表\n\n\n也就是说我们每次在增加一个属性,系统都会在 `ivar_list` 中添加一个成员变量的描述,在 `method_list` 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.\n\n### 7. @protocol 和 category 中如何使用 @property\n\n 1. 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n 2. category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n\n  1. `objc_setAssociatedObject`\n  2. `objc_getAssociatedObject`\n\n### 8. runtime 如何实现 weak 属性\n\n要实现 weak 属性，首先要搞清楚 weak 属性的特点：\n\n> weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同 assign 类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n那么 runtime 如何实现 weak 变量的自动置nil？\n\n\n> runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。\n\n（注：在下文的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到`__weak`引用的解除时间。）\n\n\n先看下 runtime 里源码的实现：\n\n\n ```objectivec\n/**\n * The internal structure stored in the weak references table. \n * It maintains and stores\n * a hash set of weak references pointing to an object.\n * If out_of_line==0, the set is instead a small inline array.\n */\n#define WEAK_INLINE_COUNT 4\nstruct weak_entry_t {\n    DisguisedPtr<objc_object> referent;\n    union {\n        struct {\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line : 1;\n            uintptr_t        num_refs : PTR_MINUS_1;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line=0 is LSB of one of these (don't care which)\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n};\n\n/**\n * The global weak references table. Stores object ids as keys,\n * and weak_entry_t structs as their values.\n */\nstruct weak_table_t {\n    weak_entry_t *weak_entries;\n    size_t    num_entries;\n    uintptr_t mask;\n    uintptr_t max_hash_displacement;\n};\n ```\n\n具体完整实现参照 [objc/objc-weak.h](https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-weak.h) 。\n\n\n\n我们可以设计一个函数（伪代码）来表示上述机制：\n\n`objc_storeWeak(&a, b)`函数：\n\n`objc_storeWeak`函数把第二个参数--赋值对象（b）的内存地址作为键值key，将第一个参数--weak修饰的属性变量（a）的内存地址（&a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&a）从weak表中删除，\n\n你可以把`objc_storeWeak(&a, b)`理解为：`objc_storeWeak(value, key)`，并且当key变nil，将value置nil。\n\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。\n\n而如果a是由 assign 修饰的，则：\n在 b 非 nil 时，a 和 b 指向同一个内存地址，在 b 变 nil 时，a 还是指向该内存地址，变野指针。此时向 a 发送消息极易崩溃。\n\n\n下面我们将基于`objc_storeWeak(&a, b)`函数，使用伪代码模拟“runtime如何实现weak属性”：\n \n\n\n \n```objectivec\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&obj1);\n```\n\n下面对用到的两个方法`objc_initWeak`和`objc_destroyWeak`做下解释：\n\n总体说来，作用是：\n通过`objc_initWeak`函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过`objc_destoryWeak`函数释放该变量（obj1）。\n\n下面分别介绍下方法的内部实现：\n\n`objc_initWeak`函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用`objc_storeWeak`函数。\n\n\n\n \n```objectivec\nobj1 = 0；\nobj_storeWeak(&obj1, obj);\n```\n\n也就是说：\n\n>  weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）\n\n\n\n\n然后`obj_destroyWeak`函数将0（nil）作为参数，调用`objc_storeWeak`函数。\n\n`objc_storeWeak(&obj1, 0);`\n\n前面的源代码与下列源代码相同。\n\n\n\n```objectivec\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&obj1, 0);\n```\n\n\n`objc_storeWeak` 函数把第二个参数--赋值对象（obj）的内存地址作为键值，将第一个参数--weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从 weak 表中删除，在后面的相关一题会详解。\n\n使用伪代码是为了方便理解，下面我们“真枪实弹”地实现下：\n\n> 如何让不使用weak修饰的@property，拥有weak的效果。\n\n\n我们从setter方法入手：\n\n（注意以下的 `cyl_runAtDealloc` 方法实现仅仅用于模拟原理，如果想用于项目中，还需要考虑更复杂的场景，想在实际项目使用的话，可以使用我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) ）\n\n ```objectivec\n- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n ```\n\n也就是有两个步骤：\n\n 1. 在setter方法中做如下设置：\n\n\n ```objectivec\n        objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n ```\n\n 2. 在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。做到这点，同样要借助 runtime：\n \n ```objectivec\n//要销毁的目标对象\nid objectToBeDeallocated;\n//可以理解为一个“事件”：当上面的目标对象销毁时，同时要发生的“事件”。\nid objectWeWantToBeReleasedWhenThatHappens;\nobjc_setAssociatedObject(objectToBeDeallocted,\n                         someUniqueKey,\n                         objectWeWantToBeReleasedWhenThatHappens,\n                         OBJC_ASSOCIATION_RETAIN);\n```\n\n知道了思路，我们就开始实现 `cyl_runAtDealloc` 方法，实现过程分两部分：\n\n第一部分：创建一个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助 block 执行“事件”。\n\n// .h文件\n\n ```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\ntypedef void (^voidBlock)(void);\n\n@interface CYLBlockExecutor : NSObject\n\n- (id)initWithBlock:(voidBlock)block;\n\n@end\n ```\n\n// .m文件\n\n ```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\n#import \"CYLBlockExecutor.h\"\n\n@interface CYLBlockExecutor() {\n    voidBlock _block;\n}\n@implementation CYLBlockExecutor\n\n- (id)initWithBlock:(voidBlock)aBlock\n{\n    self = [super init];\n    \n    if (self) {\n        _block = [aBlock copy];\n    }\n    \n    return self;\n}\n\n- (void)dealloc\n{\n    _block ? _block() : nil;\n}\n\n@end\n ```\n\n第二部分：核心代码：利用runtime实现`cyl_runAtDealloc`方法\n\n ```objectivec\n// CYLNSObject+RunAtDealloc.h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import \"CYLBlockExecutor.h\"\n\nconst void *runAtDeallocBlockKey = &runAtDeallocBlockKey;\n\n@interface NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block;\n\n@end\n\n\n// CYLNSObject+RunAtDealloc.m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import \"CYLNSObject+RunAtDealloc.h\"\n#import \"CYLBlockExecutor.h\"\n\n@implementation NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block\n{\n    if (block) {\n        CYLBlockExecutor *executor = [[CYLBlockExecutor alloc] initWithBlock:block];\n        \n        objc_setAssociatedObject(self,\n                                 runAtDeallocBlockKey,\n                                 executor,\n                                 OBJC_ASSOCIATION_RETAIN);\n    }\n}\n\n@end\n ```\n\n使用方法：\n导入\n\n\n ```objectivec\n    #import \"CYLNSObject+RunAtDealloc.h\"\n ```\n\n然后就可以使用了：\n\n\n ```objectivec\nNSObject *foo = [[NSObject alloc] init];\n\n[foo cyl_runAtDealloc:^{\n    NSLog(@\"正在释放foo!\");\n}];\n ```\n\n\n如果对 `cyl_runAtDealloc` 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) \n\n参考博文： [***Fun With the Objective-C Runtime: Run Code at Deallocation of Any Object***](http://stackoverflow.com/a/31560217/3395008)\n\n\n### 9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n属性可以拥有的特质分为四类:\n \n 1. 原子性--- `nonatomic` 特质\n\n    在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。\n\n 2. 读/写权限---`readwrite(读写)`、`readonly (只读)`\n 3. 内存管理语义---`assign`、`strong`、 `weak`、`unsafe_unretained`、`copy`\n 4. 方法名---`getter=<name>` 、`setter=<name>`\n   \n  `getter=<name>`的样式：\n\n\n ```objectivec\n        @property (nonatomic, getter=isOn) BOOL on;\n ```\n <p><del>（ `setter=<name>`这种不常用，也不推荐使用。故不在这里给出写法。）\n</del></p>\n\n\n `setter=<name>`一般用在特殊的情境下，比如：\n\n\n在数据反序列化、转模型的过程中，服务器返回的字段如果以 `init` 开头，所以你需要定义一个 `init` 开头的属性，但默认生成的 `setter` 与 `getter` 方法也会以 `init` 开头，而编译器会把所有以 `init` 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。\n\n这时你就可以使用下面的方式来避免编译器报错：\n\n\n ```objectivec\n@property(nonatomic, strong, getter=p_initBy, setter=setP_initBy:)NSString *initBy;\n\n ```\n\n\n另外也可以用关键字进行特殊说明，来避免编译器报错：\n\n ```objectivec\n@property(nonatomic, readwrite, copy, null_resettable) NSString *initBy;\n- (NSString *)initBy __attribute__((objc_method_family(none)));\n ```\n\n 3. 不常用的：`nonnull`,`null_resettable`,`nullable`\n\n\n注意：很多人会认为如果属性具备 nonatomic 特质，则不使用\n“同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：\n\n\n ```objectivec\nstatic inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)\n{\n    if (offset == 0) {\n        object_setClass(self, newValue);\n        return;\n    }\n\n    id oldValue;\n    id *slot = (id*) ((char*)self + offset);\n\n    if (copy) {\n        newValue = [newValue copyWithZone:nil];\n    } else if (mutableCopy) {\n        newValue = [newValue mutableCopyWithZone:nil];\n    } else {\n        if (*slot == newValue) return;\n        newValue = objc_retain(newValue);\n    }\n\n    if (!atomic) {\n        oldValue = *slot;\n        *slot = newValue;\n    } else {\n        spinlock_t& slotlock = PropertyLocks[slot];\n        slotlock.lock();\n        oldValue = *slot;\n        *slot = newValue;        \n        slotlock.unlock();\n    }\n\n    objc_release(oldValue);\n}\n\nvoid objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) \n{\n    bool copy = (shouldCopy && shouldCopy != MUTABLE_COPY);\n    bool mutableCopy = (shouldCopy == MUTABLE_COPY);\n    reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);\n}\n ```\n\n### 10. weak属性需要在dealloc中置nil么？\n不需要。\n\n\n> 在ARC环境无论是强指针还是弱指针都无需在 dealloc 设置为 nil ， ARC 会自动帮我们处理\n\n即便是编译器不帮我们做这些，weak也不需要在 dealloc 中置nil：\n\n正如上文的：***runtime 如何实现 weak 属性*** 中提到的：\n\n我们模拟下 weak 的 setter 方法，应该如下：\n\n\n ```objectivec\n- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n ```\n\n如果对 `cyl_runAtDealloc` 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) \n\n\n也即:\n\n> 在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n\n\n\n\n\n### 11. @synthesize和@dynamic分别有什么作用？\n\n 1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n 2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n 3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n### 12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n\n 1. 对应基本数据类型默认关键字是\n \n atomic,readwrite,assign\n 2. 对于普通的 Objective-C 对象\n  \n atomic,readwrite,strong\n\n参考链接：\n\n 1. [ ***Objective-C ARC: strong vs retain and weak vs assign*** ](http://stackoverflow.com/a/15541801/3395008)\n\n 2. [ ***Variable property attributes or Modifiers in iOS*** ](http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html)\n\n### 13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n 1. 因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.\n 2. 如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.\n\n copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。\n当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。\n\n\n举例说明：\n\n定义一个以 strong 修饰的 array：\n\n ```objectivec\n@property (nonatomic ,readwrite, strong) NSArray *array;\n ```\n\n然后进行下面的操作：\n\n ```objectivec\n    NSMutableArray *mutableArray = [[NSMutableArray alloc] init];\n    NSArray *array = @[ @1, @2, @3, @4 ];\n    self.array = mutableArray;\n    [mutableArray removeAllObjects];;\n    NSLog(@\"%@\",self.array);\n    \n    [mutableArray addObjectsFromArray:array];\n    self.array = [mutableArray copy];\n    [mutableArray removeAllObjects];;\n    NSLog(@\"%@\",self.array);\n ```\n\n打印结果如下所示：\n\n ```objectivec\n2015-09-27 19:10:32.523 CYLArrayCopyDmo[10681:713670] (\n)\n2015-09-27 19:10:32.524 CYLArrayCopyDmo[10681:713670] (\n    1,\n    2,\n    3,\n    4\n)\n ```\n\n（详见仓库内附录的 Demo。）\n\n\n为了理解这种做法，首先要知道，两种情况：\n\n\n 1. 对非集合类对象的 copy 与 mutableCopy 操作；\n 2. 对集合类对象的 copy 与 mutableCopy 操作。\n\n#### 1. 对非集合类对象的copy操作：\n\n在非集合类对象中：对 immutable 对象进行 copy 操作，是指针复制，mutableCopy 操作时内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。用代码简单表示如下：\n\n - [immutableObject copy] // 浅复制\n - [immutableObject mutableCopy] //深复制\n - [mutableObject copy] //深复制\n - [mutableObject mutableCopy] //深复制\n\t\n比如以下代码：\n\n\n ```objectivec\nNSMutableString *string = [NSMutableString stringWithString:@\"origin\"];//copy\nNSString *stringCopy = [string copy];\n ```\n\n\n查看内存，会发现 string、stringCopy 内存地址都不一样，说明此时都是做内容拷贝、深拷贝。即使你进行如下操作：\n\n\n ```objectivec\n[string appendString:@\"origion!\"]\n ```\n\nstringCopy 的值也不会因此改变，但是如果不使用 copy，stringCopy 的值就会被改变。\n  集合类对象以此类推。\n所以，\n\n> 用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。\n\n#### 2、集合类对象的copy与mutableCopy\n\n集合类对象是指 NSArray、NSDictionary、NSSet ... 之类的对象。下面先看集合类immutable对象使用 copy 和 mutableCopy 的一个例子：\n\n ```objectivec\nNSArray *array = @[@[@\"a\", @\"b\"], @[@\"c\", @\"d\"]];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n ```\n\n查看内容，可以看到 copyArray 和 array 的地址是一样的，而 mCopyArray 和 array 的地址是不同的。说明 copy 操作进行了指针拷贝，mutableCopy 进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝 array 这个对象，array 集合内部的元素仍然是指针拷贝。这和上面的非集合 immutable 对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看 mutable 对象拷贝的例子：\n\n\n ```objectivec\nNSMutableArray *array = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@\"a\"],@\"b\",@\"c\",nil];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n ```\n\n\n查看内存，如我们所料，copyArray、mCopyArray和 array 的内存地址都不一样，说明 copyArray、mCopyArray 都对 array 进行了内容拷贝。同样，我们可以得出结论：\n\n在集合类对象中，对 immutable 对象进行 copy，是指针复制， mutableCopy 是内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下：\n\n\n ```objectivec\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //单层深复制\n[mutableObject copy] //单层深复制\n[mutableObject mutableCopy] //单层深复制\n ```\n\n\n这个代码结论和非集合类的非常相似。\n\n参考链接：[iOS 集合的深复制与浅复制](https://www.zybuluo.com/MicroCai/note/50592)\n\n### 14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为`_foo`的实例变量，那么还会自动合成新变量么？\n在回答之前先说明下一个概念：\n\n> 实例变量 = 成员变量 ＝ ivar\n\n这些说法，笔者下文中，可能都会用到，指的是一个东西。\n\n\n正如\n[Apple官方文档 ***You Can Customize Synthesized Instance Variable Names***](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW6) 所说：\n![enter image description here](http://i.imgur.com/D6d0zGJ.png)\n\n如果使用了属性的话，那么编译器就会自动编写访问属性所需的方法，此过程叫做“自动合成”( auto synthesis)。需要强调的是，这个过程由编译器在编译期执行，所以编辑器里看不到这些“合成方法” (synthesized method)的源代码。除了生成方法代码之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。\n\n \n```objectivec\n@interface CYLPerson : NSObject \n@property NSString *firstName; \n@property NSString *lastName; \n@end\n```\n\n\n在上例中，会生成两个实例变量，其名称分别为\n `_firstName` 与 `_lastName`。也可以在类的实现代码里通过 `@synthesize` 语法来指定实例变量的名字:\n \n```objectivec\n@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end \n```\n\n\n\n上述语法会将生成的实例变量命名为 `_myFirstName` 与 `_myLastName` ，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。\n\n总结下 @synthesize 合成实例变量的规则，有以下几点：\n\n\n 1. 如果指定了成员变量的名称,会生成一个指定的名称的成员变量,\n\n 2. 如果这个成员已经存在了就不再生成了.\n 2. 如果是 `@synthesize foo;` 还会生成一个名称为foo的成员变量，也就是说：\n\n > 如果没有指定成员变量的名称会自动生成一个属性同名的成员变量,\n\n\n\n 2. 如果是 `@synthesize foo = _foo;` 就不会生成成员变量了.\n\n假如 property 名为 foo，存在一个名为 `_foo` 的实例变量，那么还会自动合成新变量么？\n不会。如下图：\n\n![enter image description here](http://i.imgur.com/t28ge4W.png)\n\n\n### 15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n\n回答这个问题前，我们要搞清楚一个问题，什么情况下不会autosynthesis（自动合成）？\n\n 1. 同时重写了 setter 和 getter 时\n 2. 重写了只读属性的 getter 时\n 2. 使用了 @dynamic 时\n 2. 在 @protocol 中定义的所有属性\n 2. 在 category 中定义的所有属性\n 2. 重载的属性 \n \n 当你在子类中重载了父类中的属性，你必须 使用 `@synthesize` 来手动合成ivar。\n\n除了后三条，对其他几个我们可以总结出一个规律：当你想手动管理 @property 的所有内容时，你就会尝试通过实现 @property 的所有“存取方法”（the accessor methods）或者使用 `@dynamic` 来达到这个目的，这时编译器就会认为你打算手动管理 @property，于是编译器就禁用了 autosynthesis（自动合成）。\n\n因为有了 autosynthesis（自动合成），大部分开发者已经习惯不去手动定义ivar，而是依赖于 autosynthesis（自动合成），但是一旦你需要使用ivar，而 autosynthesis（自动合成）又失效了，如果不去手动定义ivar，那么你就得借助 `@synthesize` 来手动合成 ivar。\n\n其实，`@synthesize` 语法还有一个应用场景，但是不太建议大家使用：\n\n可以在类的实现代码里通过 `@synthesize` 语法来指定实例变量的名字:\n \n```objectivec\n@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end \n```\n\n\n\n上述语法会将生成的实例变量命名为 `_myFirstName` 与 `_myLastName`，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。\n\n\n\n举例说明：应用场景：\n\n\n ```objectivec\n\n//\n// .m文件\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 打开第14行和第17行中任意一行，就可编译成功\n\n@import Foundation;\n\n@interface CYLObject : NSObject\n@property (nonatomic, copy) NSString *title;\n@end\n\n@implementation CYLObject {\n    //    NSString *_title;\n}\n\n//@synthesize title = _title;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        _title = @\"微博@iOS程序犭袁\";\n    }\n    return self;\n}\n\n- (NSString *)title {\n    return _title;\n}\n\n- (void)setTitle:(NSString *)title {\n    _title = [title copy];\n}\n\n@end\n ```\n\n结果编译器报错：\n![enter image description here](http://i.imgur.com/fAEGHIo.png)\n\n当你同时重写了 setter 和 getter 时，系统就不会生成 ivar（实例变量/成员变量）。这时候有两种选择：\n\n 1. 要么如第14行：手动创建 ivar\n 2. 要么如第17行：使用`@synthesize foo = _foo;` ，关联 @property 与 ivar。\n\n更多信息，请戳- 》[ ***When should I use @synthesize explicitly?*** ](http://stackoverflow.com/a/19821816/3395008)\n### 16. objc中向一个nil对象发送消息将会发生什么？\n在 Objective-C 中向 nil 发送消息是完全有效的——只是在运行时不会有任何作用:\n\n 1. 如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)。例如：  \n\n \n ```objectivec\nPerson * motherInlaw = [[aPerson spouse] mother];\n```\n\n\n 如果 spouse 对象为 nil，那么发送给 nil 的消息 mother 也将返回 nil。\n 2. 如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者 long long 的整型标量，发送给 nil 的消息将返回0。\n 2. 如果方法返回值为结构体,发送给 nil 的消息将返回0。结构体中各个字段的值将都是0。\n 2. 如果方法的返回值不是上述提到的几种情况，那么发送给 nil 的消息的返回值将是未定义的。\n\n具体原因如下：\n\n\n> objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。\n\n\n那么，为了方便理解这个内容，还是贴一个objc的源代码：\n\n\n \n```objectivec\n// runtime.h（类在runtime中的定义）\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nstruct objc_class {\n  Class isa OBJC_ISA_AVAILABILITY; //isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object\n  #if !__OBJC2__\n  Class super_class OBJC2_UNAVAILABLE; // 父类\n  const char *name OBJC2_UNAVAILABLE; // 类名\n  long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0\n  long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识\n  long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小\n  struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表\n  struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表\n  struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。\n  struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表\n  #endif\n  } OBJC2_UNAVAILABLE;\n```\n\nobjc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。\n那么，回到本题，如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误。\n\n\n### 17. objc中向一个对象发送消息[obj foo]和`objc_msgSend()`函数之间有什么关系？\n具体原因同上题：该方法编译之后就是`objc_msgSend()`函数调用.\n\n我们用 clang 分析下，clang 提供一个命令，可以将Objective-C的源码改写成C++语言，借此可以研究下[obj foo]和`objc_msgSend()`函数之间有什么关系。\n\n以下面的代码为例，由于 clang 后的代码达到了10万多行，为了便于区分，添加了一个叫 iOSinit 方法，\n\n```objectivec\n//\n//  main.m\n//  http://weibo.com/luohanchenyilong/\n//  https://github.com/ChenYilong\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n\n#import \"CYLTest.h\"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOSinit))];\n        return 0;\n    }\n}\n```\n\n在终端中输入\n\n```objectivec\nclang -rewrite-objc main.m\n```\n就可以生成一个`main.cpp`的文件，在最低端（10万4千行左右）\n\n![enter image description here](http://i.imgur.com/eAH5YWn.png)\n\n我们可以看到大概是这样的：\n\n \n```objectivec\n((void ()(id, SEL))(void )objc_msgSend)((id)obj, sel_registerName(\"foo\"));\n```\n\n也就是说：\n\n>  [obj foo];在objc动态编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n### 18. 什么时候会报unrecognized selector的异常？\n\n简单来说：\n\n\n> 当调用该对象上某个方法,而该对象上没有实现这个方法的时候，\n可以通过“消息转发”进行解决。\n\n\n\n简单的流程如下，在上一题中也提到过：\n\n\n> objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。\n\n\nobjc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：\n\n\n 1. Method resolution\n\n objc运行时会调用`+resolveInstanceMethod:`或者 `+resolveClassMethod:`，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。\n\n 2. Fast forwarding\n\n 如果目标对象实现了`-forwardingTargetForSelector:`，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。\n只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。\n这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。\n 3. Normal forwarding\n\n 这一步是Runtime最后一次给你挽救的机会。首先它会发送`-methodSignatureForSelector:`消息获得函数的参数和返回值类型。如果`-methodSignatureForSelector:`返回nil，Runtime则会发出`-doesNotRecognizeSelector:`消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送`-forwardInvocation:`消息给目标对象。\n\n为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ `_objc_msgForward_demo` ”,可运行起来看看。\n\n### 19. 一个objc对象如何进行内存布局？（考虑有父类的情况）\n\n - 所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中.\n - 每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的\n\n\n  1. 对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）\n  2. 成员变量的列表,\n  2. 属性列表,\n\n 它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。\n\n每个 Objective-C 对象都有相同的结构，如下图所示：\n\n ![enter image description here](http://i.imgur.com/7mJlUj1.png)\n\n翻译过来就是\n\n|  Objective-C 对象的结构图 | \n ------------- |\n ISA指针 |\n 根类的实例变量 |\n 倒数第二层父类的实例变量 |\n ... |\n 父类的实例变量 |\n 类的实例变量 | \n\n\n - 根对象就是NSObject，它的superclass指针指向nil\n\n - 类对象既然称为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类(meta class)，即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。\n\n\n\n如图:\n![enter image description here](http://i.imgur.com/w6tzFxz.png)\n\n### 20. 一个objc对象的isa的指针指向什么？有什么作用？\n\n指向他的类对象,从而可以找到对象上的方法\n\n### 21. 下面的代码输出什么？\n\n\n\n\n ```objectivec\n\t@implementation Son : Father\n\t- (id)init\n\t{\n\t    self = [super init];\n\t    if (self) {\n\t        NSLog(@\"%@\", NSStringFromClass([self class]));\n\t        NSLog(@\"%@\", NSStringFromClass([super class]));\n\t    }\n\t    return self;\n\t}\n\t@end\n ```\n\n\n**答案：**\n\n都输出 Son\n\n\tNSStringFromClass([self class]) = Son\n\tNSStringFromClass([super class]) = Son\n \n\n\n这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。\n \n\n我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？\n\n很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\n\n上面的例子不管调用`[self class]`还是`[super class]`，接受消息的对象都是当前 `Son ＊xxx` 这个对象。\n\n当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。\n\n\n这也就是为什么说“不推荐在 init 方法中使用点语法”，如果想访问实例变量 iVar 应该使用下划线（ `_iVar` ），而非点语法（ `self.iVar` ）。\n\n点语法（ `self.iVar` ）的坏处就是子类有可能覆写 setter 。假设 Person 有一个子类叫 ChenPerson，这个子类专门表示那些姓“陈”的人。该子类可能会覆写 lastName 属性所对应的设置方法：\n\n ```objectivec\n//\n//  ChenPerson.m\n//  \n//\n//  Created by https://github.com/ChenYilong on 15/8/30.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import \"ChenPerson.h\"\n\n@implementation ChenPerson\n\n@synthesize lastName = _lastName;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([super class]));\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    //设置方法一：如果setter采用是这种方式，就可能引起崩溃\n//    if (![lastName isEqualToString:@\"陈\"])\n//    {\n//        [NSException raise:NSInvalidArgumentException format:@\"姓不是陈\"];\n//    }\n//    _lastName = lastName;\n    \n    //设置方法二：如果setter采用是这种方式，就可能引起崩溃\n    _lastName = @\"陈\";\n    NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, @\"会调用这个方法,想一下为什么？\");\n\n}\n\n@end\n ```\n\n在基类 Person 的默认初始化方法中，可能会将姓氏设为空字符串。此时若使用点语法（ `self.lastName` ）也即 setter 设置方法，那么调用将会是子类的设置方法，如果在刚刚的 setter 代码中采用设置方法一，那么就会抛出异常，\n\n\n为了方便采用打印的方式展示，究竟发生了什么，我们使用设置方法二。\n\n\n如果基类的代码是这样的：\n\n\n ```objectivec\n//\n//  Person.m\n//  nil对象调用点语法\n//\n//  Created by https://github.com/ChenYilong on 15/8/29.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//  \n\n#import \"Person.h\"\n\n@implementation Person\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        self.lastName = @\"\";\n        //NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        //NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, self.lastName);\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, @\"根本不会调用这个方法\");\n    _lastName = @\"炎黄\";\n}\n\n@end\n ```\n\n那么打印结果将会是这样的：\n\n ```objectivec\n 🔴类名与方法名：-[ChenPerson setLastName:]（在第36行），描述：会调用这个方法,想一下为什么？\n 🔴类名与方法名：-[ChenPerson init]（在第19行），描述：ChenPerson\n 🔴类名与方法名：-[ChenPerson init]（在第20行），描述：ChenPerson\n ```\n\n我在仓库里也给出了一个相应的 Demo（名字叫：Demo_21题_下面的代码输出什么）。有兴趣可以跑起来看一下，主要看下他是怎么打印的，思考下为什么这么打印。\n\n\n接下来让我们利用 runtime 的相关知识来验证一下 super 关键字的本质，使用clang重写命令:\n\n\n ```objectivec\n\t$ clang -rewrite-objc test.m\n ```\n\n将这道题目中给出的代码被转化为:\n\n\n ```objectivec\n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(\"class\"))));\n\n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super){ (id)self, (id)class_getSuperclass(objc_getClass(\"Son\")) }, sel_registerName(\"class\"))));\n ```\n\n从上面的代码中，我们可以发现在调用 [self class] 时，会转化成 `objc_msgSend`函数。看下函数定义：\n\n\n ```objectivec\n\tid objc_msgSend(id self, SEL op, ...)\n ```\n我们把 self 做为第一个参数传递进去。\n\n而在调用 [super class]时，会转化成 `objc_msgSendSuper`函数。看下函数定义:\n\n\n ```objectivec\n\tid objc_msgSendSuper(struct objc_super *super, SEL op, ...)\n ```\n\n第一个参数是 `objc_super` 这样一个结构体，其定义如下:\n\n\n ```objectivec\nstruct objc_super {\n\t   __unsafe_unretained id receiver;\n\t   __unsafe_unretained Class super_class;\n};\n ```\n\n结构体有两个成员，第一个成员是 receiver, 类似于上面的 `objc_msgSend`函数第一个参数self 。第二个成员是记录当前类的父类是什么。\n\n所以，当调用 ［self class] 时，实际先调用的是 `objc_msgSend`函数，第一个参数是 Son当前的这个实例，然后在 Son 这个类里面去找 - (Class)class这个方法，没有，去父类 Father里找，也没有，最后在 NSObject类中发现这个方法。而 - (Class)class的实现就是返回self的类别，故上述输出结果为 Son。\n\nobjc Runtime开源代码对- (Class)class方法的实现:\n\n\n ```objectivec\n- (Class)class {\n    return object_getClass(self);\n}\n ```\n\n而当调用 `[super class]`时，会转换成`objc_msgSendSuper函数`。第一步先构造 `objc_super` 结构体，结构体第一个成员就是 `self` 。\n第二个成员是 `(id)class_getSuperclass(objc_getClass(“Son”))` , 实际该函数输出结果为 Father。\n\n第二步是去 Father这个类里去找 `- (Class)class`，没有，然后去NSObject类去找，找到了。最后内部是使用 `objc_msgSend(objc_super->receiver, @selector(class))`去调用，\n\n此时已经和`[self class]`调用相同了，故上述输出结果仍然返回 Son。\n\n\n参考链接：[微博@Chun_iOS](http://weibo.com/junbbcom)的博文[刨根问底Objective－C Runtime（1）－ Self & Super](http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(1)%5Bnil%5D-self-and-super/)\n\n\n### 22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.\n\n### 23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\n\n - 在ARC下不需要。\n - <p><del> 在MRC中,对于使用retain或copy策略的需要 。</del></p>在MRC下也不需要\n\n> 无论在MRC下还是ARC下均不需要。\n\n\n[ ***2011年版本的Apple API 官方文档 - Associative References***  ](https://web.archive.org/web/20120818164935/http://developer.apple.com/library/ios/#/web/20120820002100/http://developer.apple.com/library/ios/documentation/cocoa/conceptual/objectivec/Chapters/ocAssociativeReferences.html) 一节中有一个MRC环境下的例子：\n\n\n \n```objectivec\n// 在MRC下，使用runtime Associate方法关联的对象，不需要在主对象dealloc的时候释放\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 摘自2011年版本的Apple API 官方文档 - Associative References \n\nstatic char overviewKey;\n \nNSArray *array =\n    [[NSArray alloc] initWithObjects:@\"One\", @\"Two\", @\"Three\", nil];\n// For the purposes of illustration, use initWithFormat: to ensure\n// the string can be deallocated\nNSString *overview =\n    [[NSString alloc] initWithFormat:@\"%@\", @\"First three numbers\"];\n \nobjc_setAssociatedObject (\n    array,\n    &overviewKey,\n    overview,\n    OBJC_ASSOCIATION_RETAIN\n);\n \n[overview release];\n// (1) overview valid\n[array release];\n// (2) overview invalid\n```\n文档指出 \n\n> At point 1, the string `overview` is still valid because the `OBJC_ASSOCIATION_RETAIN` policy specifies that the array retains the associated object. When the array is deallocated, however (at point 2), `overview` is released and so in this case also deallocated.\n\n我们可以看到，在`[array release];`之后，overview就会被release释放掉了。\n\n既然会被销毁，那么具体在什么时间点？\n\n\n> 根据[ ***WWDC 2011, Session 322 (第36分22秒)*** ](https://developer.apple.com/videos/wwdc/2011/#322-video)中发布的内存销毁时间表，被关联的对象在生命周期内要比对象本身释放的晚很多。它们会在被 NSObject -dealloc 调用的 object_dispose() 方法中释放。\n\n对象的内存销毁时间表，分四个步骤：\n\n\t// 对象的内存销毁时间表\n\t// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n\t// https://github.com/ChenYilong\n    // 根据 WWDC 2011, Session 322 (36分22秒)中发布的内存销毁时间表 \n\n     1. 调用 -release ：引用计数变为零\n         * 对象正在被销毁，生命周期即将结束.\n         * 不能再有新的 __weak 弱引用， 否则将指向 nil.\n         * 调用 [self dealloc] \n     2. 子类 调用 -dealloc\n         * 继承关系中最底层的子类 在调用 -dealloc\n         * 如果是 MRC 代码 则会手动释放实例变量们（iVars）\n         * 继承关系中每一层的父类 都在调用 -dealloc\n     3. NSObject 调 -dealloc\n         * 只做一件事：调用 Objective-C runtime 中的 object_dispose() 方法\n     4. 调用 object_dispose()\n         * 为 C++ 的实例变量们（iVars）调用 destructors \n         * 为 ARC 状态下的 实例变量们（iVars） 调用 -release \n         * 解除所有使用 runtime Associate方法关联的对象\n         * 解除所有 __weak 引用\n         * 调用 free()\n\n\n对象的内存销毁时间表：[参考链接](http://stackoverflow.com/a/10843510/3395008)。\n\n\n\n\n\n### 24. objc中的类方法和实例方法有什么本质区别和联系？\n\n类方法：\n\n 1. 类方法是属于类对象的\n 2. 类方法只能通过类对象调用\n 2. 类方法中的self是类对象\n 2. 类方法可以调用其他的类方法\n 2. 类方法中不能访问成员变量\n 2. 类方法中不能直接调用对象方法\n\n实例方法：\n\n 1. 实例方法是属于实例对象的\n 2. 实例方法只能通过实例对象调用\n 2. 实例方法中的self是实例对象\n 2. 实例方法中可以访问成员变量\n 2. 实例方法中直接调用实例方法\n 2. 实例方法中也可以调用类方法(通过类名)\n\n\n下一篇文章将发布在[这里](https://github.com/ChenYilong/iOSInterviewQuestions)，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)\n----------\n@property部分主要参考\n[Apple官方文档：Properties Encapsulate an Object’s Values](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW2)\nruntime部分主要参考[Apple官方文档：Declared Properties](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html)\n\n\n### 25. `_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n### 26. runtime如何实现weak变量的自动置nil？\n\n### 27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？ \n\n### 28. runloop和线程有什么关系？\n\n\n### 29. runloop的mode作用是什么？\n\n### 30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n### 31. 猜想runloop内部是如何实现的？\n### 32. objc使用什么机制管理对象内存？\n### 33. ARC通过什么方式帮助开发者管理内存？\n### 34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n### 35. `BAD_ACCESS`在什么情况下出现？\n### 36. 苹果是如何实现autoreleasepool的？ \n### 37. 使用block时什么情况会发生引用循环，如何解决？\n### 38. 在block内如何修改block外部变量？\n### 39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？ \n### 40. GCD的队列（`dispatch_queue_t`）分哪两种类型？\n### 41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n### 42. `dispatch_barrier_async`的作用是什么？\n### 43. 苹果为什么要废弃`dispatch_get_current_queue`？\n### 44. 以下代码运行结果如何？\n\n\n\t- (void)viewDidLoad\n\t{\n\t    [super viewDidLoad];\n\t    NSLog(@\"1\");\n\t    dispatch_sync(dispatch_get_main_queue(), ^{\n\t        NSLog(@\"2\");\n\t    });\n\t    NSLog(@\"3\");\n\t}\n\n### 45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n### 46. 如何手动触发一个value的KVO\n### 47. 若一个类有实例变量`NSString *_foo`，调用setValue:forKey:时，可以以foo还是`_foo`作为key？\n### 48. KVC的keyPath中的集合运算符如何使用？\n### 49. KVC和KVO的keyPath一定是属性么？\n### 50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n### 51. apple用什么方式实现对一个对象的KVO？ \n### 52. IBOutlet连出来的视图属性为什么可以被设置成weak?\n### 53. IB中User Defined Runtime Attributes如何使用？ \n### 54. 如何调试`BAD_ACCESS`错误\n### 55. lldb（gdb）常用的调试命令？\n\n\n\n----------\n\n\nPosted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  \n原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)\n\n\n","source":"_posts/《招聘一个靠谱的iOS》面试题参考答案（上）.md","raw":"---\ntitle: 《招聘一个靠谱的iOS》面试题参考答案（上）\ndate: 2017-05-24 14:56:32\ncategories: \n\t- 面试经\n---\n[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)—参考答案（上）\n\n\n说明：面试题来源是[微博@我就叫Sunny怎么了](http://weibo.com/u/1364395395)的这篇博文：[《招聘一个靠谱的 iOS》](http://blog.sunnyxx.com/2015/07/04/ios-interview/)，其中共55题，除第一题为纠错题外，其他54道均为简答题。\n\n\n作者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。\n\n答案为[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)整理，未经出题者校对，如有纰漏，请向[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)指正。\n\n----------\n\n# 索引\n\n 1.  [风格纠错题](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-风格纠错题) \n\n  1.  [优化部分](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#优化部分) \n  2.  [硬伤部分](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#硬伤部分) \n 2.   [什么情况使用 weak 关键字，相比 assign 有什么不同？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2-什么情况使用-weak-关键字相比-assign-有什么不同) \n 3.  [怎么用 copy 关键字？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#3-怎么用-copy-关键字) \n 4.  [这个写法会出什么问题： @property (copy) NSMutableArray *array;](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#4-这个写法会出什么问题-property-copy-nsmutablearray-array) \n 5.  [ 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#5-如何让自己的类用-copy-修饰符如何重写带-copy-关键字的-setter) \n 6.  [@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#6-property-的本质是什么ivargettersetter-是如何生成并添加到这个类中的) \n 7.  [@protocol 和 category 中如何使用 @property](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#7-protocol-和-category-中如何使用-property) \n 8.  [ runtime 如何实现 weak 属性](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#8-runtime-如何实现-weak-属性) \n 9.  [@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#9-property中有哪些属性关键字-property-后面可以有哪些修饰符) \n 10. [ weak属性需要在dealloc中置nil么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#10-weak属性需要在dealloc中置nil么)\n 11.  [@synthesize和@dynamic分别有什么作用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#11-synthesize和dynamic分别有什么作用) \n 12.  [ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#12-arc下不显式指定任何属性关键字时默认的关键字都有哪些) \n 13.  [用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#13-用property声明的nsstring或nsarraynsdictionary经常使用copy关键字为什么如果改用strong关键字可能造成什么问题) \n  1.  [对非集合类对象的copy操作](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-对非集合类对象的copy操作) \n  2.  [集合类对象的copy与mutableCopy](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2集合类对象的copy与mutablecopy) \n 14.  [@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#14-synthesize合成实例变量的规则是什么假如property名为foo存在一个名为_foo的实例变量那么还会自动合成新变量么) \n 15.  [在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#15-在有了自动合成属性实例变量之后synthesize还有哪些使用场景) \n 16.  [objc中向一个nil对象发送消息将会发生什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#16-objc中向一个nil对象发送消息将会发生什么) \n 17.  [objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#17-objc中向一个对象发送消息obj-foo和objc_msgsend函数之间有什么关系) \n 18.  [什么时候会报unrecognized selector的异常？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#18-什么时候会报unrecognized-selector的异常) \n 19.  [一个objc对象如何进行内存布局？（考虑有父类的情况）](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#19-一个objc对象如何进行内存布局考虑有父类的情况) \n 20. [一个objc对象的isa的指针指向什么？有什么作用？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#20-一个objc对象的isa的指针指向什么有什么作用)\n 21.  [下面的代码输出什么？](https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#21-下面的代码输出什么) \n\n\n ```objectivec\n\t@implementation Son : Father\n\t- (id)init\n\t{\n\t    self = [super init];\n\t    if (self) {\n\t        NSLog(@\"%@\", NSStringFromClass([self class]));\n\t        NSLog(@\"%@\", NSStringFromClass([super class]));\n\t    }\n\t    return self;\n\t}\n\t@end\n ```\n\n 22. 22--55题，请看下篇。\n\n### 1. 风格纠错题\n![enter image description here](http://i.imgur.com/O7Zev94.png)\n修改完的代码：\n\n修改方法有很多种，现给出一种做示例：\n\n\n ```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject<NSCopying>\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n@end\n ```\n\n\n\n\n下面对具体修改的地方，分两部分做下介绍：**硬伤部分** 和 **优化部分**\n。因为**硬伤部分**没什么技术含量，为了节省大家时间，放在后面讲，大神请直接看**优化部分**。\n\n\n#### **优化部分**\n\n 1. enum 建议使用 `NS_ENUM` 和 `NS_OPTIONS` 宏来定义枚举类型，参见官方的 [Adopting Modern Objective-C](https://developer.apple.com/library/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html) 一文：\n\n\n ```objectivec\n//定义一个枚举\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n ```\n （仅仅让性别包含男和女可能并不严谨，最严谨的做法可以参考 [这里](https://github.com/ChenYilong/iOSInterviewQuestions/issues/9) 。）\n \n 2. age 属性的类型：应避免使用基本类型，建议使用 Foundation 数据类型，对应关系如下：\n \n ```objectivec\n\tint -> NSInteger\n\tunsigned -> NSUInteger\n\tfloat -> CGFloat\n\t动画时间 -> NSTimeInterval\n```\n同时考虑到 age 的特点，应使用 NSUInteger ，而非 int 。\n这样做的是基于64-bit 适配考虑，详情可参考出题者的博文[《64-bit Tips》](http://blog.sunnyxx.com/2014/12/20/64-bit-tips/)。\n\n\n 3. 如果工程项目非常庞大，需要拆分成不同的模块，可以在类、typedef宏命名的时候使用前缀。\n 4. doLogIn方法不应写在该类中： <p><del>虽然`LogIn`的命名不太清晰，但笔者猜测是login的意思， （勘误：Login是名词，LogIn 是动词，都表示登陆的意思。见： [ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）</del></p>登录操作属于业务逻辑，观察类名 UserModel ，以及属性的命名方式，该类应该是一个 Model 而不是一个“ MVVM 模式下的 ViewModel ”：\n\n\n > 无论是 MVC 模式还是 MVVM 模式，业务逻辑都不应当写在 Model 里：MVC 应在 C，MVVM 应在 VM。\n\n\n （如果抛开命名规范，假设该类真的是 MVVM 模式里的 ViewModel ，那么 UserModel 这个类可能对应的是用户注册页面，如果有特殊的业务需求，比如： `-logIn` 对应的应当是注册并登录的一个 Button ，出现 `-logIn` 方法也可能是合理的。）\n\n 5.  doLogIn 方法命名不规范：添加了多余的动词前缀。\n请牢记：\n\n  > 如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用 `do`，`does` 这种多余的关键字，动词本身的暗示就足够了。\n\n 应为 `-logIn` （注意： `Login` 是名词， `LogIn`  是动词，都表示登陆。  见[ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）\n\n 6. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;`方法中不要用 `with` 来连接两个参数: `withAge:` 应当换为`age:`，`age:` 已经足以清晰说明参数的作用，也不建议用 `andAge:` ：通常情况下，即使有类似 `withA:withB:` 的命名需求，也通常是使用`withA:andB:` 这种命名，用来表示方法执行了两个相对独立的操作（*从设计上来说，这时候也可以拆分成两个独立的方法*），它不应该用作阐明有多个参数，比如下面的：\n\n  ```objectivec\n//错误，不要使用\"and\"来连接参数\n- (int)runModalForDirectory:(NSString *)path andFile:(NSString *)name andTypes:(NSArray *)fileTypes;\n//错误，不要使用\"and\"来阐明有多个参数\n- (instancetype)initWithName:(CGFloat)width andAge:(CGFloat)height;\n//正确，使用\"and\"来表示两个相对独立的操作\n- (BOOL)openFile:(NSString *)fullPath withApplication:(NSString *)appName andDeactivate:(BOOL)flag;\n```\n\n 7. 由于字符串值可能会改变，所以要把相关属性的“内存管理语义”声明为 copy 。(原因在下文有详细论述：***用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？***)\n 8. “性别”(sex）属性的：该类中只给出了一种“初始化方法” (initializer)用于设置“姓名”(Name)和“年龄”(Age)的初始值，那如何对“性别”(Sex）初始化？\n\n Objective-C 有 designated 和 secondary 初始化方法的观念。 designated 初始化方法是提供所有的参数，secondary 初始化方法是一个或多个，并且提供一个或者更多的默认参数来调用 designated 初始化方法的初始化方法。举例说明：\n\n \n\n \n ```objectivec\n\n    // .m文件\n    // http://weibo.com/luohanchenyilong/\n    // https://github.com/ChenYilong\n    //\n\n    @implementation CYLUser\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age\n                             sex:(CYLSex)sex {\n        if(self = [super init]) {\n            _name = [name copy];\n            _age = age;\n            _sex = sex;\n        }\n        return self;\n    }\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age {\n        return [self initWithName:name age:age sex:nil];\n    }\n\n    @end\n```\n\n\n\n\n\n\n 上面的代码中initWithName:age:sex: 就是 designated 初始化方法，另外的是 secondary 初始化方法。因为仅仅是调用类实现的 designated 初始化方法。\n\n  因为出题者没有给出 `.m` 文件，所以有两种猜测：1：本来打算只设计一个 designated 初始化方法，但漏掉了“性别”(sex）属性。那么最终的修改代码就是上文给出的第一种修改方法。2：不打算初始时初始化“性别”(sex）属性，打算后期再修改，如果是这种情况，那么应该把“性别”(sex）属性设为 readwrite 属性，最终给出的修改代码应该是：\n\n\n\n \n ```objectivec\n\n\n\t// .h文件\n\t// http://weibo.com/luohanchenyilong/\n\t// https://github.com/ChenYilong\n\t// 第二种修改方法（基于第一种修改方法的基础上）\n\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n\n\t@interface CYLUser : NSObject<NSCopying>\n\n\t@property (nonatomic, readonly, copy) NSString *name;\n\t@property (nonatomic, readonly, assign) NSUInteger age;\n\t@property (nonatomic, readwrite, assign) CYLSex sex;\n\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age;\n\t+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n\t@end\n```\n\n\n  `.h` 中暴露 designated 初始化方法，是为了方便子类化 （想了解更多，请戳--》 [***《禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）》***](http://is.gd/OQ49zk)。）\n\n\n   - 按照接口设计的惯例，如果设计了“初始化方法” (initializer)，也应当搭配一个快捷构造方法。而快捷构造方法的返回值，建议为 instancetype，为保持一致性，init 方法和快捷构造方法的返回类型最好都用 instancetype。\n   - 如果基于第一种修改方法：既然该类中已经有一个“初始化方法” (initializer)，用于设置“姓名”(Name)、“年龄”(Age)和“性别”(Sex）的初始值:\n那么在设计对应 `@property` 时就应该尽量使用不可变的对象：其三个属性都应该设为“只读”。用初始化方法设置好属性值之后，就不能再改变了。在本例中，仍需声明属性的“内存管理语义”。于是可以把属性的定义改成这样\n\n\n ```objectivec\n        @property (nonatomic, readonly, copy) NSString *name;\n        @property (nonatomic, readonly, assign) NSUInteger age;\n        @property (nonatomic, readonly, assign) CYLSex sex;\n ```\n\n      由于是只读属性，所以编译器不会为其创建对应的“设置方法”，即便如此，我们还是要写上这些属性的语义，以此表明初始化方法在设置这些属性值时所用的方式。要是不写明语义的话，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而且低效。\n      \n 9. `initUserModelWithUserName` 如果改为 `initWithName` 会更加简洁，而且足够清晰。\n 10. `UserModel` 如果改为 `User` 会更加简洁，而且足够清晰。\n 11. `UserSex`如果改为`Sex` 会更加简洁，而且足够清晰。\n 12. 第二个 `@property` 中 assign 和 nonatomic 调换位置。\n 推荐按照下面的格式来定义属性\n\n ```objectivec\n@property (nonatomic, readwrite, copy) NSString *name;\n ```\n 属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理。 这样做你的属性更容易修改正确，并且更好阅读。这在[《禅与Objective-C编程艺术 >》](https://github.com/oa414/objc-zen-book-cn#属性定义)里有介绍。而且习惯上修改某个属性的修饰符时，一般从属性名从右向左搜索需要修动的修饰符。最可能从最右边开始修改这些属性的修饰符，根据经验这些修饰符被修改的可能性从高到底应为：内存管理 > 读写权限 >原子操作。\n\n#### ***硬伤部分***\n\n 1. 在-和(void)之间应该有一个空格\n 3. enum 中驼峰命名法和下划线命名法混用错误：枚举类型的命名规则和函数的命名规则相同：命名时使用驼峰命名法，勿使用下划线命名法。\n 3. enum 左括号前加一个空格，或者将左括号换到下一行\n 4. enum 右括号后加一个空格\n 2. `UserModel :NSObject` 应为`UserModel : NSObject`，也就是`:`右侧少了一个空格。\n 2.  `@interface` 与 `@property` 属性声明中间应当间隔一行。\n 2. 两个方法定义之间不需要换行，有时为了区分方法的功能也可间隔一行，但示例代码中间隔了两行。\n 9. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中方法名与参数之间多了空格。而且 `-` 与 `(id)` 之间少了空格。\n 10. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中方法名与参数之间多了空格：`(NSString*)name` 前多了空格。\n 10. `-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;` 方法中 `(NSString*)name`,应为 `(NSString *)name`，少了空格。 \n 7.  <p><del>doLogIn方法中的 `LogIn` 命名不清晰：笔者猜测是login的意思，应该是粗心手误造成的。\n （勘误： `Login` 是名词， `LogIn`  是动词，都表示登陆的意思。见： [ ***Log in vs. login*** ](http://grammarist.com/spelling/log-in-login/)）</del></p>\n\n### 2. 什么情况使用 weak 关键字，相比 assign 有什么不同？\n什么情况使用 weak 关键字？\n\n\n 1. 在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性\n\n 2. 自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：***《IBOutlet连出来的视图属性为什么可以被设置成weak?》***\n\n不同点：\n \n 1. `weak` 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似，\n然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n而 `assign` 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 \nNSlnteger 等)的简单赋值操作。\n\n 2. assign 可以用非 OC 对象,而 weak 必须用于 OC 对象\n\n### 3. 怎么用 copy 关键字？\n用途：\n\n 1. NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；\n 2. block 也经常使用 copy 关键字，具体原因见[官方文档：***Objects Use Properties to Keep Track of Blocks***](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12)：\n\n  block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.在 ARC 中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但写上 copy 也无伤大雅，还能时刻提醒我们：编译器自动对 block 进行了 copy 操作。如果不写 copy ，该类的调用者有可能会忘记或者根本不知道“编译器会自动对 block 进行了 copy 操作”，他们有可能会在调用之前自行拷贝属性值。这种操作多余而低效。你也许会感觉我这种做法有些怪异，不需要写依然写。如果你这样想，其实是你“日用而不知”，你平时开发中是经常在用我说的这种做法的，比如下面的属性不写copy也行，但是你会选择写还是不写呢？\n\n\n ```objectivec\n @property (nonatomic, copy) NSString *userId;\n\n - (instancetype)initWithUserId:(NSString *)userId {\n    self = [super init];\n    if (!self) {\n        return nil;\n    }\n    _userId = [userId copy];\n    return self;\n }\n\n ```\n\n\n ![enter image description here](http://i.imgur.com/VlVKl8L.png)\n\n下面做下解释：\n copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。\n当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。\n\n\n> 用 `@property` 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。\n \n该问题在下文中也有论述：***用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？***\n\n\n### 4. 这个写法会出什么问题： `@property (copy) NSMutableArray *array;`\n两个问题：1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；2、使用了 atomic 属性会严重影响性能 ； \n\n第1条的相关原因在下文中有论述***《用@property声明的NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？》*** 以及上文***《怎么用 copy 关键字？》***也有论述。\n\n比如下面的代码就会发生崩溃\n\n \n \n```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\n@property (nonatomic, copy) NSMutableArray *mutableArray;\n```\n\n\n```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\nNSMutableArray *array = [NSMutableArray arrayWithObjects:@1,@2,nil];\nself.mutableArray = array;\n[self.mutableArray removeObjectAtIndex:0];\n```\n\n接下来就会奔溃：\n\n \n```objectivec\n -[__NSArrayI removeObjectAtIndex:]: unrecognized selector sent to instance 0x7fcd1bc30460\n```\n\n\n\n第2条原因，如下：\n\n> 该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明 nonatomic 可以节省这些虽然很小但是不必要额外开销。\n\n在默认情况下，由编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的”(atomic))。\n\n在iOS开发中，你会发现，几乎所有属性都声明为 nonatomic。\n\n一般情况下并不要求属性必须是“原子的”，因为这并不能保证“线程安全” ( thread safety)，若要实现“线程安全”的操作，还需采用更为深层的锁定机制才行。例如，一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为 atomic，也还是会读到不同的属性值。\n\n因此，开发iOS程序时一般都会使用 nonatomic 属性。但是在开发 Mac OS X 程序时，使用\n atomic 属性通常都不会有性能瓶颈。\n\n### 5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\n\n\n> 若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 `NSCopying` 与 `NSMutableCopying` 协议。\n\n\n\n\n具体步骤：\n\n 1. 需声明该类遵从 NSCopying 协议\n 2. 实现 NSCopying 协议。该协议只有一个方法: \n\n ```objectivec\n- (id)copyWithZone:(NSZone *)zone;\n```\n注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是 “copyWithZone” 方法。\n\n以第一题的代码为例：\n   \n\n ```objectivec\n\t// .h文件\n\t// http://weibo.com/luohanchenyilong/\n\t// https://github.com/ChenYilong\n\t// 修改完的代码\n\n\ttypedef NS_ENUM(NSInteger, CYLSex) {\n\t    CYLSexMan,\n\t    CYLSexWoman\n\t};\n\n\t@interface CYLUser : NSObject<NSCopying>\n\n\t@property (nonatomic, readonly, copy) NSString *name;\n\t@property (nonatomic, readonly, assign) NSUInteger age;\n\t@property (nonatomic, readonly, assign) CYLSex sex;\n\n\t- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\t+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n\t@end\n ```\n\n\n然后实现协议中规定的方法：\n\n \n```objectivec\n- (id)copyWithZone:(NSZone *)zone {\n\tCYLUser *copy = [[[self class] allocWithZone:zone] \n\t\t             initWithName:_name\n \t\t\t\t\t\t\t      age:_age\n\t\t\t\t\t\t          sex:_sex];\n\treturn copy;\n}\n```\n但在实际的项目中，不可能这么简单，遇到更复杂一点，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。举个例子，假如 CYLUser 中含有一个数组，与其他 CYLUser 对象建立或解除朋友关系的那些方法都需要操作这个数组。那么在这种情况下，你得把这个包含朋友对象的数组也一并拷贝过来。下面列出了实现此功能所需的全部代码:\n\n```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 以第一题《风格纠错题》里的代码为例\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject<NSCopying>\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n- (void)addFriend:(CYLUser *)user;\n- (void)removeFriend:(CYLUser *)user;\n\n@end\n```\n\n// .m文件\n\n\n\n ```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n//\n\n@implementation CYLUser {\n    NSMutableSet *_friends;\n}\n\n- (void)setName:(NSString *)name {\n    _name = [name copy];\n}\n\n- (instancetype)initWithName:(NSString *)name\n                         age:(NSUInteger)age\n                         sex:(CYLSex)sex {\n    if(self = [super init]) {\n        _name = [name copy];\n        _age = age;\n        _sex = sex;\n        _friends = [[NSMutableSet alloc] init];\n    }\n    return self;\n}\n\n- (void)addFriend:(CYLUser *)user {\n    [_friends addObject:user];\n}\n\n- (void)removeFriend:(CYLUser *)user {\n    [_friends removeObject:user];\n}\n\n- (id)copyWithZone:(NSZone *)zone {\n    CYLUser *copy = [[[self class] allocWithZone:zone]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [_friends mutableCopy];\n    return copy;\n}\n\n- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n\n@end\n\n ```\n\n以上做法能满足基本的需求，但是也有缺陷：\n\n> 如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。\n\n【注：深浅拷贝的概念，在下文中有介绍，详见下文的：***用@property声明的 NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用 strong 关键字，可能造成什么问题？***】\n\n在例子中，存放朋友对象的 set 是用 “copyWithZone:” 方法来拷贝的，这种浅拷贝方式不会逐个复制 set 中的元素。若需要深拷贝的话，则可像下面这样，编写一个专供深拷贝所用的方法:\n\t\n\n ```objectivec\n- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy->_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n\n ```\n\n至于***如何重写带 copy 关键字的 setter***这个问题，\n\n\n如果抛开本例来回答的话，如下：\n\n\n \n```objectivec\n- (void)setName:(NSString *)name {\n    //[_name release];\n    _name = [name copy];\n}\n```\n\n不过也有争议，有人说“苹果如果像下面这样干，是不是效率会高一些？”\n\n\n ```objectivec\n- (void)setName:(NSString *)name {\n    if (_name != name) {\n        //[_name release];//MRC\n        _name = [name copy];\n    }\n}\n ```\n\n\n\n这样真得高效吗？不见得！这种写法“看上去很美、很合理”，但在实际开发中，它更像下图里的做法：\n\n![enter image description here](http://i.imgur.com/UwV9oSn.jpeg)\n\n克强总理这样评价你的代码风格：\n\n![enter image description here](http://i.imgur.com/N77Lkic.png)\n\n我和总理的意见基本一致：\n\n\n> 老百姓 copy 一下，咋就这么难？\n\n\n\n\n你可能会说：\n\n \n之所以在这里做`if判断` 这个操作：是因为一个 if 可能避免一个耗时的copy，还是很划算的。\n(在刚刚讲的：《如何让自己的类用 copy 修饰符？》里的那种复杂的copy，我们可以称之为 “耗时的copy”，但是对 NSString 的 copy 还称不上。)\n\n\n但是你有没有考虑过代价：\n\n\n> 你每次调用 `setX:` 都会做 if 判断，这会让 `setX:` 变慢，如果你在 `setX:`写了一串复杂的 `if+elseif+elseif+...` 判断，将会更慢。\n\n要回答“哪个效率会高一些？”这个问题，不能脱离实际开发，就算 copy 操作十分耗时，if 判断也不见得一定会更快，除非你把一个“ @property他当前的值 ”赋给了他自己，代码看起来就像：\n\n```objectivec\n[a setX:x1];\n[a setX:x1];    //你确定你要这么干？与其在setter中判断，为什么不把代码写好？\n```\n\n或者\n\n\n```objectivec\n[a setX:[a x]];   //队友咆哮道：你在干嘛？！！\n```\n\n> 不要在 setter 里进行像 `if(_obj != newObj)` 这样的判断。（该观点参考链接：[ ***How To Write Cocoa Object Setters： Principle 3: Only Optimize After You Measure*** ](http://vgable.com/blog/tag/autorelease/)\n）\n\n\n什么情况会在 copy setter 里做 if 判断？\n例如，车速可能就有最高速的限制，车速也不可能出现负值，如果车子的最高速为300，则 setter 的方法就要改写成这样：\n\n \n```objectivec\n-(void)setSpeed:(int)_speed{\n    if(_speed < 0) speed = 0;\n    if(_speed > 300) speed = 300;\n    _speed = speed;\n}\n```\n\n\n\n回到这个题目，如果单单就上文的代码而言，我们不需要也不能重写 name 的 setter ：由于是 name 是只读属性，所以编译器不会为其创建对应的“设置方法”，用初始化方法设置好属性值之后，就不能再改变了。（ 在本例中，之所以还要声明属性的“内存管理语义”--copy，是因为：如果不写 copy，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而低效）。\n\n那如何确保 name 被 copy？在初始化方法(initializer)中做：\n\n ```objectivec\n\t- (instancetype)initWithName:(NSString *)name \n\t\t\t\t\t\t\t\t age:(NSUInteger)age \n\t\t\t\t\t\t\t\t sex:(CYLSex)sex {\n\t     if(self = [super init]) {\n\t     \t_name = [name copy];\n\t     \t_age = age;\n\t     \t_sex = sex;\n\t     \t_friends = [[NSMutableSet alloc] init];\n\t     }\n\t     return self;\n\t}\n\n ```\n\n\n\t\n### 6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\n\n**@property 的本质是什么？**\n\n> @property = ivar + getter + setter;\n\n下面解释下：\n\n> “属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。\n\n“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 `Objective-C 2.0` 的一部分。\n而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。\n正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:\n\n> 编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。\n所以你也可以这么说：\n\n> @property = getter + setter;\n\n例如下面这个类：\n\n\n\n ```objectivec\n@interface Person : NSObject\n@property NSString *firstName;\n@property NSString *lastName;\n@end\n ```\n\n\n上述代码写出来的类与下面这种写法等效：\n\n\n\n ```objectivec\n@interface Person : NSObject\n- (NSString *)firstName;\n- (void)setFirstName:(NSString *)firstName;\n- (NSString *)lastName;\n- (void)setLastName:(NSString *)lastName;\n@end\n ```\n\n**更新**：\n\nproperty在runtime中是`objc_property_t`定义如下:\n\n```objectivec\ntypedef struct objc_property *objc_property_t;\n```\n\n而`objc_property`是一个结构体，包括name和attributes，定义如下：\n\n```objectivec\nstruct property_t {\n    const char *name;\n    const char *attributes;\n};\n```\n\n而attributes本质是`objc_property_attribute_t`，定义了property的一些属性，定义如下：\n\n```objectivec\n/// Defines a property attribute\ntypedef struct {\n    const char *name;           /**< The name of the attribute */\n    const char *value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。\n\n例如：我们定义一个string的property`@property (nonatomic, copy) NSString *string;`，通过 `property_getAttributes(property)`获取到attributes并打印出来之后的结果为`T@\"NSString\",C,N,V_string`\n\n其中T就代表类型，可参阅[Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。\n\n\n\n**ivar、getter、setter 是如何生成并添加到这个类中的?**\n\n> “自动合成”( autosynthesis)\n\n完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译\n器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为\n `_firstName` 与 `_lastName`。也可以在类的实现代码里通过\n `@synthesize` 语法来指定实例变量的名字.\n\n\n\n ```objectivec\n@implementation Person\n@synthesize firstName = _myFirstName;\n@synthesize lastName = _myLastName;\n@end\n ```\n\n我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西\n\n 1. `OBJC_IVAR_$类名$属性名称` ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。\n 2. setter 与 getter 方法对应的实现函数\n 2. `ivar_list` ：成员变量列表\n 2. `method_list` ：方法列表\n 2. `prop_list` ：属性列表\n\n\n也就是说我们每次在增加一个属性,系统都会在 `ivar_list` 中添加一个成员变量的描述,在 `method_list` 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.\n\n### 7. @protocol 和 category 中如何使用 @property\n\n 1. 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n 2. category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n\n  1. `objc_setAssociatedObject`\n  2. `objc_getAssociatedObject`\n\n### 8. runtime 如何实现 weak 属性\n\n要实现 weak 属性，首先要搞清楚 weak 属性的特点：\n\n> weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同 assign 类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n那么 runtime 如何实现 weak 变量的自动置nil？\n\n\n> runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。\n\n（注：在下文的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到`__weak`引用的解除时间。）\n\n\n先看下 runtime 里源码的实现：\n\n\n ```objectivec\n/**\n * The internal structure stored in the weak references table. \n * It maintains and stores\n * a hash set of weak references pointing to an object.\n * If out_of_line==0, the set is instead a small inline array.\n */\n#define WEAK_INLINE_COUNT 4\nstruct weak_entry_t {\n    DisguisedPtr<objc_object> referent;\n    union {\n        struct {\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line : 1;\n            uintptr_t        num_refs : PTR_MINUS_1;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line=0 is LSB of one of these (don't care which)\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n};\n\n/**\n * The global weak references table. Stores object ids as keys,\n * and weak_entry_t structs as their values.\n */\nstruct weak_table_t {\n    weak_entry_t *weak_entries;\n    size_t    num_entries;\n    uintptr_t mask;\n    uintptr_t max_hash_displacement;\n};\n ```\n\n具体完整实现参照 [objc/objc-weak.h](https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-weak.h) 。\n\n\n\n我们可以设计一个函数（伪代码）来表示上述机制：\n\n`objc_storeWeak(&a, b)`函数：\n\n`objc_storeWeak`函数把第二个参数--赋值对象（b）的内存地址作为键值key，将第一个参数--weak修饰的属性变量（a）的内存地址（&a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&a）从weak表中删除，\n\n你可以把`objc_storeWeak(&a, b)`理解为：`objc_storeWeak(value, key)`，并且当key变nil，将value置nil。\n\n在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。\n\n而如果a是由 assign 修饰的，则：\n在 b 非 nil 时，a 和 b 指向同一个内存地址，在 b 变 nil 时，a 还是指向该内存地址，变野指针。此时向 a 发送消息极易崩溃。\n\n\n下面我们将基于`objc_storeWeak(&a, b)`函数，使用伪代码模拟“runtime如何实现weak属性”：\n \n\n\n \n```objectivec\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&obj1);\n```\n\n下面对用到的两个方法`objc_initWeak`和`objc_destroyWeak`做下解释：\n\n总体说来，作用是：\n通过`objc_initWeak`函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过`objc_destoryWeak`函数释放该变量（obj1）。\n\n下面分别介绍下方法的内部实现：\n\n`objc_initWeak`函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用`objc_storeWeak`函数。\n\n\n\n \n```objectivec\nobj1 = 0；\nobj_storeWeak(&obj1, obj);\n```\n\n也就是说：\n\n>  weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）\n\n\n\n\n然后`obj_destroyWeak`函数将0（nil）作为参数，调用`objc_storeWeak`函数。\n\n`objc_storeWeak(&obj1, 0);`\n\n前面的源代码与下列源代码相同。\n\n\n\n```objectivec\n// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&obj1, 0);\n```\n\n\n`objc_storeWeak` 函数把第二个参数--赋值对象（obj）的内存地址作为键值，将第一个参数--weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从 weak 表中删除，在后面的相关一题会详解。\n\n使用伪代码是为了方便理解，下面我们“真枪实弹”地实现下：\n\n> 如何让不使用weak修饰的@property，拥有weak的效果。\n\n\n我们从setter方法入手：\n\n（注意以下的 `cyl_runAtDealloc` 方法实现仅仅用于模拟原理，如果想用于项目中，还需要考虑更复杂的场景，想在实际项目使用的话，可以使用我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) ）\n\n ```objectivec\n- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n ```\n\n也就是有两个步骤：\n\n 1. 在setter方法中做如下设置：\n\n\n ```objectivec\n        objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n ```\n\n 2. 在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。做到这点，同样要借助 runtime：\n \n ```objectivec\n//要销毁的目标对象\nid objectToBeDeallocated;\n//可以理解为一个“事件”：当上面的目标对象销毁时，同时要发生的“事件”。\nid objectWeWantToBeReleasedWhenThatHappens;\nobjc_setAssociatedObject(objectToBeDeallocted,\n                         someUniqueKey,\n                         objectWeWantToBeReleasedWhenThatHappens,\n                         OBJC_ASSOCIATION_RETAIN);\n```\n\n知道了思路，我们就开始实现 `cyl_runAtDealloc` 方法，实现过程分两部分：\n\n第一部分：创建一个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助 block 执行“事件”。\n\n// .h文件\n\n ```objectivec\n// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\ntypedef void (^voidBlock)(void);\n\n@interface CYLBlockExecutor : NSObject\n\n- (id)initWithBlock:(voidBlock)block;\n\n@end\n ```\n\n// .m文件\n\n ```objectivec\n// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\n#import \"CYLBlockExecutor.h\"\n\n@interface CYLBlockExecutor() {\n    voidBlock _block;\n}\n@implementation CYLBlockExecutor\n\n- (id)initWithBlock:(voidBlock)aBlock\n{\n    self = [super init];\n    \n    if (self) {\n        _block = [aBlock copy];\n    }\n    \n    return self;\n}\n\n- (void)dealloc\n{\n    _block ? _block() : nil;\n}\n\n@end\n ```\n\n第二部分：核心代码：利用runtime实现`cyl_runAtDealloc`方法\n\n ```objectivec\n// CYLNSObject+RunAtDealloc.h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import \"CYLBlockExecutor.h\"\n\nconst void *runAtDeallocBlockKey = &runAtDeallocBlockKey;\n\n@interface NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block;\n\n@end\n\n\n// CYLNSObject+RunAtDealloc.m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import \"CYLNSObject+RunAtDealloc.h\"\n#import \"CYLBlockExecutor.h\"\n\n@implementation NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block\n{\n    if (block) {\n        CYLBlockExecutor *executor = [[CYLBlockExecutor alloc] initWithBlock:block];\n        \n        objc_setAssociatedObject(self,\n                                 runAtDeallocBlockKey,\n                                 executor,\n                                 OBJC_ASSOCIATION_RETAIN);\n    }\n}\n\n@end\n ```\n\n使用方法：\n导入\n\n\n ```objectivec\n    #import \"CYLNSObject+RunAtDealloc.h\"\n ```\n\n然后就可以使用了：\n\n\n ```objectivec\nNSObject *foo = [[NSObject alloc] init];\n\n[foo cyl_runAtDealloc:^{\n    NSLog(@\"正在释放foo!\");\n}];\n ```\n\n\n如果对 `cyl_runAtDealloc` 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) \n\n参考博文： [***Fun With the Objective-C Runtime: Run Code at Deallocation of Any Object***](http://stackoverflow.com/a/31560217/3395008)\n\n\n### 9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n属性可以拥有的特质分为四类:\n \n 1. 原子性--- `nonatomic` 特质\n\n    在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。\n\n 2. 读/写权限---`readwrite(读写)`、`readonly (只读)`\n 3. 内存管理语义---`assign`、`strong`、 `weak`、`unsafe_unretained`、`copy`\n 4. 方法名---`getter=<name>` 、`setter=<name>`\n   \n  `getter=<name>`的样式：\n\n\n ```objectivec\n        @property (nonatomic, getter=isOn) BOOL on;\n ```\n <p><del>（ `setter=<name>`这种不常用，也不推荐使用。故不在这里给出写法。）\n</del></p>\n\n\n `setter=<name>`一般用在特殊的情境下，比如：\n\n\n在数据反序列化、转模型的过程中，服务器返回的字段如果以 `init` 开头，所以你需要定义一个 `init` 开头的属性，但默认生成的 `setter` 与 `getter` 方法也会以 `init` 开头，而编译器会把所有以 `init` 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。\n\n这时你就可以使用下面的方式来避免编译器报错：\n\n\n ```objectivec\n@property(nonatomic, strong, getter=p_initBy, setter=setP_initBy:)NSString *initBy;\n\n ```\n\n\n另外也可以用关键字进行特殊说明，来避免编译器报错：\n\n ```objectivec\n@property(nonatomic, readwrite, copy, null_resettable) NSString *initBy;\n- (NSString *)initBy __attribute__((objc_method_family(none)));\n ```\n\n 3. 不常用的：`nonnull`,`null_resettable`,`nullable`\n\n\n注意：很多人会认为如果属性具备 nonatomic 特质，则不使用\n“同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：\n\n\n ```objectivec\nstatic inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)\n{\n    if (offset == 0) {\n        object_setClass(self, newValue);\n        return;\n    }\n\n    id oldValue;\n    id *slot = (id*) ((char*)self + offset);\n\n    if (copy) {\n        newValue = [newValue copyWithZone:nil];\n    } else if (mutableCopy) {\n        newValue = [newValue mutableCopyWithZone:nil];\n    } else {\n        if (*slot == newValue) return;\n        newValue = objc_retain(newValue);\n    }\n\n    if (!atomic) {\n        oldValue = *slot;\n        *slot = newValue;\n    } else {\n        spinlock_t& slotlock = PropertyLocks[slot];\n        slotlock.lock();\n        oldValue = *slot;\n        *slot = newValue;        \n        slotlock.unlock();\n    }\n\n    objc_release(oldValue);\n}\n\nvoid objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) \n{\n    bool copy = (shouldCopy && shouldCopy != MUTABLE_COPY);\n    bool mutableCopy = (shouldCopy == MUTABLE_COPY);\n    reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);\n}\n ```\n\n### 10. weak属性需要在dealloc中置nil么？\n不需要。\n\n\n> 在ARC环境无论是强指针还是弱指针都无需在 dealloc 设置为 nil ， ARC 会自动帮我们处理\n\n即便是编译器不帮我们做这些，weak也不需要在 dealloc 中置nil：\n\n正如上文的：***runtime 如何实现 weak 属性*** 中提到的：\n\n我们模拟下 weak 的 setter 方法，应该如下：\n\n\n ```objectivec\n- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n ```\n\n如果对 `cyl_runAtDealloc` 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： [CYLDeallocBlockExecutor](https://github.com/ChenYilong/CYLDeallocBlockExecutor) \n\n\n也即:\n\n> 在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n\n\n\n\n\n### 11. @synthesize和@dynamic分别有什么作用？\n\n 1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n 2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n 3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n### 12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n\n 1. 对应基本数据类型默认关键字是\n \n atomic,readwrite,assign\n 2. 对于普通的 Objective-C 对象\n  \n atomic,readwrite,strong\n\n参考链接：\n\n 1. [ ***Objective-C ARC: strong vs retain and weak vs assign*** ](http://stackoverflow.com/a/15541801/3395008)\n\n 2. [ ***Variable property attributes or Modifiers in iOS*** ](http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html)\n\n### 13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n 1. 因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.\n 2. 如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.\n\n copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。\n当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。\n\n\n举例说明：\n\n定义一个以 strong 修饰的 array：\n\n ```objectivec\n@property (nonatomic ,readwrite, strong) NSArray *array;\n ```\n\n然后进行下面的操作：\n\n ```objectivec\n    NSMutableArray *mutableArray = [[NSMutableArray alloc] init];\n    NSArray *array = @[ @1, @2, @3, @4 ];\n    self.array = mutableArray;\n    [mutableArray removeAllObjects];;\n    NSLog(@\"%@\",self.array);\n    \n    [mutableArray addObjectsFromArray:array];\n    self.array = [mutableArray copy];\n    [mutableArray removeAllObjects];;\n    NSLog(@\"%@\",self.array);\n ```\n\n打印结果如下所示：\n\n ```objectivec\n2015-09-27 19:10:32.523 CYLArrayCopyDmo[10681:713670] (\n)\n2015-09-27 19:10:32.524 CYLArrayCopyDmo[10681:713670] (\n    1,\n    2,\n    3,\n    4\n)\n ```\n\n（详见仓库内附录的 Demo。）\n\n\n为了理解这种做法，首先要知道，两种情况：\n\n\n 1. 对非集合类对象的 copy 与 mutableCopy 操作；\n 2. 对集合类对象的 copy 与 mutableCopy 操作。\n\n#### 1. 对非集合类对象的copy操作：\n\n在非集合类对象中：对 immutable 对象进行 copy 操作，是指针复制，mutableCopy 操作时内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。用代码简单表示如下：\n\n - [immutableObject copy] // 浅复制\n - [immutableObject mutableCopy] //深复制\n - [mutableObject copy] //深复制\n - [mutableObject mutableCopy] //深复制\n\t\n比如以下代码：\n\n\n ```objectivec\nNSMutableString *string = [NSMutableString stringWithString:@\"origin\"];//copy\nNSString *stringCopy = [string copy];\n ```\n\n\n查看内存，会发现 string、stringCopy 内存地址都不一样，说明此时都是做内容拷贝、深拷贝。即使你进行如下操作：\n\n\n ```objectivec\n[string appendString:@\"origion!\"]\n ```\n\nstringCopy 的值也不会因此改变，但是如果不使用 copy，stringCopy 的值就会被改变。\n  集合类对象以此类推。\n所以，\n\n> 用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。\n\n#### 2、集合类对象的copy与mutableCopy\n\n集合类对象是指 NSArray、NSDictionary、NSSet ... 之类的对象。下面先看集合类immutable对象使用 copy 和 mutableCopy 的一个例子：\n\n ```objectivec\nNSArray *array = @[@[@\"a\", @\"b\"], @[@\"c\", @\"d\"]];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n ```\n\n查看内容，可以看到 copyArray 和 array 的地址是一样的，而 mCopyArray 和 array 的地址是不同的。说明 copy 操作进行了指针拷贝，mutableCopy 进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝 array 这个对象，array 集合内部的元素仍然是指针拷贝。这和上面的非集合 immutable 对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看 mutable 对象拷贝的例子：\n\n\n ```objectivec\nNSMutableArray *array = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@\"a\"],@\"b\",@\"c\",nil];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n ```\n\n\n查看内存，如我们所料，copyArray、mCopyArray和 array 的内存地址都不一样，说明 copyArray、mCopyArray 都对 array 进行了内容拷贝。同样，我们可以得出结论：\n\n在集合类对象中，对 immutable 对象进行 copy，是指针复制， mutableCopy 是内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下：\n\n\n ```objectivec\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //单层深复制\n[mutableObject copy] //单层深复制\n[mutableObject mutableCopy] //单层深复制\n ```\n\n\n这个代码结论和非集合类的非常相似。\n\n参考链接：[iOS 集合的深复制与浅复制](https://www.zybuluo.com/MicroCai/note/50592)\n\n### 14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为`_foo`的实例变量，那么还会自动合成新变量么？\n在回答之前先说明下一个概念：\n\n> 实例变量 = 成员变量 ＝ ivar\n\n这些说法，笔者下文中，可能都会用到，指的是一个东西。\n\n\n正如\n[Apple官方文档 ***You Can Customize Synthesized Instance Variable Names***](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW6) 所说：\n![enter image description here](http://i.imgur.com/D6d0zGJ.png)\n\n如果使用了属性的话，那么编译器就会自动编写访问属性所需的方法，此过程叫做“自动合成”( auto synthesis)。需要强调的是，这个过程由编译器在编译期执行，所以编辑器里看不到这些“合成方法” (synthesized method)的源代码。除了生成方法代码之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。\n\n \n```objectivec\n@interface CYLPerson : NSObject \n@property NSString *firstName; \n@property NSString *lastName; \n@end\n```\n\n\n在上例中，会生成两个实例变量，其名称分别为\n `_firstName` 与 `_lastName`。也可以在类的实现代码里通过 `@synthesize` 语法来指定实例变量的名字:\n \n```objectivec\n@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end \n```\n\n\n\n上述语法会将生成的实例变量命名为 `_myFirstName` 与 `_myLastName` ，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。\n\n总结下 @synthesize 合成实例变量的规则，有以下几点：\n\n\n 1. 如果指定了成员变量的名称,会生成一个指定的名称的成员变量,\n\n 2. 如果这个成员已经存在了就不再生成了.\n 2. 如果是 `@synthesize foo;` 还会生成一个名称为foo的成员变量，也就是说：\n\n > 如果没有指定成员变量的名称会自动生成一个属性同名的成员变量,\n\n\n\n 2. 如果是 `@synthesize foo = _foo;` 就不会生成成员变量了.\n\n假如 property 名为 foo，存在一个名为 `_foo` 的实例变量，那么还会自动合成新变量么？\n不会。如下图：\n\n![enter image description here](http://i.imgur.com/t28ge4W.png)\n\n\n### 15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n\n回答这个问题前，我们要搞清楚一个问题，什么情况下不会autosynthesis（自动合成）？\n\n 1. 同时重写了 setter 和 getter 时\n 2. 重写了只读属性的 getter 时\n 2. 使用了 @dynamic 时\n 2. 在 @protocol 中定义的所有属性\n 2. 在 category 中定义的所有属性\n 2. 重载的属性 \n \n 当你在子类中重载了父类中的属性，你必须 使用 `@synthesize` 来手动合成ivar。\n\n除了后三条，对其他几个我们可以总结出一个规律：当你想手动管理 @property 的所有内容时，你就会尝试通过实现 @property 的所有“存取方法”（the accessor methods）或者使用 `@dynamic` 来达到这个目的，这时编译器就会认为你打算手动管理 @property，于是编译器就禁用了 autosynthesis（自动合成）。\n\n因为有了 autosynthesis（自动合成），大部分开发者已经习惯不去手动定义ivar，而是依赖于 autosynthesis（自动合成），但是一旦你需要使用ivar，而 autosynthesis（自动合成）又失效了，如果不去手动定义ivar，那么你就得借助 `@synthesize` 来手动合成 ivar。\n\n其实，`@synthesize` 语法还有一个应用场景，但是不太建议大家使用：\n\n可以在类的实现代码里通过 `@synthesize` 语法来指定实例变量的名字:\n \n```objectivec\n@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end \n```\n\n\n\n上述语法会将生成的实例变量命名为 `_myFirstName` 与 `_myLastName`，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。\n\n\n\n举例说明：应用场景：\n\n\n ```objectivec\n\n//\n// .m文件\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 打开第14行和第17行中任意一行，就可编译成功\n\n@import Foundation;\n\n@interface CYLObject : NSObject\n@property (nonatomic, copy) NSString *title;\n@end\n\n@implementation CYLObject {\n    //    NSString *_title;\n}\n\n//@synthesize title = _title;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        _title = @\"微博@iOS程序犭袁\";\n    }\n    return self;\n}\n\n- (NSString *)title {\n    return _title;\n}\n\n- (void)setTitle:(NSString *)title {\n    _title = [title copy];\n}\n\n@end\n ```\n\n结果编译器报错：\n![enter image description here](http://i.imgur.com/fAEGHIo.png)\n\n当你同时重写了 setter 和 getter 时，系统就不会生成 ivar（实例变量/成员变量）。这时候有两种选择：\n\n 1. 要么如第14行：手动创建 ivar\n 2. 要么如第17行：使用`@synthesize foo = _foo;` ，关联 @property 与 ivar。\n\n更多信息，请戳- 》[ ***When should I use @synthesize explicitly?*** ](http://stackoverflow.com/a/19821816/3395008)\n### 16. objc中向一个nil对象发送消息将会发生什么？\n在 Objective-C 中向 nil 发送消息是完全有效的——只是在运行时不会有任何作用:\n\n 1. 如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)。例如：  \n\n \n ```objectivec\nPerson * motherInlaw = [[aPerson spouse] mother];\n```\n\n\n 如果 spouse 对象为 nil，那么发送给 nil 的消息 mother 也将返回 nil。\n 2. 如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者 long long 的整型标量，发送给 nil 的消息将返回0。\n 2. 如果方法返回值为结构体,发送给 nil 的消息将返回0。结构体中各个字段的值将都是0。\n 2. 如果方法的返回值不是上述提到的几种情况，那么发送给 nil 的消息的返回值将是未定义的。\n\n具体原因如下：\n\n\n> objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。\n\n\n那么，为了方便理解这个内容，还是贴一个objc的源代码：\n\n\n \n```objectivec\n// runtime.h（类在runtime中的定义）\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nstruct objc_class {\n  Class isa OBJC_ISA_AVAILABILITY; //isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object\n  #if !__OBJC2__\n  Class super_class OBJC2_UNAVAILABLE; // 父类\n  const char *name OBJC2_UNAVAILABLE; // 类名\n  long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0\n  long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识\n  long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小\n  struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表\n  struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表\n  struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。\n  struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表\n  #endif\n  } OBJC2_UNAVAILABLE;\n```\n\nobjc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。\n那么，回到本题，如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误。\n\n\n### 17. objc中向一个对象发送消息[obj foo]和`objc_msgSend()`函数之间有什么关系？\n具体原因同上题：该方法编译之后就是`objc_msgSend()`函数调用.\n\n我们用 clang 分析下，clang 提供一个命令，可以将Objective-C的源码改写成C++语言，借此可以研究下[obj foo]和`objc_msgSend()`函数之间有什么关系。\n\n以下面的代码为例，由于 clang 后的代码达到了10万多行，为了便于区分，添加了一个叫 iOSinit 方法，\n\n```objectivec\n//\n//  main.m\n//  http://weibo.com/luohanchenyilong/\n//  https://github.com/ChenYilong\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n\n#import \"CYLTest.h\"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOSinit))];\n        return 0;\n    }\n}\n```\n\n在终端中输入\n\n```objectivec\nclang -rewrite-objc main.m\n```\n就可以生成一个`main.cpp`的文件，在最低端（10万4千行左右）\n\n![enter image description here](http://i.imgur.com/eAH5YWn.png)\n\n我们可以看到大概是这样的：\n\n \n```objectivec\n((void ()(id, SEL))(void )objc_msgSend)((id)obj, sel_registerName(\"foo\"));\n```\n\n也就是说：\n\n>  [obj foo];在objc动态编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n### 18. 什么时候会报unrecognized selector的异常？\n\n简单来说：\n\n\n> 当调用该对象上某个方法,而该对象上没有实现这个方法的时候，\n可以通过“消息转发”进行解决。\n\n\n\n简单的流程如下，在上一题中也提到过：\n\n\n> objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。\n\n\nobjc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：\n\n\n 1. Method resolution\n\n objc运行时会调用`+resolveInstanceMethod:`或者 `+resolveClassMethod:`，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。\n\n 2. Fast forwarding\n\n 如果目标对象实现了`-forwardingTargetForSelector:`，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。\n只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。\n这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。\n 3. Normal forwarding\n\n 这一步是Runtime最后一次给你挽救的机会。首先它会发送`-methodSignatureForSelector:`消息获得函数的参数和返回值类型。如果`-methodSignatureForSelector:`返回nil，Runtime则会发出`-doesNotRecognizeSelector:`消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送`-forwardInvocation:`消息给目标对象。\n\n为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ `_objc_msgForward_demo` ”,可运行起来看看。\n\n### 19. 一个objc对象如何进行内存布局？（考虑有父类的情况）\n\n - 所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中.\n - 每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的\n\n\n  1. 对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）\n  2. 成员变量的列表,\n  2. 属性列表,\n\n 它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。\n\n每个 Objective-C 对象都有相同的结构，如下图所示：\n\n ![enter image description here](http://i.imgur.com/7mJlUj1.png)\n\n翻译过来就是\n\n|  Objective-C 对象的结构图 | \n ------------- |\n ISA指针 |\n 根类的实例变量 |\n 倒数第二层父类的实例变量 |\n ... |\n 父类的实例变量 |\n 类的实例变量 | \n\n\n - 根对象就是NSObject，它的superclass指针指向nil\n\n - 类对象既然称为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类(meta class)，即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。\n\n\n\n如图:\n![enter image description here](http://i.imgur.com/w6tzFxz.png)\n\n### 20. 一个objc对象的isa的指针指向什么？有什么作用？\n\n指向他的类对象,从而可以找到对象上的方法\n\n### 21. 下面的代码输出什么？\n\n\n\n\n ```objectivec\n\t@implementation Son : Father\n\t- (id)init\n\t{\n\t    self = [super init];\n\t    if (self) {\n\t        NSLog(@\"%@\", NSStringFromClass([self class]));\n\t        NSLog(@\"%@\", NSStringFromClass([super class]));\n\t    }\n\t    return self;\n\t}\n\t@end\n ```\n\n\n**答案：**\n\n都输出 Son\n\n\tNSStringFromClass([self class]) = Son\n\tNSStringFromClass([super class]) = Son\n \n\n\n这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。\n \n\n我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？\n\n很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\n\n上面的例子不管调用`[self class]`还是`[super class]`，接受消息的对象都是当前 `Son ＊xxx` 这个对象。\n\n当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。\n\n\n这也就是为什么说“不推荐在 init 方法中使用点语法”，如果想访问实例变量 iVar 应该使用下划线（ `_iVar` ），而非点语法（ `self.iVar` ）。\n\n点语法（ `self.iVar` ）的坏处就是子类有可能覆写 setter 。假设 Person 有一个子类叫 ChenPerson，这个子类专门表示那些姓“陈”的人。该子类可能会覆写 lastName 属性所对应的设置方法：\n\n ```objectivec\n//\n//  ChenPerson.m\n//  \n//\n//  Created by https://github.com/ChenYilong on 15/8/30.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import \"ChenPerson.h\"\n\n@implementation ChenPerson\n\n@synthesize lastName = _lastName;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([super class]));\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    //设置方法一：如果setter采用是这种方式，就可能引起崩溃\n//    if (![lastName isEqualToString:@\"陈\"])\n//    {\n//        [NSException raise:NSInvalidArgumentException format:@\"姓不是陈\"];\n//    }\n//    _lastName = lastName;\n    \n    //设置方法二：如果setter采用是这种方式，就可能引起崩溃\n    _lastName = @\"陈\";\n    NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, @\"会调用这个方法,想一下为什么？\");\n\n}\n\n@end\n ```\n\n在基类 Person 的默认初始化方法中，可能会将姓氏设为空字符串。此时若使用点语法（ `self.lastName` ）也即 setter 设置方法，那么调用将会是子类的设置方法，如果在刚刚的 setter 代码中采用设置方法一，那么就会抛出异常，\n\n\n为了方便采用打印的方式展示，究竟发生了什么，我们使用设置方法二。\n\n\n如果基类的代码是这样的：\n\n\n ```objectivec\n//\n//  Person.m\n//  nil对象调用点语法\n//\n//  Created by https://github.com/ChenYilong on 15/8/29.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//  \n\n#import \"Person.h\"\n\n@implementation Person\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        self.lastName = @\"\";\n        //NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        //NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, self.lastName);\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, @\"根本不会调用这个方法\");\n    _lastName = @\"炎黄\";\n}\n\n@end\n ```\n\n那么打印结果将会是这样的：\n\n ```objectivec\n 🔴类名与方法名：-[ChenPerson setLastName:]（在第36行），描述：会调用这个方法,想一下为什么？\n 🔴类名与方法名：-[ChenPerson init]（在第19行），描述：ChenPerson\n 🔴类名与方法名：-[ChenPerson init]（在第20行），描述：ChenPerson\n ```\n\n我在仓库里也给出了一个相应的 Demo（名字叫：Demo_21题_下面的代码输出什么）。有兴趣可以跑起来看一下，主要看下他是怎么打印的，思考下为什么这么打印。\n\n\n接下来让我们利用 runtime 的相关知识来验证一下 super 关键字的本质，使用clang重写命令:\n\n\n ```objectivec\n\t$ clang -rewrite-objc test.m\n ```\n\n将这道题目中给出的代码被转化为:\n\n\n ```objectivec\n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(\"class\"))));\n\n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super){ (id)self, (id)class_getSuperclass(objc_getClass(\"Son\")) }, sel_registerName(\"class\"))));\n ```\n\n从上面的代码中，我们可以发现在调用 [self class] 时，会转化成 `objc_msgSend`函数。看下函数定义：\n\n\n ```objectivec\n\tid objc_msgSend(id self, SEL op, ...)\n ```\n我们把 self 做为第一个参数传递进去。\n\n而在调用 [super class]时，会转化成 `objc_msgSendSuper`函数。看下函数定义:\n\n\n ```objectivec\n\tid objc_msgSendSuper(struct objc_super *super, SEL op, ...)\n ```\n\n第一个参数是 `objc_super` 这样一个结构体，其定义如下:\n\n\n ```objectivec\nstruct objc_super {\n\t   __unsafe_unretained id receiver;\n\t   __unsafe_unretained Class super_class;\n};\n ```\n\n结构体有两个成员，第一个成员是 receiver, 类似于上面的 `objc_msgSend`函数第一个参数self 。第二个成员是记录当前类的父类是什么。\n\n所以，当调用 ［self class] 时，实际先调用的是 `objc_msgSend`函数，第一个参数是 Son当前的这个实例，然后在 Son 这个类里面去找 - (Class)class这个方法，没有，去父类 Father里找，也没有，最后在 NSObject类中发现这个方法。而 - (Class)class的实现就是返回self的类别，故上述输出结果为 Son。\n\nobjc Runtime开源代码对- (Class)class方法的实现:\n\n\n ```objectivec\n- (Class)class {\n    return object_getClass(self);\n}\n ```\n\n而当调用 `[super class]`时，会转换成`objc_msgSendSuper函数`。第一步先构造 `objc_super` 结构体，结构体第一个成员就是 `self` 。\n第二个成员是 `(id)class_getSuperclass(objc_getClass(“Son”))` , 实际该函数输出结果为 Father。\n\n第二步是去 Father这个类里去找 `- (Class)class`，没有，然后去NSObject类去找，找到了。最后内部是使用 `objc_msgSend(objc_super->receiver, @selector(class))`去调用，\n\n此时已经和`[self class]`调用相同了，故上述输出结果仍然返回 Son。\n\n\n参考链接：[微博@Chun_iOS](http://weibo.com/junbbcom)的博文[刨根问底Objective－C Runtime（1）－ Self & Super](http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(1)%5Bnil%5D-self-and-super/)\n\n\n### 22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.\n\n### 23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\n\n - 在ARC下不需要。\n - <p><del> 在MRC中,对于使用retain或copy策略的需要 。</del></p>在MRC下也不需要\n\n> 无论在MRC下还是ARC下均不需要。\n\n\n[ ***2011年版本的Apple API 官方文档 - Associative References***  ](https://web.archive.org/web/20120818164935/http://developer.apple.com/library/ios/#/web/20120820002100/http://developer.apple.com/library/ios/documentation/cocoa/conceptual/objectivec/Chapters/ocAssociativeReferences.html) 一节中有一个MRC环境下的例子：\n\n\n \n```objectivec\n// 在MRC下，使用runtime Associate方法关联的对象，不需要在主对象dealloc的时候释放\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 摘自2011年版本的Apple API 官方文档 - Associative References \n\nstatic char overviewKey;\n \nNSArray *array =\n    [[NSArray alloc] initWithObjects:@\"One\", @\"Two\", @\"Three\", nil];\n// For the purposes of illustration, use initWithFormat: to ensure\n// the string can be deallocated\nNSString *overview =\n    [[NSString alloc] initWithFormat:@\"%@\", @\"First three numbers\"];\n \nobjc_setAssociatedObject (\n    array,\n    &overviewKey,\n    overview,\n    OBJC_ASSOCIATION_RETAIN\n);\n \n[overview release];\n// (1) overview valid\n[array release];\n// (2) overview invalid\n```\n文档指出 \n\n> At point 1, the string `overview` is still valid because the `OBJC_ASSOCIATION_RETAIN` policy specifies that the array retains the associated object. When the array is deallocated, however (at point 2), `overview` is released and so in this case also deallocated.\n\n我们可以看到，在`[array release];`之后，overview就会被release释放掉了。\n\n既然会被销毁，那么具体在什么时间点？\n\n\n> 根据[ ***WWDC 2011, Session 322 (第36分22秒)*** ](https://developer.apple.com/videos/wwdc/2011/#322-video)中发布的内存销毁时间表，被关联的对象在生命周期内要比对象本身释放的晚很多。它们会在被 NSObject -dealloc 调用的 object_dispose() 方法中释放。\n\n对象的内存销毁时间表，分四个步骤：\n\n\t// 对象的内存销毁时间表\n\t// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n\t// https://github.com/ChenYilong\n    // 根据 WWDC 2011, Session 322 (36分22秒)中发布的内存销毁时间表 \n\n     1. 调用 -release ：引用计数变为零\n         * 对象正在被销毁，生命周期即将结束.\n         * 不能再有新的 __weak 弱引用， 否则将指向 nil.\n         * 调用 [self dealloc] \n     2. 子类 调用 -dealloc\n         * 继承关系中最底层的子类 在调用 -dealloc\n         * 如果是 MRC 代码 则会手动释放实例变量们（iVars）\n         * 继承关系中每一层的父类 都在调用 -dealloc\n     3. NSObject 调 -dealloc\n         * 只做一件事：调用 Objective-C runtime 中的 object_dispose() 方法\n     4. 调用 object_dispose()\n         * 为 C++ 的实例变量们（iVars）调用 destructors \n         * 为 ARC 状态下的 实例变量们（iVars） 调用 -release \n         * 解除所有使用 runtime Associate方法关联的对象\n         * 解除所有 __weak 引用\n         * 调用 free()\n\n\n对象的内存销毁时间表：[参考链接](http://stackoverflow.com/a/10843510/3395008)。\n\n\n\n\n\n### 24. objc中的类方法和实例方法有什么本质区别和联系？\n\n类方法：\n\n 1. 类方法是属于类对象的\n 2. 类方法只能通过类对象调用\n 2. 类方法中的self是类对象\n 2. 类方法可以调用其他的类方法\n 2. 类方法中不能访问成员变量\n 2. 类方法中不能直接调用对象方法\n\n实例方法：\n\n 1. 实例方法是属于实例对象的\n 2. 实例方法只能通过实例对象调用\n 2. 实例方法中的self是实例对象\n 2. 实例方法中可以访问成员变量\n 2. 实例方法中直接调用实例方法\n 2. 实例方法中也可以调用类方法(通过类名)\n\n\n下一篇文章将发布在[这里](https://github.com/ChenYilong/iOSInterviewQuestions)，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)\n----------\n@property部分主要参考\n[Apple官方文档：Properties Encapsulate an Object’s Values](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW2)\nruntime部分主要参考[Apple官方文档：Declared Properties](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html)\n\n\n### 25. `_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n### 26. runtime如何实现weak变量的自动置nil？\n\n### 27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？ \n\n### 28. runloop和线程有什么关系？\n\n\n### 29. runloop的mode作用是什么？\n\n### 30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n### 31. 猜想runloop内部是如何实现的？\n### 32. objc使用什么机制管理对象内存？\n### 33. ARC通过什么方式帮助开发者管理内存？\n### 34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n### 35. `BAD_ACCESS`在什么情况下出现？\n### 36. 苹果是如何实现autoreleasepool的？ \n### 37. 使用block时什么情况会发生引用循环，如何解决？\n### 38. 在block内如何修改block外部变量？\n### 39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？ \n### 40. GCD的队列（`dispatch_queue_t`）分哪两种类型？\n### 41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n### 42. `dispatch_barrier_async`的作用是什么？\n### 43. 苹果为什么要废弃`dispatch_get_current_queue`？\n### 44. 以下代码运行结果如何？\n\n\n\t- (void)viewDidLoad\n\t{\n\t    [super viewDidLoad];\n\t    NSLog(@\"1\");\n\t    dispatch_sync(dispatch_get_main_queue(), ^{\n\t        NSLog(@\"2\");\n\t    });\n\t    NSLog(@\"3\");\n\t}\n\n### 45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n### 46. 如何手动触发一个value的KVO\n### 47. 若一个类有实例变量`NSString *_foo`，调用setValue:forKey:时，可以以foo还是`_foo`作为key？\n### 48. KVC的keyPath中的集合运算符如何使用？\n### 49. KVC和KVO的keyPath一定是属性么？\n### 50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n### 51. apple用什么方式实现对一个对象的KVO？ \n### 52. IBOutlet连出来的视图属性为什么可以被设置成weak?\n### 53. IB中User Defined Runtime Attributes如何使用？ \n### 54. 如何调试`BAD_ACCESS`错误\n### 55. lldb（gdb）常用的调试命令？\n\n\n\n----------\n\n\nPosted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  \n原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)\n\n\n","slug":"《招聘一个靠谱的iOS》面试题参考答案（上）","published":1,"updated":"2017-06-17T14:59:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj48j61mx00109quzhtu140yz","content":"<p><a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>—参考答案（上）</p>\n<p>说明：面试题来源是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a>的这篇博文：<a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>，其中共55题，除第一题为纠错题外，其他54道均为简答题。</p>\n<p>作者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。</p>\n<p>答案为<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>整理，未经出题者校对，如有纰漏，请向<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>指正。</p>\n<hr>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ol>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-风格纠错题\" target=\"_blank\" rel=\"external\">风格纠错题</a> </p>\n<ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#优化部分\" target=\"_blank\" rel=\"external\">优化部分</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#硬伤部分\" target=\"_blank\" rel=\"external\">硬伤部分</a> </li>\n</ol>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2-什么情况使用-weak-关键字相比-assign-有什么不同\" target=\"_blank\" rel=\"external\">什么情况使用 weak 关键字，相比 assign 有什么不同？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#3-怎么用-copy-关键字\" target=\"_blank\" rel=\"external\">怎么用 copy 关键字？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#4-这个写法会出什么问题-property-copy-nsmutablearray-array\" target=\"_blank\" rel=\"external\">这个写法会出什么问题： @property (copy) NSMutableArray *array;</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#5-如何让自己的类用-copy-修饰符如何重写带-copy-关键字的-setter\" target=\"_blank\" rel=\"external\"> 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#6-property-的本质是什么ivargettersetter-是如何生成并添加到这个类中的\" target=\"_blank\" rel=\"external\">@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#7-protocol-和-category-中如何使用-property\" target=\"_blank\" rel=\"external\">@protocol 和 category 中如何使用 @property</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#8-runtime-如何实现-weak-属性\" target=\"_blank\" rel=\"external\"> runtime 如何实现 weak 属性</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#9-property中有哪些属性关键字-property-后面可以有哪些修饰符\" target=\"_blank\" rel=\"external\">@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#10-weak属性需要在dealloc中置nil么\" target=\"_blank\" rel=\"external\"> weak属性需要在dealloc中置nil么？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#11-synthesize和dynamic分别有什么作用\" target=\"_blank\" rel=\"external\">@synthesize和@dynamic分别有什么作用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#12-arc下不显式指定任何属性关键字时默认的关键字都有哪些\" target=\"_blank\" rel=\"external\">ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#13-用property声明的nsstring或nsarraynsdictionary经常使用copy关键字为什么如果改用strong关键字可能造成什么问题\" target=\"_blank\" rel=\"external\">用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</a> <ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-对非集合类对象的copy操作\" target=\"_blank\" rel=\"external\">对非集合类对象的copy操作</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2集合类对象的copy与mutablecopy\" target=\"_blank\" rel=\"external\">集合类对象的copy与mutableCopy</a> </li>\n</ol>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#14-synthesize合成实例变量的规则是什么假如property名为foo存在一个名为_foo的实例变量那么还会自动合成新变量么\" target=\"_blank\" rel=\"external\">@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#15-在有了自动合成属性实例变量之后synthesize还有哪些使用场景\" target=\"_blank\" rel=\"external\">在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#16-objc中向一个nil对象发送消息将会发生什么\" target=\"_blank\" rel=\"external\">objc中向一个nil对象发送消息将会发生什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#17-objc中向一个对象发送消息obj-foo和objc_msgsend函数之间有什么关系\" target=\"_blank\" rel=\"external\">objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#18-什么时候会报unrecognized-selector的异常\" target=\"_blank\" rel=\"external\">什么时候会报unrecognized selector的异常？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#19-一个objc对象如何进行内存布局考虑有父类的情况\" target=\"_blank\" rel=\"external\">一个objc对象如何进行内存布局？（考虑有父类的情况）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#20-一个objc对象的isa的指针指向什么有什么作用\" target=\"_blank\" rel=\"external\">一个objc对象的isa的指针指向什么？有什么作用？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#21-下面的代码输出什么\" target=\"_blank\" rel=\"external\">下面的代码输出什么？</a> </li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token keyword\">@implementation</span> Son <span class=\"token punctuation\">:</span> Father\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>init\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">@end</span>\n</code></pre>\n<ol>\n<li>22–55题，请看下篇。</li>\n</ol>\n<h3 id=\"1-风格纠错题\"><a href=\"#1-风格纠错题\" class=\"headerlink\" title=\"1. 风格纠错题\"></a>1. 风格纠错题</h3><p><img src=\"http://i.imgur.com/O7Zev94.png\" alt=\"enter image description here\"><br>修改完的代码：</p>\n<p>修改方法有很多种，现给出一种做示例：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token function\">NS_ENUM</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">,</span> CYLSex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    CYLSexMan<span class=\"token punctuation\">,</span>\n    CYLSexWoman\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@interface</span> CYLUser <span class=\"token punctuation\">:</span> NSObject<span class=\"token operator\">&lt;</span>NSCopying<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> CYLSex sex<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>userWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>下面对具体修改的地方，分两部分做下介绍：<strong>硬伤部分</strong> 和 <strong>优化部分</strong><br>。因为<strong>硬伤部分</strong>没什么技术含量，为了节省大家时间，放在后面讲，大神请直接看<strong>优化部分</strong>。</p>\n<h4 id=\"优化部分\"><a href=\"#优化部分\" class=\"headerlink\" title=\"优化部分\"></a><strong>优化部分</strong></h4><ol>\n<li>enum 建议使用 <code>NS_ENUM</code> 和 <code>NS_OPTIONS</code> 宏来定义枚举类型，参见官方的 <a href=\"https://developer.apple.com/library/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html\" target=\"_blank\" rel=\"external\">Adopting Modern Objective-C</a> 一文：</li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//定义一个枚举</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token function\">NS_ENUM</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">,</span> CYLSex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        CYLSexMan<span class=\"token punctuation\">,</span>\n        CYLSexWoman\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p> （仅仅让性别包含男和女可能并不严谨，最严谨的做法可以参考 <a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/issues/9\" target=\"_blank\" rel=\"external\">这里</a> 。）</p>\n<ol>\n<li><p>age 属性的类型：应避免使用基本类型，建议使用 Foundation 数据类型，对应关系如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">int</span> <span class=\"token operator\">-></span> NSInteger\n<span class=\"token keyword\">unsigned</span> <span class=\"token operator\">-></span> NSUInteger\n<span class=\"token keyword\">float</span> <span class=\"token operator\">-></span> CGFloat\n动画时间 <span class=\"token operator\">-></span> NSTimeInterval\n</code></pre>\n<p>同时考虑到 age 的特点，应使用 NSUInteger ，而非 int 。<br>这样做的是基于64-bit 适配考虑，详情可参考出题者的博文<a href=\"http://blog.sunnyxx.com/2014/12/20/64-bit-tips/\" target=\"_blank\" rel=\"external\">《64-bit Tips》</a>。</p>\n</li>\n</ol>\n<ol>\n<li>如果工程项目非常庞大，需要拆分成不同的模块，可以在类、typedef宏命名的时候使用前缀。</li>\n<li>doLogIn方法不应写在该类中： <p><del>虽然<code>LogIn</code>的命名不太清晰，但笔者猜测是login的意思， （勘误：Login是名词，LogIn 是动词，都表示登陆的意思。见： <a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</del></p>登录操作属于业务逻辑，观察类名 UserModel ，以及属性的命名方式，该类应该是一个 Model 而不是一个“ MVVM 模式下的 ViewModel ”：</li>\n</ol>\n<blockquote>\n<p>无论是 MVC 模式还是 MVVM 模式，业务逻辑都不应当写在 Model 里：MVC 应在 C，MVVM 应在 VM。</p>\n</blockquote>\n<p> （如果抛开命名规范，假设该类真的是 MVVM 模式里的 ViewModel ，那么 UserModel 这个类可能对应的是用户注册页面，如果有特殊的业务需求，比如： <code>-logIn</code> 对应的应当是注册并登录的一个 Button ，出现 <code>-logIn</code> 方法也可能是合理的。）</p>\n<ol>\n<li><p>doLogIn 方法命名不规范：添加了多余的动词前缀。<br>请牢记：</p>\n<blockquote>\n<p>如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用 <code>do</code>，<code>does</code> 这种多余的关键字，动词本身的暗示就足够了。</p>\n</blockquote>\n<p>应为 <code>-logIn</code> （注意： <code>Login</code> 是名词， <code>LogIn</code>  是动词，都表示登陆。  见<a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</p>\n</li>\n<li><p><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code>方法中不要用 <code>with</code> 来连接两个参数: <code>withAge:</code> 应当换为<code>age:</code>，<code>age:</code> 已经足以清晰说明参数的作用，也不建议用 <code>andAge:</code> ：通常情况下，即使有类似 <code>withA:withB:</code> 的命名需求，也通常是使用<code>withA:andB:</code> 这种命名，用来表示方法执行了两个相对独立的操作（<em>从设计上来说，这时候也可以拆分成两个独立的方法</em>），它不应该用作阐明有多个参数，比如下面的：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//错误，不要使用\"and\"来连接参数</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>runModalForDirectory<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>path andFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name andTypes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fileTypes<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//错误，不要使用\"and\"来阐明有多个参数</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>width andAge<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CGFloat<span class=\"token punctuation\">)</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//正确，使用\"and\"来表示两个相对独立的操作</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>openFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fullPath withApplication<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>appName andDeactivate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>flag<span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>由于字符串值可能会改变，所以要把相关属性的“内存管理语义”声明为 copy 。(原因在下文有详细论述：<strong><em>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？</em></strong>)</p>\n</li>\n<li><p>“性别”(sex）属性的：该类中只给出了一种“初始化方法” (initializer)用于设置“姓名”(Name)和“年龄”(Age)的初始值，那如何对“性别”(Sex）初始化？</p>\n<p>Objective-C 有 designated 和 secondary 初始化方法的观念。 designated 初始化方法是提供所有的参数，secondary 初始化方法是一个或多个，并且提供一个或者更多的默认参数来调用 designated 初始化方法的初始化方法。举例说明：</p>\n</li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">\n    <span class=\"token comment\" spellcheck=\"true\">// .m文件</span>\n    <span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n    <span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n    <span class=\"token comment\" spellcheck=\"true\">//</span>\n\n    <span class=\"token keyword\">@implementation</span> CYLUser\n\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name\n                             age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age\n                             sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            _age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n            _sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name\n                             age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> initWithName<span class=\"token punctuation\">:</span>name age<span class=\"token punctuation\">:</span>age sex<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">@end</span>\n</code></pre>\n<p> 上面的代码中initWithName:age:sex: 就是 designated 初始化方法，另外的是 secondary 初始化方法。因为仅仅是调用类实现的 designated 初始化方法。</p>\n<p>  因为出题者没有给出 <code>.m</code> 文件，所以有两种猜测：1：本来打算只设计一个 designated 初始化方法，但漏掉了“性别”(sex）属性。那么最终的修改代码就是上文给出的第一种修改方法。2：不打算初始时初始化“性别”(sex）属性，打算后期再修改，如果是这种情况，那么应该把“性别”(sex）属性设为 readwrite 属性，最终给出的修改代码应该是：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">\n\n    <span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n    <span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n    <span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 第二种修改方法（基于第一种修改方法的基础上）</span>\n\n    <span class=\"token keyword\">typedef</span> <span class=\"token function\">NS_ENUM</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">,</span> CYLSex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        CYLSexMan<span class=\"token punctuation\">,</span>\n        CYLSexWoman\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">@interface</span> CYLUser <span class=\"token punctuation\">:</span> NSObject<span class=\"token operator\">&lt;</span>NSCopying<span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readwrite<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> CYLSex sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>userWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">@end</span>\n</code></pre>\n<p>  <code>.h</code> 中暴露 designated 初始化方法，是为了方便子类化 （想了解更多，请戳–》 <a href=\"http://is.gd/OQ49zk\" target=\"_blank\" rel=\"external\"><strong><em>《禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）》</em></strong></a>。）</p>\n<ul>\n<li>按照接口设计的惯例，如果设计了“初始化方法” (initializer)，也应当搭配一个快捷构造方法。而快捷构造方法的返回值，建议为 instancetype，为保持一致性，init 方法和快捷构造方法的返回类型最好都用 instancetype。</li>\n<li>如果基于第一种修改方法：既然该类中已经有一个“初始化方法” (initializer)，用于设置“姓名”(Name)、“年龄”(Age)和“性别”(Sex）的初始值:<br>那么在设计对应 <code>@property</code> 时就应该尽量使用不可变的对象：其三个属性都应该设为“只读”。用初始化方法设置好属性值之后，就不能再改变了。在本例中，仍需声明属性的“内存管理语义”。于是可以把属性的定义改成这样</li>\n</ul>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">        <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> CYLSex sex<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code>  由于是只读属性，所以编译器不会为其创建对应的“设置方法”，即便如此，我们还是要写上这些属性的语义，以此表明初始化方法在设置这些属性值时所用的方式。要是不写明语义的话，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而且低效。\n</code></pre><ol>\n<li><code>initUserModelWithUserName</code> 如果改为 <code>initWithName</code> 会更加简洁，而且足够清晰。</li>\n<li><code>UserModel</code> 如果改为 <code>User</code> 会更加简洁，而且足够清晰。</li>\n<li><code>UserSex</code>如果改为<code>Sex</code> 会更加简洁，而且足够清晰。</li>\n<li><p>第二个 <code>@property</code> 中 assign 和 nonatomic 调换位置。<br>推荐按照下面的格式来定义属性</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readwrite<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理。 这样做你的属性更容易修改正确，并且更好阅读。这在<a href=\"https://github.com/oa414/objc-zen-book-cn#属性定义\" target=\"_blank\" rel=\"external\">《禅与Objective-C编程艺术 &gt;》</a>里有介绍。而且习惯上修改某个属性的修饰符时，一般从属性名从右向左搜索需要修动的修饰符。最可能从最右边开始修改这些属性的修饰符，根据经验这些修饰符被修改的可能性从高到底应为：内存管理 &gt; 读写权限 &gt;原子操作。</p>\n</li>\n</ol>\n<h4 id=\"硬伤部分\"><a href=\"#硬伤部分\" class=\"headerlink\" title=\"硬伤部分\"></a><strong><em>硬伤部分</em></strong></h4><ol>\n<li>在-和(void)之间应该有一个空格</li>\n<li>enum 中驼峰命名法和下划线命名法混用错误：枚举类型的命名规则和函数的命名规则相同：命名时使用驼峰命名法，勿使用下划线命名法。</li>\n<li>enum 左括号前加一个空格，或者将左括号换到下一行</li>\n<li>enum 右括号后加一个空格</li>\n<li><code>UserModel :NSObject</code> 应为<code>UserModel : NSObject</code>，也就是<code>:</code>右侧少了一个空格。</li>\n<li><code>@interface</code> 与 <code>@property</code> 属性声明中间应当间隔一行。</li>\n<li>两个方法定义之间不需要换行，有时为了区分方法的功能也可间隔一行，但示例代码中间隔了两行。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中方法名与参数之间多了空格。而且 <code>-</code> 与 <code>(id)</code> 之间少了空格。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中方法名与参数之间多了空格：<code>(NSString*)name</code> 前多了空格。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中 <code>(NSString*)name</code>,应为 <code>(NSString *)name</code>，少了空格。 </li>\n<li><p><del>doLogIn方法中的 <code>LogIn</code> 命名不清晰：笔者猜测是login的意思，应该是粗心手误造成的。<br>（勘误： <code>Login</code> 是名词， <code>LogIn</code>  是动词，都表示登陆的意思。见： <a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</del></p>\n\n</li>\n</ol>\n<h3 id=\"2-什么情况使用-weak-关键字，相比-assign-有什么不同？\"><a href=\"#2-什么情况使用-weak-关键字，相比-assign-有什么不同？\" class=\"headerlink\" title=\"2. 什么情况使用 weak 关键字，相比 assign 有什么不同？\"></a>2. 什么情况使用 weak 关键字，相比 assign 有什么不同？</h3><p>什么情况使用 weak 关键字？</p>\n<ol>\n<li><p>在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性</p>\n</li>\n<li><p>自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：<strong><em>《IBOutlet连出来的视图属性为什么可以被设置成weak?》</em></strong></p>\n</li>\n</ol>\n<p>不同点：</p>\n<ol>\n<li><p><code>weak</code> 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似，<br>然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。<br>而 <code>assign</code> 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或<br>NSlnteger 等)的简单赋值操作。</p>\n</li>\n<li><p>assign 可以用非 OC 对象,而 weak 必须用于 OC 对象</p>\n</li>\n</ol>\n<h3 id=\"3-怎么用-copy-关键字？\"><a href=\"#3-怎么用-copy-关键字？\" class=\"headerlink\" title=\"3. 怎么用 copy 关键字？\"></a>3. 怎么用 copy 关键字？</h3><p>用途：</p>\n<ol>\n<li>NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；</li>\n<li><p>block 也经常使用 copy 关键字，具体原因见<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12\" target=\"_blank\" rel=\"external\">官方文档：<strong><em>Objects Use Properties to Keep Track of Blocks</em></strong></a>：</p>\n<p>block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.在 ARC 中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但写上 copy 也无伤大雅，还能时刻提醒我们：编译器自动对 block 进行了 copy 操作。如果不写 copy ，该类的调用者有可能会忘记或者根本不知道“编译器会自动对 block 进行了 copy 操作”，他们有可能会在调用之前自行拷贝属性值。这种操作多余而低效。你也许会感觉我这种做法有些怪异，不需要写依然写。如果你这样想，其实是你“日用而不知”，你平时开发中是经常在用我说的这种做法的，比如下面的属性不写copy也行，但是你会选择写还是不写呢？</p>\n</li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"> <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>userId<span class=\"token punctuation\">;</span>\n\n <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithUserId<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>userId <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    _userId <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>userId copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p> <img src=\"http://i.imgur.com/VlVKl8L.png\" alt=\"enter image description here\"></p>\n<p>下面做下解释：<br> copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。<br>当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。</p>\n<blockquote>\n<p>用 <code>@property</code> 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。</p>\n</blockquote>\n<p>该问题在下文中也有论述：<strong><em>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</em></strong></p>\n<h3 id=\"4-这个写法会出什么问题：-property-copy-NSMutableArray-array\"><a href=\"#4-这个写法会出什么问题：-property-copy-NSMutableArray-array\" class=\"headerlink\" title=\"4. 这个写法会出什么问题： @property (copy) NSMutableArray *array;\"></a>4. 这个写法会出什么问题： <code>@property (copy) NSMutableArray *array;</code></h3><p>两个问题：1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；2、使用了 atomic 属性会严重影响性能 ； </p>\n<p>第1条的相关原因在下文中有论述<strong><em>《用@property声明的NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？》</em></strong> 以及上文<strong><em>《怎么用 copy 关键字？》</em></strong>也有论述。</p>\n<p>比如下面的代码就会发生崩溃</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 下面的代码就会发生崩溃</span>\n\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSMutableArray <span class=\"token operator\">*</span>mutableArray<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .m文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 下面的代码就会发生崩溃</span>\n\nNSMutableArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithObjects<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">@</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mutableArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mutableArray removeObjectAtIndex<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来就会奔溃：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"> <span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>__NSArrayI removeObjectAtIndex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> unrecognized selector sent to instance <span class=\"token number\">0x7fcd1bc30460</span>\n</code></pre>\n<p>第2条原因，如下：</p>\n<blockquote>\n<p>该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明 nonatomic 可以节省这些虽然很小但是不必要额外开销。</p>\n</blockquote>\n<p>在默认情况下，由编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的”(atomic))。</p>\n<p>在iOS开发中，你会发现，几乎所有属性都声明为 nonatomic。</p>\n<p>一般情况下并不要求属性必须是“原子的”，因为这并不能保证“线程安全” ( thread safety)，若要实现“线程安全”的操作，还需采用更为深层的锁定机制才行。例如，一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为 atomic，也还是会读到不同的属性值。</p>\n<p>因此，开发iOS程序时一般都会使用 nonatomic 属性。但是在开发 Mac OS X 程序时，使用<br> atomic 属性通常都不会有性能瓶颈。</p>\n<h3 id=\"5-如何让自己的类用-copy-修饰符？如何重写带-copy-关键字的-setter？\"><a href=\"#5-如何让自己的类用-copy-修饰符？如何重写带-copy-关键字的-setter？\" class=\"headerlink\" title=\"5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\"></a>5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</h3><blockquote>\n<p>若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 <code>NSCopying</code> 与 <code>NSMutableCopying</code> 协议。</p>\n</blockquote>\n<p>具体步骤：</p>\n<ol>\n<li>需声明该类遵从 NSCopying 协议</li>\n<li><p>实现 NSCopying 协议。该协议只有一个方法: </p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>copyWithZone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSZone <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>zone<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是 “copyWithZone” 方法。</p>\n</li>\n</ol>\n<p>以第一题的代码为例：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n    <span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n    <span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 修改完的代码</span>\n\n    <span class=\"token keyword\">typedef</span> <span class=\"token function\">NS_ENUM</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">,</span> CYLSex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        CYLSexMan<span class=\"token punctuation\">,</span>\n        CYLSexWoman\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">@interface</span> CYLUser <span class=\"token punctuation\">:</span> NSObject<span class=\"token operator\">&lt;</span>NSCopying<span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> CYLSex sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>userWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">@end</span>\n</code></pre>\n<p>然后实现协议中规定的方法：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>copyWithZone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSZone <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>zone <span class=\"token punctuation\">{</span>\n    CYLUser <span class=\"token operator\">*</span>copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span> allocWithZone<span class=\"token punctuation\">:</span>zone<span class=\"token punctuation\">]</span> \n                     initWithName<span class=\"token punctuation\">:</span>_name\n                                   age<span class=\"token punctuation\">:</span>_age\n                                  sex<span class=\"token punctuation\">:</span>_sex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但在实际的项目中，不可能这么简单，遇到更复杂一点，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。举个例子，假如 CYLUser 中含有一个数组，与其他 CYLUser 对象建立或解除朋友关系的那些方法都需要操作这个数组。那么在这种情况下，你得把这个包含朋友对象的数组也一并拷贝过来。下面列出了实现此功能所需的全部代码:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 以第一题《风格纠错题》里的代码为例</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token function\">NS_ENUM</span><span class=\"token punctuation\">(</span>NSInteger<span class=\"token punctuation\">,</span> CYLSex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    CYLSexMan<span class=\"token punctuation\">,</span>\n    CYLSexWoman\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@interface</span> CYLUser <span class=\"token punctuation\">:</span> NSObject<span class=\"token operator\">&lt;</span>NSCopying<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> NSUInteger age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readonly<span class=\"token punctuation\">,</span> assign<span class=\"token punctuation\">)</span> CYLSex sex<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>userWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>addFriend<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLUser <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>user<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>removeFriend<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLUser <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>user<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>// .m文件</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .m文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token keyword\">@implementation</span> CYLUser <span class=\"token punctuation\">{</span>\n    NSMutableSet <span class=\"token operator\">*</span>_friends<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name <span class=\"token punctuation\">{</span>\n    _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name\n                         age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age\n                         sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        _age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        _sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n        _friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableSet alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>addFriend<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLUser <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>user <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>_friends addObject<span class=\"token punctuation\">:</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>removeFriend<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLUser <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>user <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>_friends removeObject<span class=\"token punctuation\">:</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>copyWithZone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSZone <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>zone <span class=\"token punctuation\">{</span>\n    CYLUser <span class=\"token operator\">*</span>copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span> allocWithZone<span class=\"token punctuation\">:</span>zone<span class=\"token punctuation\">]</span>\n                     initWithName<span class=\"token punctuation\">:</span>_name\n                     age<span class=\"token punctuation\">:</span>_age\n                     sex<span class=\"token punctuation\">:</span>_sex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    copy<span class=\"token operator\">-></span>_friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>_friends mutableCopy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>deepCopy <span class=\"token punctuation\">{</span>\n    CYLUser <span class=\"token operator\">*</span>copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span> alloc<span class=\"token punctuation\">]</span>\n                     initWithName<span class=\"token punctuation\">:</span>_name\n                     age<span class=\"token punctuation\">:</span>_age\n                     sex<span class=\"token punctuation\">:</span>_sex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    copy<span class=\"token operator\">-></span>_friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableSet alloc<span class=\"token punctuation\">]</span> initWithSet<span class=\"token punctuation\">:</span>_friends\n                                             copyItems<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>以上做法能满足基本的需求，但是也有缺陷：</p>\n<blockquote>\n<p>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</p>\n</blockquote>\n<p>【注：深浅拷贝的概念，在下文中有介绍，详见下文的：<strong><em>用@property声明的 NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用 strong 关键字，可能造成什么问题？</em></strong>】</p>\n<p>在例子中，存放朋友对象的 set 是用 “copyWithZone:” 方法来拷贝的，这种浅拷贝方式不会逐个复制 set 中的元素。若需要深拷贝的话，则可像下面这样，编写一个专供深拷贝所用的方法:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>deepCopy <span class=\"token punctuation\">{</span>\n    CYLUser <span class=\"token operator\">*</span>copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span> alloc<span class=\"token punctuation\">]</span>\n                     initWithName<span class=\"token punctuation\">:</span>_name\n                     age<span class=\"token punctuation\">:</span>_age\n                     sex<span class=\"token punctuation\">:</span>_sex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    copy<span class=\"token operator\">-></span>_friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableSet alloc<span class=\"token punctuation\">]</span> initWithSet<span class=\"token punctuation\">:</span>_friends\n                                             copyItems<span class=\"token punctuation\">:</span>YES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>至于<strong><em>如何重写带 copy 关键字的 setter</em></strong>这个问题，</p>\n<p>如果抛开本例来回答的话，如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//[_name release];</span>\n    _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>不过也有争议，有人说“苹果如果像下面这样干，是不是效率会高一些？”</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_name <span class=\"token operator\">!=</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//[_name release];//MRC</span>\n        _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样真得高效吗？不见得！这种写法“看上去很美、很合理”，但在实际开发中，它更像下图里的做法：</p>\n<p><img src=\"http://i.imgur.com/UwV9oSn.jpeg\" alt=\"enter image description here\"></p>\n<p>克强总理这样评价你的代码风格：</p>\n<p><img src=\"http://i.imgur.com/N77Lkic.png\" alt=\"enter image description here\"></p>\n<p>我和总理的意见基本一致：</p>\n<blockquote>\n<p>老百姓 copy 一下，咋就这么难？</p>\n</blockquote>\n<p>你可能会说：</p>\n<p>之所以在这里做<code>if判断</code> 这个操作：是因为一个 if 可能避免一个耗时的copy，还是很划算的。<br>(在刚刚讲的：《如何让自己的类用 copy 修饰符？》里的那种复杂的copy，我们可以称之为 “耗时的copy”，但是对 NSString 的 copy 还称不上。)</p>\n<p>但是你有没有考虑过代价：</p>\n<blockquote>\n<p>你每次调用 <code>setX:</code> 都会做 if 判断，这会让 <code>setX:</code> 变慢，如果你在 <code>setX:</code>写了一串复杂的 <code>if+elseif+elseif+...</code> 判断，将会更慢。</p>\n</blockquote>\n<p>要回答“哪个效率会高一些？”这个问题，不能脱离实际开发，就算 copy 操作十分耗时，if 判断也不见得一定会更快，除非你把一个“ @property他当前的值 ”赋给了他自己，代码看起来就像：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token punctuation\">[</span>a setX<span class=\"token punctuation\">:</span>x1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>a setX<span class=\"token punctuation\">:</span>x1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//你确定你要这么干？与其在setter中判断，为什么不把代码写好？</span>\n</code></pre>\n<p>或者</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token punctuation\">[</span>a setX<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>a x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//队友咆哮道：你在干嘛？！！</span>\n</code></pre>\n<blockquote>\n<p>不要在 setter 里进行像 <code>if(_obj != newObj)</code> 这样的判断。（该观点参考链接：<a href=\"http://vgable.com/blog/tag/autorelease/\" target=\"_blank\" rel=\"external\"> <strong><em>How To Write Cocoa Object Setters： Principle 3: Only Optimize After You Measure</em></strong> </a><br>）</p>\n</blockquote>\n<p>什么情况会在 copy setter 里做 if 判断？<br>例如，车速可能就有最高速的限制，车速也不可能出现负值，如果车子的最高速为300，则 setter 的方法就要改写成这样：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setSpeed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_speed<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_speed <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_speed <span class=\"token operator\">></span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    _speed <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>回到这个题目，如果单单就上文的代码而言，我们不需要也不能重写 name 的 setter ：由于是 name 是只读属性，所以编译器不会为其创建对应的“设置方法”，用初始化方法设置好属性值之后，就不能再改变了。（ 在本例中，之所以还要声明属性的“内存管理语义”–copy，是因为：如果不写 copy，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而低效）。</p>\n<p>那如何确保 name 被 copy？在初始化方法(initializer)中做：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>initWithName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name \n                                 age<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSUInteger<span class=\"token punctuation\">)</span>age \n                                 sex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>CYLSex<span class=\"token punctuation\">)</span>sex <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             _name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             _age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n             _sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n             _friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableSet alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"6-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\"><a href=\"#6-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\" class=\"headerlink\" title=\"6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\"></a>6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</h3><p><strong>@property 的本质是什么？</strong></p>\n<blockquote>\n<p>@property = ivar + getter + setter;</p>\n</blockquote>\n<p>下面解释下：</p>\n<blockquote>\n<p>“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。</p>\n</blockquote>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 <code>Objective-C 2.0</code> 的一部分。<br>而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。<br>正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:</p>\n<blockquote>\n<p>编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。<br>所以你也可以这么说：</p>\n<p>@property = getter + setter;</p>\n</blockquote>\n<p>例如下面这个类：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@interface</span> Person <span class=\"token punctuation\">:</span> NSObject\n<span class=\"token keyword\">@property</span> NSString <span class=\"token operator\">*</span>firstName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@property</span> NSString <span class=\"token operator\">*</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>上述代码写出来的类与下面这种写法等效：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@interface</span> Person <span class=\"token punctuation\">:</span> NSObject\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>firstName<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setFirstName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>firstName<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setLastName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p><strong>更新</strong>：</p>\n<p>property在runtime中是<code>objc_property_t</code>定义如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> objc_property <span class=\"token operator\">*</span>objc_property_t<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而<code>objc_property</code>是一个结构体，包括name和attributes，定义如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">struct</span> property_t <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>attributes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而attributes本质是<code>objc_property_attribute_t</code>，定义了property的一些属性，定义如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">/// Defines a property attribute</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">/**&lt; The name of the attribute */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">/**&lt; The value of the attribute (usually empty) */</span>\n<span class=\"token punctuation\">}</span> objc_property_attribute_t<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。</p>\n<p>例如：我们定义一个string的property<code>@property (nonatomic, copy) NSString *string;</code>，通过 <code>property_getAttributes(property)</code>获取到attributes并打印出来之后的结果为<code>T@&quot;NSString&quot;,C,N,V_string</code></p>\n<p>其中T就代表类型，可参阅<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\" target=\"_blank\" rel=\"external\">Type Encodings</a>，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。</p>\n<p><strong>ivar、getter、setter 是如何生成并添加到这个类中的?</strong></p>\n<blockquote>\n<p>“自动合成”( autosynthesis)</p>\n</blockquote>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译<br>器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为<br> <code>_firstName</code> 与 <code>_lastName</code>。也可以在类的实现代码里通过<br> <code>@synthesize</code> 语法来指定实例变量的名字.</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@implementation</span> Person\n<span class=\"token keyword\">@synthesize</span> firstName <span class=\"token operator\">=</span> _myFirstName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@synthesize</span> lastName <span class=\"token operator\">=</span> _myLastName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西</p>\n<ol>\n<li><code>OBJC_IVAR_$类名$属性名称</code> ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。</li>\n<li>setter 与 getter 方法对应的实现函数</li>\n<li><code>ivar_list</code> ：成员变量列表</li>\n<li><code>method_list</code> ：方法列表</li>\n<li><code>prop_list</code> ：属性列表</li>\n</ol>\n<p>也就是说我们每次在增加一个属性,系统都会在 <code>ivar_list</code> 中添加一个成员变量的描述,在 <code>method_list</code> 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.</p>\n<h3 id=\"7-protocol-和-category-中如何使用-property\"><a href=\"#7-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"7. @protocol 和 category 中如何使用 @property\"></a>7. @protocol 和 category 中如何使用 @property</h3><ol>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li><p>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：</p>\n<ol>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"8-runtime-如何实现-weak-属性\"><a href=\"#8-runtime-如何实现-weak-属性\" class=\"headerlink\" title=\"8. runtime 如何实现 weak 属性\"></a>8. runtime 如何实现 weak 属性</h3><p>要实现 weak 属性，首先要搞清楚 weak 属性的特点：</p>\n<blockquote>\n<p>weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同 assign 类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n</blockquote>\n<p>那么 runtime 如何实现 weak 变量的自动置nil？</p>\n<blockquote>\n<p>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。</p>\n</blockquote>\n<p>（注：在下文的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到<code>__weak</code>引用的解除时间。）</p>\n<p>先看下 runtime 里源码的实现：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">/**\n * The internal structure stored in the weak references table. \n * It maintains and stores\n * a hash set of weak references pointing to an object.\n * If out_of_line==0, the set is instead a small inline array.\n */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> WEAK_INLINE_COUNT 4</span>\n<span class=\"token keyword\">struct</span> weak_entry_t <span class=\"token punctuation\">{</span>\n    DisguisedPtr<span class=\"token operator\">&lt;</span>objc_object<span class=\"token operator\">></span> referent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n            weak_referrer_t <span class=\"token operator\">*</span>referrers<span class=\"token punctuation\">;</span>\n            uintptr_t        out_of_line <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            uintptr_t        num_refs <span class=\"token punctuation\">:</span> PTR_MINUS_1<span class=\"token punctuation\">;</span>\n            uintptr_t        mask<span class=\"token punctuation\">;</span>\n            uintptr_t        max_hash_displacement<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// out_of_line=0 is LSB of one of these (don't care which)</span>\n            weak_referrer_t  inline_referrers<span class=\"token punctuation\">[</span>WEAK_INLINE_COUNT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * The global weak references table. Stores object ids as keys,\n * and weak_entry_t structs as their values.\n */</span>\n<span class=\"token keyword\">struct</span> weak_table_t <span class=\"token punctuation\">{</span>\n    weak_entry_t <span class=\"token operator\">*</span>weak_entries<span class=\"token punctuation\">;</span>\n    size_t    num_entries<span class=\"token punctuation\">;</span>\n    uintptr_t mask<span class=\"token punctuation\">;</span>\n    uintptr_t max_hash_displacement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>具体完整实现参照 <a href=\"https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-weak.h\" target=\"_blank\" rel=\"external\">objc/objc-weak.h</a> 。</p>\n<p>我们可以设计一个函数（伪代码）来表示上述机制：</p>\n<p><code>objc_storeWeak(&amp;a, b)</code>函数：</p>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（b）的内存地址作为键值key，将第一个参数–weak修饰的属性变量（a）的内存地址（&amp;a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&amp;a）从weak表中删除，</p>\n<p>你可以把<code>objc_storeWeak(&amp;a, b)</code>理解为：<code>objc_storeWeak(value, key)</code>，并且当key变nil，将value置nil。</p>\n<p>在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。</p>\n<p>而如果a是由 assign 修饰的，则：<br>在 b 非 nil 时，a 和 b 指向同一个内存地址，在 b 变 nil 时，a 还是指向该内存地址，变野指针。此时向 a 发送消息极易崩溃。</p>\n<p>下面我们将基于<code>objc_storeWeak(&amp;a, b)</code>函数，使用伪代码模拟“runtime如何实现weak属性”：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// 使用伪代码模拟：runtime如何实现weak属性</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n\n id obj1<span class=\"token punctuation\">;</span>\n <span class=\"token function\">objc_initWeak</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*obj引用计数变为0，变量作用域结束*/</span>\n <span class=\"token function\">objc_destroyWeak</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面对用到的两个方法<code>objc_initWeak</code>和<code>objc_destroyWeak</code>做下解释：</p>\n<p>总体说来，作用是：<br>通过<code>objc_initWeak</code>函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过<code>objc_destoryWeak</code>函数释放该变量（obj1）。</p>\n<p>下面分别介绍下方法的内部实现：</p>\n<p><code>objc_initWeak</code>函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">obj1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；\n<span class=\"token function\">obj_storeWeak</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）</p>\n</blockquote>\n<p>然后<code>obj_destroyWeak</code>函数将0（nil）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<p><code>objc_storeWeak(&amp;obj1, 0);</code></p>\n<p>前面的源代码与下列源代码相同。</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// 使用伪代码模拟：runtime如何实现weak属性</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n\nid obj1<span class=\"token punctuation\">;</span>\nobj1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">objc_storeWeak</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* ... obj的引用计数变为0，被置nil ... */</span>\n<span class=\"token function\">objc_storeWeak</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>objc_storeWeak</code> 函数把第二个参数–赋值对象（obj）的内存地址作为键值，将第一个参数–weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从 weak 表中删除，在后面的相关一题会详解。</p>\n<p>使用伪代码是为了方便理解，下面我们“真枪实弹”地实现下：</p>\n<blockquote>\n<p>如何让不使用weak修饰的@property，拥有weak的效果。</p>\n</blockquote>\n<p>我们从setter方法入手：</p>\n<p>（注意以下的 <code>cyl_runAtDealloc</code> 方法实现仅仅用于模拟原理，如果想用于项目中，还需要考虑更复杂的场景，想在实际项目使用的话，可以使用我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> ）</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>object\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">objc_setAssociatedObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">,</span> OBJC_ASSOCIATION_ASSIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>object cyl_runAtDealloc<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        _object <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>也就是有两个步骤：</p>\n<ol>\n<li>在setter方法中做如下设置：</li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">        <span class=\"token function\">objc_setAssociatedObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">,</span> OBJC_ASSOCIATION_ASSIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li><p>在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。做到这点，同样要借助 runtime：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//要销毁的目标对象</span>\nid objectToBeDeallocated<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//可以理解为一个“事件”：当上面的目标对象销毁时，同时要发生的“事件”。</span>\nid objectWeWantToBeReleasedWhenThatHappens<span class=\"token punctuation\">;</span>\n<span class=\"token function\">objc_setAssociatedObject</span><span class=\"token punctuation\">(</span>objectToBeDeallocted<span class=\"token punctuation\">,</span>\n                     someUniqueKey<span class=\"token punctuation\">,</span>\n                     objectWeWantToBeReleasedWhenThatHappens<span class=\"token punctuation\">,</span>\n                     OBJC_ASSOCIATION_RETAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<p>知道了思路，我们就开始实现 <code>cyl_runAtDealloc</code> 方法，实现过程分两部分：</p>\n<p>第一部分：创建一个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助 block 执行“事件”。</p>\n<p>// .h文件</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .h文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">^</span>voidBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@interface</span> CYLBlockExecutor <span class=\"token punctuation\">:</span> NSObject\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>initWithBlock<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>voidBlock<span class=\"token punctuation\">)</span>block<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>// .m文件</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// .m文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLBlockExecutor.h\"</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">CYLBlockExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    voidBlock _block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">@implementation</span> CYLBlockExecutor\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>initWithBlock<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>voidBlock<span class=\"token punctuation\">)</span>aBlock\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _block <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>aBlock copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>dealloc\n<span class=\"token punctuation\">{</span>\n    _block <span class=\"token operator\">?</span> <span class=\"token function\">_block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nil<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>第二部分：核心代码：利用runtime实现<code>cyl_runAtDealloc</code>方法</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// CYLNSObject+RunAtDealloc.h文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 利用runtime实现cyl_runAtDealloc方法</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLBlockExecutor.h\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>runAtDeallocBlockKey <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>runAtDeallocBlockKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">NSObject</span> <span class=\"token punctuation\">(</span>CYLRunAtDealloc<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>cyl_runAtDealloc<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>voidBlock<span class=\"token punctuation\">)</span>block<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@end</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// CYLNSObject+RunAtDealloc.m文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 利用runtime实现cyl_runAtDealloc方法</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLNSObject+RunAtDealloc.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLBlockExecutor.h\"</span>\n\n<span class=\"token keyword\">@implementation</span> <span class=\"token function\">NSObject</span> <span class=\"token punctuation\">(</span>CYLRunAtDealloc<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>cyl_runAtDealloc<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>voidBlock<span class=\"token punctuation\">)</span>block\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        CYLBlockExecutor <span class=\"token operator\">*</span>executor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CYLBlockExecutor alloc<span class=\"token punctuation\">]</span> initWithBlock<span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">objc_setAssociatedObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>\n                                 runAtDeallocBlockKey<span class=\"token punctuation\">,</span>\n                                 executor<span class=\"token punctuation\">,</span>\n                                 OBJC_ASSOCIATION_RETAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>使用方法：<br>导入</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLNSObject+RunAtDealloc.h\"</span>\n</code></pre>\n<p>然后就可以使用了：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSObject <span class=\"token operator\">*</span>foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSObject alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span>foo cyl_runAtDealloc<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"正在释放foo!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果对 <code>cyl_runAtDealloc</code> 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> </p>\n<p>参考博文： <a href=\"http://stackoverflow.com/a/31560217/3395008\" target=\"_blank\" rel=\"external\"><strong><em>Fun With the Objective-C Runtime: Run Code at Deallocation of Any Object</em></strong></a></p>\n<h3 id=\"9-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#9-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h3><p>属性可以拥有的特质分为四类:</p>\n<ol>\n<li><p>原子性— <code>nonatomic</code> 特质</p>\n<p>在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。</p>\n</li>\n<li><p>读/写权限—<code>readwrite(读写)</code>、<code>readonly (只读)</code></p>\n</li>\n<li>内存管理语义—<code>assign</code>、<code>strong</code>、 <code>weak</code>、<code>unsafe_unretained</code>、<code>copy</code></li>\n<li><p>方法名—<code>getter=&lt;name&gt;</code> 、<code>setter=&lt;name&gt;</code></p>\n<p><code>getter=&lt;name&gt;</code>的样式：</p>\n</li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">        <span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> getter<span class=\"token operator\">=</span>isOn<span class=\"token punctuation\">)</span> BOOL on<span class=\"token punctuation\">;</span>\n</code></pre>\n <p><del>（ <code>setter=&lt;name&gt;</code>这种不常用，也不推荐使用。故不在这里给出写法。）<br></del></p>\n\n\n<p> <code>setter=&lt;name&gt;</code>一般用在特殊的情境下，比如：</p>\n<p>在数据反序列化、转模型的过程中，服务器返回的字段如果以 <code>init</code> 开头，所以你需要定义一个 <code>init</code> 开头的属性，但默认生成的 <code>setter</code> 与 <code>getter</code> 方法也会以 <code>init</code> 开头，而编译器会把所有以 <code>init</code> 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。</p>\n<p>这时你就可以使用下面的方式来避免编译器报错：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@property</span><span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> strong<span class=\"token punctuation\">,</span> getter<span class=\"token operator\">=</span>p_initBy<span class=\"token punctuation\">,</span> setter<span class=\"token operator\">=</span>setP_initBy<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span>NSString <span class=\"token operator\">*</span>initBy<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>另外也可以用关键字进行特殊说明，来避免编译器报错：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@property</span><span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> readwrite<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">,</span> null_resettable<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>initBy<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>initBy <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">objc_method_family</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li>不常用的：<code>nonnull</code>,<code>null_resettable</code>,<code>nullable</code></li>\n</ol>\n<p>注意：很多人会认为如果属性具备 nonatomic 特质，则不使用<br>“同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reallySetProperty</span><span class=\"token punctuation\">(</span>id <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> SEL _cmd<span class=\"token punctuation\">,</span> id newValue<span class=\"token punctuation\">,</span> ptrdiff_t offset<span class=\"token punctuation\">,</span> bool atomic<span class=\"token punctuation\">,</span> bool copy<span class=\"token punctuation\">,</span> bool mutableCopy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">object_setClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    id oldValue<span class=\"token punctuation\">;</span>\n    id <span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">self</span> <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>newValue copyWithZone<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutableCopy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>newValue mutableCopyWithZone<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot <span class=\"token operator\">==</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        newValue <span class=\"token operator\">=</span> <span class=\"token function\">objc_retain</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>atomic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oldValue <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>slot<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        spinlock_t<span class=\"token operator\">&amp;</span> slotlock <span class=\"token operator\">=</span> PropertyLocks<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        slotlock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oldValue <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>slot<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>        \n        slotlock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">objc_release</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">objc_setProperty</span><span class=\"token punctuation\">(</span>id <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> SEL _cmd<span class=\"token punctuation\">,</span> ptrdiff_t offset<span class=\"token punctuation\">,</span> id newValue<span class=\"token punctuation\">,</span> BOOL atomic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> shouldCopy<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    bool copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shouldCopy <span class=\"token operator\">&amp;&amp;</span> shouldCopy <span class=\"token operator\">!=</span> MUTABLE_COPY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bool mutableCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shouldCopy <span class=\"token operator\">==</span> MUTABLE_COPY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reallySetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _cmd<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> atomic<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">,</span> mutableCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"10-weak属性需要在dealloc中置nil么？\"><a href=\"#10-weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"10. weak属性需要在dealloc中置nil么？\"></a>10. weak属性需要在dealloc中置nil么？</h3><p>不需要。</p>\n<blockquote>\n<p>在ARC环境无论是强指针还是弱指针都无需在 dealloc 设置为 nil ， ARC 会自动帮我们处理</p>\n</blockquote>\n<p>即便是编译器不帮我们做这些，weak也不需要在 dealloc 中置nil：</p>\n<p>正如上文的：<strong><em>runtime 如何实现 weak 属性</em></strong> 中提到的：</p>\n<p>我们模拟下 weak 的 setter 方法，应该如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>object\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">objc_setAssociatedObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">,</span> OBJC_ASSOCIATION_ASSIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>object cyl_runAtDealloc<span class=\"token punctuation\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">{</span>\n        _object <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果对 <code>cyl_runAtDealloc</code> 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> </p>\n<p>也即:</p>\n<blockquote>\n<p>在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n</blockquote>\n<h3 id=\"11-synthesize和-dynamic分别有什么作用？\"><a href=\"#11-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"11. @synthesize和@dynamic分别有什么作用？\"></a>11. @synthesize和@dynamic分别有什么作用？</h3><ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n<h3 id=\"12-ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"><a href=\"#12-ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\" class=\"headerlink\" title=\"12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"></a>12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</h3><ol>\n<li><p>对应基本数据类型默认关键字是</p>\n<p>atomic,readwrite,assign</p>\n</li>\n<li><p>对于普通的 Objective-C 对象</p>\n<p>atomic,readwrite,strong</p>\n</li>\n</ol>\n<p>参考链接：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/a/15541801/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>Objective-C ARC: strong vs retain and weak vs assign</em></strong> </a></p>\n</li>\n<li><p><a href=\"http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html\" target=\"_blank\" rel=\"external\"> <strong><em>Variable property attributes or Modifiers in iOS</em></strong> </a></p>\n</li>\n</ol>\n<h3 id=\"13-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#13-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h3><ol>\n<li>因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.</li>\n<li><p>如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</p>\n<p>copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。<br>当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。</p>\n</li>\n</ol>\n<p>举例说明：</p>\n<p>定义一个以 strong 修饰的 array：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic <span class=\"token punctuation\">,</span>readwrite<span class=\"token punctuation\">,</span> strong<span class=\"token punctuation\">)</span> NSArray <span class=\"token operator\">*</span>array<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后进行下面的操作：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    NSMutableArray <span class=\"token operator\">*</span>mutableArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSMutableArray alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NSArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">@</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> mutableArray<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>mutableArray removeAllObjects<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span>mutableArray addObjectsFromArray<span class=\"token punctuation\">:</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mutableArray copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>mutableArray removeAllObjects<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果如下所示：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token number\">2015</span><span class=\"token operator\">-</span><span class=\"token number\">09</span><span class=\"token operator\">-</span><span class=\"token number\">27</span> <span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token number\">32.523</span> CYLArrayCopyDmo<span class=\"token punctuation\">[</span><span class=\"token number\">10681</span><span class=\"token punctuation\">:</span><span class=\"token number\">713670</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2015</span><span class=\"token operator\">-</span><span class=\"token number\">09</span><span class=\"token operator\">-</span><span class=\"token number\">27</span> <span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token number\">32.524</span> CYLArrayCopyDmo<span class=\"token punctuation\">[</span><span class=\"token number\">10681</span><span class=\"token punctuation\">:</span><span class=\"token number\">713670</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>（详见仓库内附录的 Demo。）</p>\n<p>为了理解这种做法，首先要知道，两种情况：</p>\n<ol>\n<li>对非集合类对象的 copy 与 mutableCopy 操作；</li>\n<li>对集合类对象的 copy 与 mutableCopy 操作。</li>\n</ol>\n<h4 id=\"1-对非集合类对象的copy操作：\"><a href=\"#1-对非集合类对象的copy操作：\" class=\"headerlink\" title=\"1. 对非集合类对象的copy操作：\"></a>1. 对非集合类对象的copy操作：</h4><p>在非集合类对象中：对 immutable 对象进行 copy 操作，是指针复制，mutableCopy 操作时内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。用代码简单表示如下：</p>\n<ul>\n<li>[immutableObject copy] // 浅复制</li>\n<li>[immutableObject mutableCopy] //深复制</li>\n<li>[mutableObject copy] //深复制</li>\n<li>[mutableObject mutableCopy] //深复制</li>\n</ul>\n<p>比如以下代码：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableString <span class=\"token operator\">*</span>string <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableString stringWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"origin\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//copy</span>\nNSString <span class=\"token operator\">*</span>stringCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>string copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看内存，会发现 string、stringCopy 内存地址都不一样，说明此时都是做内容拷贝、深拷贝。即使你进行如下操作：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token punctuation\">[</span>string appendString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"origion!\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>stringCopy 的值也不会因此改变，但是如果不使用 copy，stringCopy 的值就会被改变。<br>  集合类对象以此类推。<br>所以，</p>\n<blockquote>\n<p>用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。</p>\n</blockquote>\n<h4 id=\"2、集合类对象的copy与mutableCopy\"><a href=\"#2、集合类对象的copy与mutableCopy\" class=\"headerlink\" title=\"2、集合类对象的copy与mutableCopy\"></a>2、集合类对象的copy与mutableCopy</h4><p>集合类对象是指 NSArray、NSDictionary、NSSet … 之类的对象。下面先看集合类immutable对象使用 copy 和 mutableCopy 的一个例子：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSArray <span class=\"token operator\">*</span>copyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSMutableArray <span class=\"token operator\">*</span>mCopyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array mutableCopy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看内容，可以看到 copyArray 和 array 的地址是一样的，而 mCopyArray 和 array 的地址是不同的。说明 copy 操作进行了指针拷贝，mutableCopy 进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝 array 这个对象，array 集合内部的元素仍然是指针拷贝。这和上面的非集合 immutable 对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看 mutable 对象拷贝的例子：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">NSMutableArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray arrayWithObjects<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>NSMutableString stringWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">@\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">@\"c\"</span><span class=\"token punctuation\">,</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSArray <span class=\"token operator\">*</span>copyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nNSMutableArray <span class=\"token operator\">*</span>mCopyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array mutableCopy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>查看内存，如我们所料，copyArray、mCopyArray和 array 的内存地址都不一样，说明 copyArray、mCopyArray 都对 array 进行了内容拷贝。同样，我们可以得出结论：</p>\n<p>在集合类对象中，对 immutable 对象进行 copy，是指针复制， mutableCopy 是内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token punctuation\">[</span>immutableObject copy<span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">// 浅复制</span>\n<span class=\"token punctuation\">[</span>immutableObject mutableCopy<span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">//单层深复制</span>\n<span class=\"token punctuation\">[</span>mutableObject copy<span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">//单层深复制</span>\n<span class=\"token punctuation\">[</span>mutableObject mutableCopy<span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">//单层深复制</span>\n</code></pre>\n<p>这个代码结论和非集合类的非常相似。</p>\n<p>参考链接：<a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"external\">iOS 集合的深复制与浅复制</a></p>\n<h3 id=\"14-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\"><a href=\"#14-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\" class=\"headerlink\" title=\"14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\"></a>14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为<code>_foo</code>的实例变量，那么还会自动合成新变量么？</h3><p>在回答之前先说明下一个概念：</p>\n<blockquote>\n<p>实例变量 = 成员变量 ＝ ivar</p>\n</blockquote>\n<p>这些说法，笔者下文中，可能都会用到，指的是一个东西。</p>\n<p>正如<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW6\" target=\"_blank\" rel=\"external\">Apple官方文档 <strong><em>You Can Customize Synthesized Instance Variable Names</em></strong></a> 所说：<br><img src=\"http://i.imgur.com/D6d0zGJ.png\" alt=\"enter image description here\"></p>\n<p>如果使用了属性的话，那么编译器就会自动编写访问属性所需的方法，此过程叫做“自动合成”( auto synthesis)。需要强调的是，这个过程由编译器在编译期执行，所以编辑器里看不到这些“合成方法” (synthesized method)的源代码。除了生成方法代码之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@interface</span> CYLPerson <span class=\"token punctuation\">:</span> NSObject \n<span class=\"token keyword\">@property</span> NSString <span class=\"token operator\">*</span>firstName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@property</span> NSString <span class=\"token operator\">*</span>lastName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>在上例中，会生成两个实例变量，其名称分别为<br> <code>_firstName</code> 与 <code>_lastName</code>。也可以在类的实现代码里通过 <code>@synthesize</code> 语法来指定实例变量的名字:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@implementation</span> CYLPerson \n<span class=\"token keyword\">@synthesize</span> firstName <span class=\"token operator\">=</span> _myFirstName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@synthesize</span> lastName <span class=\"token operator\">=</span> _myLastName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>上述语法会将生成的实例变量命名为 <code>_myFirstName</code> 与 <code>_myLastName</code> ，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。</p>\n<p>总结下 @synthesize 合成实例变量的规则，有以下几点：</p>\n<ol>\n<li><p>如果指定了成员变量的名称,会生成一个指定的名称的成员变量,</p>\n</li>\n<li><p>如果这个成员已经存在了就不再生成了.</p>\n</li>\n<li><p>如果是 <code>@synthesize foo;</code> 还会生成一个名称为foo的成员变量，也就是说：</p>\n<blockquote>\n<p>如果没有指定成员变量的名称会自动生成一个属性同名的成员变量,</p>\n</blockquote>\n</li>\n</ol>\n<ol>\n<li>如果是 <code>@synthesize foo = _foo;</code> 就不会生成成员变量了.</li>\n</ol>\n<p>假如 property 名为 foo，存在一个名为 <code>_foo</code> 的实例变量，那么还会自动合成新变量么？<br>不会。如下图：</p>\n<p><img src=\"http://i.imgur.com/t28ge4W.png\" alt=\"enter image description here\"></p>\n<h3 id=\"15-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\"><a href=\"#15-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\" class=\"headerlink\" title=\"15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\"></a>15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</h3><p>回答这个问题前，我们要搞清楚一个问题，什么情况下不会autosynthesis（自动合成）？</p>\n<ol>\n<li>同时重写了 setter 和 getter 时</li>\n<li>重写了只读属性的 getter 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li><p>重载的属性 </p>\n<p>当你在子类中重载了父类中的属性，你必须 使用 <code>@synthesize</code> 来手动合成ivar。</p>\n</li>\n</ol>\n<p>除了后三条，对其他几个我们可以总结出一个规律：当你想手动管理 @property 的所有内容时，你就会尝试通过实现 @property 的所有“存取方法”（the accessor methods）或者使用 <code>@dynamic</code> 来达到这个目的，这时编译器就会认为你打算手动管理 @property，于是编译器就禁用了 autosynthesis（自动合成）。</p>\n<p>因为有了 autosynthesis（自动合成），大部分开发者已经习惯不去手动定义ivar，而是依赖于 autosynthesis（自动合成），但是一旦你需要使用ivar，而 autosynthesis（自动合成）又失效了，如果不去手动定义ivar，那么你就得借助 <code>@synthesize</code> 来手动合成 ivar。</p>\n<p>其实，<code>@synthesize</code> 语法还有一个应用场景，但是不太建议大家使用：</p>\n<p>可以在类的实现代码里通过 <code>@synthesize</code> 语法来指定实例变量的名字:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@implementation</span> CYLPerson \n<span class=\"token keyword\">@synthesize</span> firstName <span class=\"token operator\">=</span> _myFirstName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@synthesize</span> lastName <span class=\"token operator\">=</span> _myLastName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>上述语法会将生成的实例变量命名为 <code>_myFirstName</code> 与 <code>_myLastName</code>，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。</p>\n<p>举例说明：应用场景：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// .m文件</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 打开第14行和第17行中任意一行，就可编译成功</span>\n\n<span class=\"token operator\">@</span>import Foundation<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@interface</span> CYLObject <span class=\"token punctuation\">:</span> NSObject\n<span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>nonatomic<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span> NSString <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> CYLObject <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//    NSString *_title;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//@synthesize title = _title;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>init\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _title <span class=\"token operator\">=</span> <span class=\"token string\">@\"微博@iOS程序犭袁\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>title <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setTitle<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>title <span class=\"token punctuation\">{</span>\n    _title <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>title copy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>结果编译器报错：<br><img src=\"http://i.imgur.com/fAEGHIo.png\" alt=\"enter image description here\"></p>\n<p>当你同时重写了 setter 和 getter 时，系统就不会生成 ivar（实例变量/成员变量）。这时候有两种选择：</p>\n<ol>\n<li>要么如第14行：手动创建 ivar</li>\n<li>要么如第17行：使用<code>@synthesize foo = _foo;</code> ，关联 @property 与 ivar。</li>\n</ol>\n<p>更多信息，请戳- 》<a href=\"http://stackoverflow.com/a/19821816/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>When should I use @synthesize explicitly?</em></strong> </a></p>\n<h3 id=\"16-objc中向一个nil对象发送消息将会发生什么？\"><a href=\"#16-objc中向一个nil对象发送消息将会发生什么？\" class=\"headerlink\" title=\"16. objc中向一个nil对象发送消息将会发生什么？\"></a>16. objc中向一个nil对象发送消息将会发生什么？</h3><p>在 Objective-C 中向 nil 发送消息是完全有效的——只是在运行时不会有任何作用:</p>\n<ol>\n<li>如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)。例如：  </li>\n</ol>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">Person <span class=\"token operator\">*</span> motherInlaw <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>aPerson spouse<span class=\"token punctuation\">]</span> mother<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p> 如果 spouse 对象为 nil，那么发送给 nil 的消息 mother 也将返回 nil。</p>\n<ol>\n<li>如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者 long long 的整型标量，发送给 nil 的消息将返回0。</li>\n<li>如果方法返回值为结构体,发送给 nil 的消息将返回0。结构体中各个字段的值将都是0。</li>\n<li>如果方法的返回值不是上述提到的几种情况，那么发送给 nil 的消息的返回值将是未定义的。</li>\n</ol>\n<p>具体原因如下：</p>\n<blockquote>\n<p>objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。</p>\n</blockquote>\n<p>那么，为了方便理解这个内容，还是贴一个objc的源代码：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// runtime.h（类在runtime中的定义）</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n\n<span class=\"token keyword\">struct</span> objc_class <span class=\"token punctuation\">{</span>\n  Class isa OBJC_ISA_AVAILABILITY<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !__OBJC2__</span>\n  Class super_class OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 父类</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 类名</span>\n  <span class=\"token keyword\">long</span> version OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 类的版本信息，默认为0</span>\n  <span class=\"token keyword\">long</span> info OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 类信息，供运行期使用的一些位标识</span>\n  <span class=\"token keyword\">long</span> instance_size OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 该类的实例变量大小</span>\n  <span class=\"token keyword\">struct</span> objc_ivar_list <span class=\"token operator\">*</span>ivars OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 该类的成员变量链表</span>\n  <span class=\"token keyword\">struct</span> objc_method_list <span class=\"token operator\">*</span><span class=\"token operator\">*</span>methodLists OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 方法定义的链表</span>\n  <span class=\"token keyword\">struct</span> objc_cache <span class=\"token operator\">*</span>cache OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。</span>\n  <span class=\"token keyword\">struct</span> objc_protocol_list <span class=\"token operator\">*</span>protocols OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 协议链表</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token punctuation\">}</span> OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。<br>那么，回到本题，如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误。</p>\n<h3 id=\"17-objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？\"><a href=\"#17-objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？\" class=\"headerlink\" title=\"17. objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？\"></a>17. objc中向一个对象发送消息[obj foo]和<code>objc_msgSend()</code>函数之间有什么关系？</h3><p>具体原因同上题：该方法编译之后就是<code>objc_msgSend()</code>函数调用.</p>\n<p>我们用 clang 分析下，clang 提供一个命令，可以将Objective-C的源码改写成C++语言，借此可以研究下[obj foo]和<code>objc_msgSend()</code>函数之间有什么关系。</p>\n<p>以下面的代码为例，由于 clang 后的代码达到了10万多行，为了便于区分，添加了一个叫 iOSinit 方法，</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  main.m</span>\n<span class=\"token comment\" spellcheck=\"true\">//  http://weibo.com/luohanchenyilong/</span>\n<span class=\"token comment\" spellcheck=\"true\">//  https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CYLTest.h\"</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">@</span>autoreleasepool <span class=\"token punctuation\">{</span>\n        CYLTest <span class=\"token operator\">*</span>test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CYLTest alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>test performSelector<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>iOSinit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在终端中输入</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">clang <span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>objc main<span class=\"token punctuation\">.</span>m\n</code></pre>\n<p>就可以生成一个<code>main.cpp</code>的文件，在最低端（10万4千行左右）</p>\n<p><img src=\"http://i.imgur.com/eAH5YWn.png\" alt=\"enter image description here\"></p>\n<p>我们可以看到大概是这样的：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> SEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span>objc_msgSend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">,</span> <span class=\"token function\">sel_registerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> [obj foo];在objc动态编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h3 id=\"18-什么时候会报unrecognized-selector的异常？\"><a href=\"#18-什么时候会报unrecognized-selector的异常？\" class=\"headerlink\" title=\"18. 什么时候会报unrecognized selector的异常？\"></a>18. 什么时候会报unrecognized selector的异常？</h3><p>简单来说：</p>\n<blockquote>\n<p>当调用该对象上某个方法,而该对象上没有实现这个方法的时候，<br>可以通过“消息转发”进行解决。</p>\n</blockquote>\n<p>简单的流程如下，在上一题中也提到过：</p>\n<blockquote>\n<p>objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。</p>\n</blockquote>\n<p>objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：</p>\n<ol>\n<li><p>Method resolution</p>\n<p>objc运行时会调用<code>+resolveInstanceMethod:</code>或者 <code>+resolveClassMethod:</code>，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。</p>\n</li>\n<li><p>Fast forwarding</p>\n<p>如果目标对象实现了<code>-forwardingTargetForSelector:</code>，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。<br>只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。<br>这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。</p>\n</li>\n<li><p>Normal forwarding</p>\n<p>这一步是Runtime最后一次给你挽救的机会。首先它会发送<code>-methodSignatureForSelector:</code>消息获得函数的参数和返回值类型。如果<code>-methodSignatureForSelector:</code>返回nil，Runtime则会发出<code>-doesNotRecognizeSelector:</code>消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送<code>-forwardInvocation:</code>消息给目标对象。</p>\n</li>\n</ol>\n<p>为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ <code>_objc_msgForward_demo</code> ”,可运行起来看看。</p>\n<h3 id=\"19-一个objc对象如何进行内存布局？（考虑有父类的情况）\"><a href=\"#19-一个objc对象如何进行内存布局？（考虑有父类的情况）\" class=\"headerlink\" title=\"19. 一个objc对象如何进行内存布局？（考虑有父类的情况）\"></a>19. 一个objc对象如何进行内存布局？（考虑有父类的情况）</h3><ul>\n<li>所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中.</li>\n<li>每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的</li>\n</ul>\n<ol>\n<li>对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）</li>\n<li>成员变量的列表,</li>\n<li><p>属性列表,</p>\n<p>它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。</p>\n</li>\n</ol>\n<p>每个 Objective-C 对象都有相同的结构，如下图所示：</p>\n<p> <img src=\"http://i.imgur.com/7mJlUj1.png\" alt=\"enter image description here\"></p>\n<p>翻译过来就是</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Objective-C 对象的结构图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> ISA指针</td>\n<td></td>\n</tr>\n<tr>\n<td> 根类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> 倒数第二层父类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> …</td>\n<td></td>\n</tr>\n<tr>\n<td> 父类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> 类的实例变量</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>根对象就是NSObject，它的superclass指针指向nil</p>\n</li>\n<li><p>类对象既然称为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类(meta class)，即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。</p>\n</li>\n</ul>\n<p>如图:<br><img src=\"http://i.imgur.com/w6tzFxz.png\" alt=\"enter image description here\"></p>\n<h3 id=\"20-一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#20-一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"20. 一个objc对象的isa的指针指向什么？有什么作用？\"></a>20. 一个objc对象的isa的指针指向什么？有什么作用？</h3><p>指向他的类对象,从而可以找到对象上的方法</p>\n<h3 id=\"21-下面的代码输出什么？\"><a href=\"#21-下面的代码输出什么？\" class=\"headerlink\" title=\"21. 下面的代码输出什么？\"></a>21. 下面的代码输出什么？</h3><pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token keyword\">@implementation</span> Son <span class=\"token punctuation\">:</span> Father\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>init\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">@end</span>\n</code></pre>\n<p><strong>答案：</strong></p>\n<p>都输出 Son</p>\n<pre><code>NSStringFromClass([self class]) = Son\nNSStringFromClass([super class]) = Son\n</code></pre><p>这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。</p>\n<p>我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？</p>\n<p>很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n<p>上面的例子不管调用<code>[self class]</code>还是<code>[super class]</code>，接受消息的对象都是当前 <code>Son ＊xxx</code> 这个对象。</p>\n<p>当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p>\n<p>这也就是为什么说“不推荐在 init 方法中使用点语法”，如果想访问实例变量 iVar 应该使用下划线（ <code>_iVar</code> ），而非点语法（ <code>self.iVar</code> ）。</p>\n<p>点语法（ <code>self.iVar</code> ）的坏处就是子类有可能覆写 setter 。假设 Person 有一个子类叫 ChenPerson，这个子类专门表示那些姓“陈”的人。该子类可能会覆写 lastName 属性所对应的设置方法：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  ChenPerson.m</span>\n<span class=\"token comment\" spellcheck=\"true\">//  </span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Created by https://github.com/ChenYilong on 15/8/30.</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"ChenPerson.h\"</span>\n\n<span class=\"token keyword\">@implementation</span> ChenPerson\n\n<span class=\"token keyword\">@synthesize</span> lastName <span class=\"token operator\">=</span> _lastName<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>init\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"🔴类名与方法名：%s（在第%d行），描述：%@\"</span><span class=\"token punctuation\">,</span> __PRETTY_FUNCTION__<span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"🔴类名与方法名：%s（在第%d行），描述：%@\"</span><span class=\"token punctuation\">,</span> __PRETTY_FUNCTION__<span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setLastName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastName\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//设置方法一：如果setter采用是这种方式，就可能引起崩溃</span>\n<span class=\"token comment\" spellcheck=\"true\">//    if (![lastName isEqualToString:@\"陈\"])</span>\n<span class=\"token comment\" spellcheck=\"true\">//    {</span>\n<span class=\"token comment\" spellcheck=\"true\">//        [NSException raise:NSInvalidArgumentException format:@\"姓不是陈\"];</span>\n<span class=\"token comment\" spellcheck=\"true\">//    }</span>\n<span class=\"token comment\" spellcheck=\"true\">//    _lastName = lastName;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//设置方法二：如果setter采用是这种方式，就可能引起崩溃</span>\n    _lastName <span class=\"token operator\">=</span> <span class=\"token string\">@\"陈\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"🔴类名与方法名：%s（在第%d行），描述：%@\"</span><span class=\"token punctuation\">,</span> __PRETTY_FUNCTION__<span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"会调用这个方法,想一下为什么？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>在基类 Person 的默认初始化方法中，可能会将姓氏设为空字符串。此时若使用点语法（ <code>self.lastName</code> ）也即 setter 设置方法，那么调用将会是子类的设置方法，如果在刚刚的 setter 代码中采用设置方法一，那么就会抛出异常，</p>\n<p>为了方便采用打印的方式展示，究竟发生了什么，我们使用设置方法二。</p>\n<p>如果基类的代码是这样的：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Person.m</span>\n<span class=\"token comment\" spellcheck=\"true\">//  nil对象调用点语法</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Created by https://github.com/ChenYilong on 15/8/29.</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.</span>\n<span class=\"token comment\" spellcheck=\"true\">//  </span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"Person.h\"</span>\n\n<span class=\"token keyword\">@implementation</span> Person\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>instancetype<span class=\"token punctuation\">)</span>init\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">@\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));</span>\n        <span class=\"token comment\" spellcheck=\"true\">//NSLog(@\"🔴类名与方法名：%s（在第%d行），描述：%@\", __PRETTY_FUNCTION__, __LINE__, self.lastName);</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>setLastName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastName\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"🔴类名与方法名：%s（在第%d行），描述：%@\"</span><span class=\"token punctuation\">,</span> __PRETTY_FUNCTION__<span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"根本不会调用这个方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _lastName <span class=\"token operator\">=</span> <span class=\"token string\">@\"炎黄\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@end</span>\n</code></pre>\n<p>那么打印结果将会是这样的：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"> 🔴类名与方法名：<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>ChenPerson setLastName<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>（在第<span class=\"token number\">36</span>行），描述：会调用这个方法<span class=\"token punctuation\">,</span>想一下为什么？\n 🔴类名与方法名：<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>ChenPerson init<span class=\"token punctuation\">]</span>（在第<span class=\"token number\">19</span>行），描述：ChenPerson\n 🔴类名与方法名：<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>ChenPerson init<span class=\"token punctuation\">]</span>（在第<span class=\"token number\">20</span>行），描述：ChenPerson\n</code></pre>\n<p>我在仓库里也给出了一个相应的 Demo（名字叫：Demo<em>21题</em>下面的代码输出什么）。有兴趣可以跑起来看一下，主要看下他是怎么打印的，思考下为什么这么打印。</p>\n<p>接下来让我们利用 runtime 的相关知识来验证一下 super 关键字的本质，使用clang重写命令:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    $ clang <span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>objc test<span class=\"token punctuation\">.</span>m\n</code></pre>\n<p>将这道题目中给出的代码被转化为:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0<span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Class</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> SEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>objc_msgSend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sel_registerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NSString <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1<span class=\"token punctuation\">,</span> <span class=\"token function\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Class</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>__rw_objc_super <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> SEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>objc_msgSendSuper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__rw_objc_super<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token function\">class_getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token function\">objc_getClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sel_registerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>从上面的代码中，我们可以发现在调用 [self class] 时，会转化成 <code>objc_msgSend</code>函数。看下函数定义：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    id <span class=\"token function\">objc_msgSend</span><span class=\"token punctuation\">(</span>id <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> SEL op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>我们把 self 做为第一个参数传递进去。</p>\n<p>而在调用 [super class]时，会转化成 <code>objc_msgSendSuper</code>函数。看下函数定义:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\">    id <span class=\"token function\">objc_msgSendSuper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> objc_super <span class=\"token operator\">*</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">,</span> SEL op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>第一个参数是 <code>objc_super</code> 这样一个结构体，其定义如下:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">struct</span> objc_super <span class=\"token punctuation\">{</span>\n       __unsafe_unretained id receiver<span class=\"token punctuation\">;</span>\n       __unsafe_unretained Class super_class<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结构体有两个成员，第一个成员是 receiver, 类似于上面的 <code>objc_msgSend</code>函数第一个参数self 。第二个成员是记录当前类的父类是什么。</p>\n<p>所以，当调用 ［self class] 时，实际先调用的是 <code>objc_msgSend</code>函数，第一个参数是 Son当前的这个实例，然后在 Son 这个类里面去找 - (Class)class这个方法，没有，去父类 Father里找，也没有，最后在 NSObject类中发现这个方法。而 - (Class)class的实现就是返回self的类别，故上述输出结果为 Son。</p>\n<p>objc Runtime开源代码对- (Class)class方法的实现:</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>Class<span class=\"token punctuation\">)</span>class <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">object_getClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>而当调用 <code>[super class]</code>时，会转换成<code>objc_msgSendSuper函数</code>。第一步先构造 <code>objc_super</code> 结构体，结构体第一个成员就是 <code>self</code> 。<br>第二个成员是 <code>(id)class_getSuperclass(objc_getClass(“Son”))</code> , 实际该函数输出结果为 Father。</p>\n<p>第二步是去 Father这个类里去找 <code>- (Class)class</code>，没有，然后去NSObject类去找，找到了。最后内部是使用 <code>objc_msgSend(objc_super-&gt;receiver, @selector(class))</code>去调用，</p>\n<p>此时已经和<code>[self class]</code>调用相同了，故上述输出结果仍然返回 Son。</p>\n<p>参考链接：<a href=\"http://weibo.com/junbbcom\" target=\"_blank\" rel=\"external\">微博@Chun_iOS</a>的博文<a href=\"http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(1\" target=\"_blank\" rel=\"external\">刨根问底Objective－C Runtime（1）－ Self &amp; Super</a>%5Bnil%5D-self-and-super/)</p>\n<h3 id=\"22-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#22-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h3><p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.</p>\n<h3 id=\"23-使用runtime-Associate方法关联的对象，需要在主对象dealloc的时候释放么？\"><a href=\"#23-使用runtime-Associate方法关联的对象，需要在主对象dealloc的时候释放么？\" class=\"headerlink\" title=\"23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\"></a>23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？</h3><ul>\n<li>在ARC下不需要。</li>\n<li><p><del> 在MRC中,对于使用retain或copy策略的需要 。</del></p>在MRC下也不需要</li>\n</ul>\n<blockquote>\n<p>无论在MRC下还是ARC下均不需要。</p>\n</blockquote>\n<p><a href=\"https://web.archive.org/web/20120818164935/http://developer.apple.com/library/ios/#/web/20120820002100/http://developer.apple.com/library/ios/documentation/cocoa/conceptual/objectivec/Chapters/ocAssociativeReferences.html\" target=\"_blank\" rel=\"external\"> <strong><em>2011年版本的Apple API 官方文档 - Associative References</em></strong>  </a> 一节中有一个MRC环境下的例子：</p>\n<pre class=\" language-objectivec\"><code class=\"language-objectivec\"><span class=\"token comment\" spellcheck=\"true\">// 在MRC下，使用runtime Associate方法关联的对象，不需要在主对象dealloc的时候释放</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://github.com/ChenYilong</span>\n<span class=\"token comment\" spellcheck=\"true\">// 摘自2011年版本的Apple API 官方文档 - Associative References </span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> overviewKey<span class=\"token punctuation\">;</span>\n\nNSArray <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSArray alloc<span class=\"token punctuation\">]</span> initWithObjects<span class=\"token punctuation\">:</span><span class=\"token string\">@\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"Three\"</span><span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// For the purposes of illustration, use initWithFormat: to ensure</span>\n<span class=\"token comment\" spellcheck=\"true\">// the string can be deallocated</span>\nNSString <span class=\"token operator\">*</span>overview <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSString alloc<span class=\"token punctuation\">]</span> initWithFormat<span class=\"token punctuation\">:</span><span class=\"token string\">@\"%@\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"First three numbers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">objc_setAssociatedObject</span> <span class=\"token punctuation\">(</span>\n    array<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&amp;</span>overviewKey<span class=\"token punctuation\">,</span>\n    overview<span class=\"token punctuation\">,</span>\n    OBJC_ASSOCIATION_RETAIN\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span>overview release<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// (1) overview valid</span>\n<span class=\"token punctuation\">[</span>array release<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// (2) overview invalid</span>\n</code></pre>\n<p>文档指出 </p>\n<blockquote>\n<p>At point 1, the string <code>overview</code> is still valid because the <code>OBJC_ASSOCIATION_RETAIN</code> policy specifies that the array retains the associated object. When the array is deallocated, however (at point 2), <code>overview</code> is released and so in this case also deallocated.</p>\n</blockquote>\n<p>我们可以看到，在<code>[array release];</code>之后，overview就会被release释放掉了。</p>\n<p>既然会被销毁，那么具体在什么时间点？</p>\n<blockquote>\n<p>根据<a href=\"https://developer.apple.com/videos/wwdc/2011/#322-video\" target=\"_blank\" rel=\"external\"> <strong><em>WWDC 2011, Session 322 (第36分22秒)</em></strong> </a>中发布的内存销毁时间表，被关联的对象在生命周期内要比对象本身释放的晚很多。它们会在被 NSObject -dealloc 调用的 object_dispose() 方法中释放。</p>\n</blockquote>\n<p>对象的内存销毁时间表，分四个步骤：</p>\n<pre><code>// 对象的内存销毁时间表\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 根据 WWDC 2011, Session 322 (36分22秒)中发布的内存销毁时间表 \n\n 1. 调用 -release ：引用计数变为零\n     * 对象正在被销毁，生命周期即将结束.\n     * 不能再有新的 __weak 弱引用， 否则将指向 nil.\n     * 调用 [self dealloc] \n 2. 子类 调用 -dealloc\n     * 继承关系中最底层的子类 在调用 -dealloc\n     * 如果是 MRC 代码 则会手动释放实例变量们（iVars）\n     * 继承关系中每一层的父类 都在调用 -dealloc\n 3. NSObject 调 -dealloc\n     * 只做一件事：调用 Objective-C runtime 中的 object_dispose() 方法\n 4. 调用 object_dispose()\n     * 为 C++ 的实例变量们（iVars）调用 destructors \n     * 为 ARC 状态下的 实例变量们（iVars） 调用 -release \n     * 解除所有使用 runtime Associate方法关联的对象\n     * 解除所有 __weak 引用\n     * 调用 free()\n</code></pre><p>对象的内存销毁时间表：<a href=\"http://stackoverflow.com/a/10843510/3395008\" target=\"_blank\" rel=\"external\">参考链接</a>。</p>\n<h3 id=\"24-objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#24-objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"24. objc中的类方法和实例方法有什么本质区别和联系？\"></a>24. objc中的类方法和实例方法有什么本质区别和联系？</h3><p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名)</li>\n</ol>\n<h2 id=\"下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博-iOS程序犭袁\"><a href=\"#下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博-iOS程序犭袁\" class=\"headerlink\" title=\"下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博@iOS程序犭袁\"></a>下一篇文章将发布在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">这里</a>，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a></h2><p>@property部分主要参考<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW2\" target=\"_blank\" rel=\"external\">Apple官方文档：Properties Encapsulate an Object’s Values</a><br>runtime部分主要参考<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html\" target=\"_blank\" rel=\"external\">Apple官方文档：Declared Properties</a></p>\n<h3 id=\"25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"25. _objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>25. <code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h3><h3 id=\"26-runtime如何实现weak变量的自动置nil？\"><a href=\"#26-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"26. runtime如何实现weak变量的自动置nil？\"></a>26. runtime如何实现weak变量的自动置nil？</h3><h3 id=\"27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h3><h3 id=\"28-runloop和线程有什么关系？\"><a href=\"#28-runloop和线程有什么关系？\" class=\"headerlink\" title=\"28. runloop和线程有什么关系？\"></a>28. runloop和线程有什么关系？</h3><h3 id=\"29-runloop的mode作用是什么？\"><a href=\"#29-runloop的mode作用是什么？\" class=\"headerlink\" title=\"29. runloop的mode作用是什么？\"></a>29. runloop的mode作用是什么？</h3><h3 id=\"30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h3><h3 id=\"31-猜想runloop内部是如何实现的？\"><a href=\"#31-猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"31. 猜想runloop内部是如何实现的？\"></a>31. 猜想runloop内部是如何实现的？</h3><h3 id=\"32-objc使用什么机制管理对象内存？\"><a href=\"#32-objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"32. objc使用什么机制管理对象内存？\"></a>32. objc使用什么机制管理对象内存？</h3><h3 id=\"33-ARC通过什么方式帮助开发者管理内存？\"><a href=\"#33-ARC通过什么方式帮助开发者管理内存？\" class=\"headerlink\" title=\"33. ARC通过什么方式帮助开发者管理内存？\"></a>33. ARC通过什么方式帮助开发者管理内存？</h3><h3 id=\"34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"><a href=\"#34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\" class=\"headerlink\" title=\"34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"></a>34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</h3><h3 id=\"35-BAD-ACCESS在什么情况下出现？\"><a href=\"#35-BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"35. BAD_ACCESS在什么情况下出现？\"></a>35. <code>BAD_ACCESS</code>在什么情况下出现？</h3><h3 id=\"36-苹果是如何实现autoreleasepool的？\"><a href=\"#36-苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"36. 苹果是如何实现autoreleasepool的？\"></a>36. 苹果是如何实现autoreleasepool的？</h3><h3 id=\"37-使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#37-使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"37. 使用block时什么情况会发生引用循环，如何解决？\"></a>37. 使用block时什么情况会发生引用循环，如何解决？</h3><h3 id=\"38-在block内如何修改block外部变量？\"><a href=\"#38-在block内如何修改block外部变量？\" class=\"headerlink\" title=\"38. 在block内如何修改block外部变量？\"></a>38. 在block内如何修改block外部变量？</h3><h3 id=\"39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h3><h3 id=\"40-GCD的队列（dispatch-queue-t）分哪两种类型？\"><a href=\"#40-GCD的队列（dispatch-queue-t）分哪两种类型？\" class=\"headerlink\" title=\"40. GCD的队列（dispatch_queue_t）分哪两种类型？\"></a>40. GCD的队列（<code>dispatch_queue_t</code>）分哪两种类型？</h3><h3 id=\"41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h3><h3 id=\"42-dispatch-barrier-async的作用是什么？\"><a href=\"#42-dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"42. dispatch_barrier_async的作用是什么？\"></a>42. <code>dispatch_barrier_async</code>的作用是什么？</h3><h3 id=\"43-苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#43-苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"43. 苹果为什么要废弃dispatch_get_current_queue？\"></a>43. 苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h3><h3 id=\"44-以下代码运行结果如何？\"><a href=\"#44-以下代码运行结果如何？\" class=\"headerlink\" title=\"44. 以下代码运行结果如何？\"></a>44. 以下代码运行结果如何？</h3><pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@&quot;1&quot;);\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@&quot;2&quot;);\n    });\n    NSLog(@&quot;3&quot;);\n}\n</code></pre><h3 id=\"45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h3><h3 id=\"46-如何手动触发一个value的KVO\"><a href=\"#46-如何手动触发一个value的KVO\" class=\"headerlink\" title=\"46. 如何手动触发一个value的KVO\"></a>46. 如何手动触发一个value的KVO</h3><h3 id=\"47-若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\"><a href=\"#47-若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\" class=\"headerlink\" title=\"47. 若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\"></a>47. 若一个类有实例变量<code>NSString *_foo</code>，调用setValue:forKey:时，可以以foo还是<code>_foo</code>作为key？</h3><h3 id=\"48-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#48-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"48. KVC的keyPath中的集合运算符如何使用？\"></a>48. KVC的keyPath中的集合运算符如何使用？</h3><h3 id=\"49-KVC和KVO的keyPath一定是属性么？\"><a href=\"#49-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"49. KVC和KVO的keyPath一定是属性么？\"></a>49. KVC和KVO的keyPath一定是属性么？</h3><h3 id=\"50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h3><h3 id=\"51-apple用什么方式实现对一个对象的KVO？\"><a href=\"#51-apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"51. apple用什么方式实现对一个对象的KVO？\"></a>51. apple用什么方式实现对一个对象的KVO？</h3><h3 id=\"52-IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#52-IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"52. IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>52. IBOutlet连出来的视图属性为什么可以被设置成weak?</h3><h3 id=\"53-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#53-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"53. IB中User Defined Runtime Attributes如何使用？\"></a>53. IB中User Defined Runtime Attributes如何使用？</h3><h3 id=\"54-如何调试BAD-ACCESS错误\"><a href=\"#54-如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"54. 如何调试BAD_ACCESS错误\"></a>54. 如何调试<code>BAD_ACCESS</code>错误</h3><h3 id=\"55-lldb（gdb）常用的调试命令？\"><a href=\"#55-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"55. lldb（gdb）常用的调试命令？\"></a>55. lldb（gdb）常用的调试命令？</h3><hr>\n<p>Posted by <a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\" rel=\"external\">Creative Commons BY-NC-ND 3.0</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>—参考答案（上）</p>\n<p>说明：面试题来源是<a href=\"http://weibo.com/u/1364395395\" target=\"_blank\" rel=\"external\">微博@我就叫Sunny怎么了</a>的这篇博文：<a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"external\">《招聘一个靠谱的 iOS》</a>，其中共55题，除第一题为纠错题外，其他54道均为简答题。</p>\n<p>作者简介： 孙源（sunnyxx），目前就职于百度，负责百度知道 iOS 客户端的开发工作，对技术喜欢刨根问底和总结最佳实践，热爱分享和开源，维护一个叫 forkingdog 的开源小组。</p>\n<p>答案为<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>整理，未经出题者校对，如有纰漏，请向<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a>指正。</p>\n<hr>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ol>\n<li><p><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-风格纠错题\" target=\"_blank\" rel=\"external\">风格纠错题</a> </p>\n<ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#优化部分\" target=\"_blank\" rel=\"external\">优化部分</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#硬伤部分\" target=\"_blank\" rel=\"external\">硬伤部分</a> </li>\n</ol>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2-什么情况使用-weak-关键字相比-assign-有什么不同\" target=\"_blank\" rel=\"external\">什么情况使用 weak 关键字，相比 assign 有什么不同？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#3-怎么用-copy-关键字\" target=\"_blank\" rel=\"external\">怎么用 copy 关键字？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#4-这个写法会出什么问题-property-copy-nsmutablearray-array\" target=\"_blank\" rel=\"external\">这个写法会出什么问题： @property (copy) NSMutableArray *array;</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#5-如何让自己的类用-copy-修饰符如何重写带-copy-关键字的-setter\" target=\"_blank\" rel=\"external\"> 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#6-property-的本质是什么ivargettersetter-是如何生成并添加到这个类中的\" target=\"_blank\" rel=\"external\">@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#7-protocol-和-category-中如何使用-property\" target=\"_blank\" rel=\"external\">@protocol 和 category 中如何使用 @property</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#8-runtime-如何实现-weak-属性\" target=\"_blank\" rel=\"external\"> runtime 如何实现 weak 属性</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#9-property中有哪些属性关键字-property-后面可以有哪些修饰符\" target=\"_blank\" rel=\"external\">@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#10-weak属性需要在dealloc中置nil么\" target=\"_blank\" rel=\"external\"> weak属性需要在dealloc中置nil么？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#11-synthesize和dynamic分别有什么作用\" target=\"_blank\" rel=\"external\">@synthesize和@dynamic分别有什么作用？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#12-arc下不显式指定任何属性关键字时默认的关键字都有哪些\" target=\"_blank\" rel=\"external\">ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#13-用property声明的nsstring或nsarraynsdictionary经常使用copy关键字为什么如果改用strong关键字可能造成什么问题\" target=\"_blank\" rel=\"external\">用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</a> <ol>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#1-对非集合类对象的copy操作\" target=\"_blank\" rel=\"external\">对非集合类对象的copy操作</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#2集合类对象的copy与mutablecopy\" target=\"_blank\" rel=\"external\">集合类对象的copy与mutableCopy</a> </li>\n</ol>\n</li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#14-synthesize合成实例变量的规则是什么假如property名为foo存在一个名为_foo的实例变量那么还会自动合成新变量么\" target=\"_blank\" rel=\"external\">@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#15-在有了自动合成属性实例变量之后synthesize还有哪些使用场景\" target=\"_blank\" rel=\"external\">在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#16-objc中向一个nil对象发送消息将会发生什么\" target=\"_blank\" rel=\"external\">objc中向一个nil对象发送消息将会发生什么？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#17-objc中向一个对象发送消息obj-foo和objc_msgsend函数之间有什么关系\" target=\"_blank\" rel=\"external\">objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#18-什么时候会报unrecognized-selector的异常\" target=\"_blank\" rel=\"external\">什么时候会报unrecognized selector的异常？</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#19-一个objc对象如何进行内存布局考虑有父类的情况\" target=\"_blank\" rel=\"external\">一个objc对象如何进行内存布局？（考虑有父类的情况）</a> </li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#20-一个objc对象的isa的指针指向什么有什么作用\" target=\"_blank\" rel=\"external\">一个objc对象的isa的指针指向什么？有什么作用？</a></li>\n<li><a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01《招聘一个靠谱的iOS》面试题参考答案/《招聘一个靠谱的iOS》面试题参考答案（上）.md#21-下面的代码输出什么\" target=\"_blank\" rel=\"external\">下面的代码输出什么？</a> </li>\n</ol>\n<pre><code class=\"objectivec\">    @implementation Son : Father\n    - (id)init\n    {\n        self = [super init];\n        if (self) {\n            NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));\n            NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));\n        }\n        return self;\n    }\n    @end\n</code></pre>\n<ol>\n<li>22–55题，请看下篇。</li>\n</ol>\n<h3 id=\"1-风格纠错题\"><a href=\"#1-风格纠错题\" class=\"headerlink\" title=\"1. 风格纠错题\"></a>1. 风格纠错题</h3><p><img src=\"http://i.imgur.com/O7Zev94.png\" alt=\"enter image description here\"><br>修改完的代码：</p>\n<p>修改方法有很多种，现给出一种做示例：</p>\n<pre><code class=\"objectivec\">// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject&lt;NSCopying&gt;\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n@end\n</code></pre>\n<p>下面对具体修改的地方，分两部分做下介绍：<strong>硬伤部分</strong> 和 <strong>优化部分</strong><br>。因为<strong>硬伤部分</strong>没什么技术含量，为了节省大家时间，放在后面讲，大神请直接看<strong>优化部分</strong>。</p>\n<h4 id=\"优化部分\"><a href=\"#优化部分\" class=\"headerlink\" title=\"优化部分\"></a><strong>优化部分</strong></h4><ol>\n<li>enum 建议使用 <code>NS_ENUM</code> 和 <code>NS_OPTIONS</code> 宏来定义枚举类型，参见官方的 <a href=\"https://developer.apple.com/library/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html\" target=\"_blank\" rel=\"external\">Adopting Modern Objective-C</a> 一文：</li>\n</ol>\n<pre><code class=\"objectivec\">//定义一个枚举\n    typedef NS_ENUM(NSInteger, CYLSex) {\n        CYLSexMan,\n        CYLSexWoman\n    };\n</code></pre>\n<p> （仅仅让性别包含男和女可能并不严谨，最严谨的做法可以参考 <a href=\"https://github.com/ChenYilong/iOSInterviewQuestions/issues/9\" target=\"_blank\" rel=\"external\">这里</a> 。）</p>\n<ol>\n<li><p>age 属性的类型：应避免使用基本类型，建议使用 Foundation 数据类型，对应关系如下：</p>\n<pre><code class=\"objectivec\">int -&gt; NSInteger\nunsigned -&gt; NSUInteger\nfloat -&gt; CGFloat\n动画时间 -&gt; NSTimeInterval\n</code></pre>\n<p>同时考虑到 age 的特点，应使用 NSUInteger ，而非 int 。<br>这样做的是基于64-bit 适配考虑，详情可参考出题者的博文<a href=\"http://blog.sunnyxx.com/2014/12/20/64-bit-tips/\" target=\"_blank\" rel=\"external\">《64-bit Tips》</a>。</p>\n</li>\n</ol>\n<ol>\n<li>如果工程项目非常庞大，需要拆分成不同的模块，可以在类、typedef宏命名的时候使用前缀。</li>\n<li>doLogIn方法不应写在该类中： <p><del>虽然<code>LogIn</code>的命名不太清晰，但笔者猜测是login的意思， （勘误：Login是名词，LogIn 是动词，都表示登陆的意思。见： <a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</del></p>登录操作属于业务逻辑，观察类名 UserModel ，以及属性的命名方式，该类应该是一个 Model 而不是一个“ MVVM 模式下的 ViewModel ”：</li>\n</ol>\n<blockquote>\n<p>无论是 MVC 模式还是 MVVM 模式，业务逻辑都不应当写在 Model 里：MVC 应在 C，MVVM 应在 VM。</p>\n</blockquote>\n<p> （如果抛开命名规范，假设该类真的是 MVVM 模式里的 ViewModel ，那么 UserModel 这个类可能对应的是用户注册页面，如果有特殊的业务需求，比如： <code>-logIn</code> 对应的应当是注册并登录的一个 Button ，出现 <code>-logIn</code> 方法也可能是合理的。）</p>\n<ol>\n<li><p>doLogIn 方法命名不规范：添加了多余的动词前缀。<br>请牢记：</p>\n<blockquote>\n<p>如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用 <code>do</code>，<code>does</code> 这种多余的关键字，动词本身的暗示就足够了。</p>\n</blockquote>\n<p>应为 <code>-logIn</code> （注意： <code>Login</code> 是名词， <code>LogIn</code>  是动词，都表示登陆。  见<a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</p>\n</li>\n<li><p><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code>方法中不要用 <code>with</code> 来连接两个参数: <code>withAge:</code> 应当换为<code>age:</code>，<code>age:</code> 已经足以清晰说明参数的作用，也不建议用 <code>andAge:</code> ：通常情况下，即使有类似 <code>withA:withB:</code> 的命名需求，也通常是使用<code>withA:andB:</code> 这种命名，用来表示方法执行了两个相对独立的操作（<em>从设计上来说，这时候也可以拆分成两个独立的方法</em>），它不应该用作阐明有多个参数，比如下面的：</p>\n<pre><code class=\"objectivec\">//错误，不要使用&quot;and&quot;来连接参数\n- (int)runModalForDirectory:(NSString *)path andFile:(NSString *)name andTypes:(NSArray *)fileTypes;\n//错误，不要使用&quot;and&quot;来阐明有多个参数\n- (instancetype)initWithName:(CGFloat)width andAge:(CGFloat)height;\n//正确，使用&quot;and&quot;来表示两个相对独立的操作\n- (BOOL)openFile:(NSString *)fullPath withApplication:(NSString *)appName andDeactivate:(BOOL)flag;\n</code></pre>\n</li>\n<li><p>由于字符串值可能会改变，所以要把相关属性的“内存管理语义”声明为 copy 。(原因在下文有详细论述：<strong><em>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？</em></strong>)</p>\n</li>\n<li><p>“性别”(sex）属性的：该类中只给出了一种“初始化方法” (initializer)用于设置“姓名”(Name)和“年龄”(Age)的初始值，那如何对“性别”(Sex）初始化？</p>\n<p>Objective-C 有 designated 和 secondary 初始化方法的观念。 designated 初始化方法是提供所有的参数，secondary 初始化方法是一个或多个，并且提供一个或者更多的默认参数来调用 designated 初始化方法的初始化方法。举例说明：</p>\n</li>\n</ol>\n<pre><code class=\"objectivec\">\n    // .m文件\n    // http://weibo.com/luohanchenyilong/\n    // https://github.com/ChenYilong\n    //\n\n    @implementation CYLUser\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age\n                             sex:(CYLSex)sex {\n        if(self = [super init]) {\n            _name = [name copy];\n            _age = age;\n            _sex = sex;\n        }\n        return self;\n    }\n\n    - (instancetype)initWithName:(NSString *)name\n                             age:(NSUInteger)age {\n        return [self initWithName:name age:age sex:nil];\n    }\n\n    @end\n</code></pre>\n<p> 上面的代码中initWithName:age:sex: 就是 designated 初始化方法，另外的是 secondary 初始化方法。因为仅仅是调用类实现的 designated 初始化方法。</p>\n<p>  因为出题者没有给出 <code>.m</code> 文件，所以有两种猜测：1：本来打算只设计一个 designated 初始化方法，但漏掉了“性别”(sex）属性。那么最终的修改代码就是上文给出的第一种修改方法。2：不打算初始时初始化“性别”(sex）属性，打算后期再修改，如果是这种情况，那么应该把“性别”(sex）属性设为 readwrite 属性，最终给出的修改代码应该是：</p>\n<pre><code class=\"objectivec\">\n\n    // .h文件\n    // http://weibo.com/luohanchenyilong/\n    // https://github.com/ChenYilong\n    // 第二种修改方法（基于第一种修改方法的基础上）\n\n    typedef NS_ENUM(NSInteger, CYLSex) {\n        CYLSexMan,\n        CYLSexWoman\n    };\n\n    @interface CYLUser : NSObject&lt;NSCopying&gt;\n\n    @property (nonatomic, readonly, copy) NSString *name;\n    @property (nonatomic, readonly, assign) NSUInteger age;\n    @property (nonatomic, readwrite, assign) CYLSex sex;\n\n    - (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n    - (instancetype)initWithName:(NSString *)name age:(NSUInteger)age;\n    + (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n    @end\n</code></pre>\n<p>  <code>.h</code> 中暴露 designated 初始化方法，是为了方便子类化 （想了解更多，请戳–》 <a href=\"http://is.gd/OQ49zk\" target=\"_blank\" rel=\"external\"><strong><em>《禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）》</em></strong></a>。）</p>\n<ul>\n<li>按照接口设计的惯例，如果设计了“初始化方法” (initializer)，也应当搭配一个快捷构造方法。而快捷构造方法的返回值，建议为 instancetype，为保持一致性，init 方法和快捷构造方法的返回类型最好都用 instancetype。</li>\n<li>如果基于第一种修改方法：既然该类中已经有一个“初始化方法” (initializer)，用于设置“姓名”(Name)、“年龄”(Age)和“性别”(Sex）的初始值:<br>那么在设计对应 <code>@property</code> 时就应该尽量使用不可变的对象：其三个属性都应该设为“只读”。用初始化方法设置好属性值之后，就不能再改变了。在本例中，仍需声明属性的“内存管理语义”。于是可以把属性的定义改成这样</li>\n</ul>\n<pre><code class=\"objectivec\">        @property (nonatomic, readonly, copy) NSString *name;\n        @property (nonatomic, readonly, assign) NSUInteger age;\n        @property (nonatomic, readonly, assign) CYLSex sex;\n</code></pre>\n<pre><code>  由于是只读属性，所以编译器不会为其创建对应的“设置方法”，即便如此，我们还是要写上这些属性的语义，以此表明初始化方法在设置这些属性值时所用的方式。要是不写明语义的话，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而且低效。\n</code></pre><ol>\n<li><code>initUserModelWithUserName</code> 如果改为 <code>initWithName</code> 会更加简洁，而且足够清晰。</li>\n<li><code>UserModel</code> 如果改为 <code>User</code> 会更加简洁，而且足够清晰。</li>\n<li><code>UserSex</code>如果改为<code>Sex</code> 会更加简洁，而且足够清晰。</li>\n<li><p>第二个 <code>@property</code> 中 assign 和 nonatomic 调换位置。<br>推荐按照下面的格式来定义属性</p>\n<pre><code class=\"objectivec\">@property (nonatomic, readwrite, copy) NSString *name;\n</code></pre>\n<p>属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理。 这样做你的属性更容易修改正确，并且更好阅读。这在<a href=\"https://github.com/oa414/objc-zen-book-cn#属性定义\" target=\"_blank\" rel=\"external\">《禅与Objective-C编程艺术 &gt;》</a>里有介绍。而且习惯上修改某个属性的修饰符时，一般从属性名从右向左搜索需要修动的修饰符。最可能从最右边开始修改这些属性的修饰符，根据经验这些修饰符被修改的可能性从高到底应为：内存管理 &gt; 读写权限 &gt;原子操作。</p>\n</li>\n</ol>\n<h4 id=\"硬伤部分\"><a href=\"#硬伤部分\" class=\"headerlink\" title=\"硬伤部分\"></a><strong><em>硬伤部分</em></strong></h4><ol>\n<li>在-和(void)之间应该有一个空格</li>\n<li>enum 中驼峰命名法和下划线命名法混用错误：枚举类型的命名规则和函数的命名规则相同：命名时使用驼峰命名法，勿使用下划线命名法。</li>\n<li>enum 左括号前加一个空格，或者将左括号换到下一行</li>\n<li>enum 右括号后加一个空格</li>\n<li><code>UserModel :NSObject</code> 应为<code>UserModel : NSObject</code>，也就是<code>:</code>右侧少了一个空格。</li>\n<li><code>@interface</code> 与 <code>@property</code> 属性声明中间应当间隔一行。</li>\n<li>两个方法定义之间不需要换行，有时为了区分方法的功能也可间隔一行，但示例代码中间隔了两行。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中方法名与参数之间多了空格。而且 <code>-</code> 与 <code>(id)</code> 之间少了空格。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中方法名与参数之间多了空格：<code>(NSString*)name</code> 前多了空格。</li>\n<li><code>-(id)initUserModelWithUserName: (NSString*)name withAge:(int)age;</code> 方法中 <code>(NSString*)name</code>,应为 <code>(NSString *)name</code>，少了空格。 </li>\n<li><p><del>doLogIn方法中的 <code>LogIn</code> 命名不清晰：笔者猜测是login的意思，应该是粗心手误造成的。<br>（勘误： <code>Login</code> 是名词， <code>LogIn</code>  是动词，都表示登陆的意思。见： <a href=\"http://grammarist.com/spelling/log-in-login/\" target=\"_blank\" rel=\"external\"> <strong><em>Log in vs. login</em></strong> </a>）</del></p>\n\n</li>\n</ol>\n<h3 id=\"2-什么情况使用-weak-关键字，相比-assign-有什么不同？\"><a href=\"#2-什么情况使用-weak-关键字，相比-assign-有什么不同？\" class=\"headerlink\" title=\"2. 什么情况使用 weak 关键字，相比 assign 有什么不同？\"></a>2. 什么情况使用 weak 关键字，相比 assign 有什么不同？</h3><p>什么情况使用 weak 关键字？</p>\n<ol>\n<li><p>在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性</p>\n</li>\n<li><p>自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：<strong><em>《IBOutlet连出来的视图属性为什么可以被设置成weak?》</em></strong></p>\n</li>\n</ol>\n<p>不同点：</p>\n<ol>\n<li><p><code>weak</code> 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似，<br>然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。<br>而 <code>assign</code> 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或<br>NSlnteger 等)的简单赋值操作。</p>\n</li>\n<li><p>assign 可以用非 OC 对象,而 weak 必须用于 OC 对象</p>\n</li>\n</ol>\n<h3 id=\"3-怎么用-copy-关键字？\"><a href=\"#3-怎么用-copy-关键字？\" class=\"headerlink\" title=\"3. 怎么用 copy 关键字？\"></a>3. 怎么用 copy 关键字？</h3><p>用途：</p>\n<ol>\n<li>NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；</li>\n<li><p>block 也经常使用 copy 关键字，具体原因见<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12\" target=\"_blank\" rel=\"external\">官方文档：<strong><em>Objects Use Properties to Keep Track of Blocks</em></strong></a>：</p>\n<p>block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.在 ARC 中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但写上 copy 也无伤大雅，还能时刻提醒我们：编译器自动对 block 进行了 copy 操作。如果不写 copy ，该类的调用者有可能会忘记或者根本不知道“编译器会自动对 block 进行了 copy 操作”，他们有可能会在调用之前自行拷贝属性值。这种操作多余而低效。你也许会感觉我这种做法有些怪异，不需要写依然写。如果你这样想，其实是你“日用而不知”，你平时开发中是经常在用我说的这种做法的，比如下面的属性不写copy也行，但是你会选择写还是不写呢？</p>\n</li>\n</ol>\n<pre><code class=\"objectivec\"> @property (nonatomic, copy) NSString *userId;\n\n - (instancetype)initWithUserId:(NSString *)userId {\n    self = [super init];\n    if (!self) {\n        return nil;\n    }\n    _userId = [userId copy];\n    return self;\n }\n</code></pre>\n<p> <img src=\"http://i.imgur.com/VlVKl8L.png\" alt=\"enter image description here\"></p>\n<p>下面做下解释：<br> copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。<br>当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。</p>\n<blockquote>\n<p>用 <code>@property</code> 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。</p>\n</blockquote>\n<p>该问题在下文中也有论述：<strong><em>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</em></strong></p>\n<h3 id=\"4-这个写法会出什么问题：-property-copy-NSMutableArray-array\"><a href=\"#4-这个写法会出什么问题：-property-copy-NSMutableArray-array\" class=\"headerlink\" title=\"4. 这个写法会出什么问题： @property (copy) NSMutableArray *array;\"></a>4. 这个写法会出什么问题： <code>@property (copy) NSMutableArray *array;</code></h3><p>两个问题：1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；2、使用了 atomic 属性会严重影响性能 ； </p>\n<p>第1条的相关原因在下文中有论述<strong><em>《用@property声明的NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？》</em></strong> 以及上文<strong><em>《怎么用 copy 关键字？》</em></strong>也有论述。</p>\n<p>比如下面的代码就会发生崩溃</p>\n<pre><code class=\"objectivec\">// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\n@property (nonatomic, copy) NSMutableArray *mutableArray;\n</code></pre>\n<pre><code class=\"objectivec\">// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 下面的代码就会发生崩溃\n\nNSMutableArray *array = [NSMutableArray arrayWithObjects:@1,@2,nil];\nself.mutableArray = array;\n[self.mutableArray removeObjectAtIndex:0];\n</code></pre>\n<p>接下来就会奔溃：</p>\n<pre><code class=\"objectivec\"> -[__NSArrayI removeObjectAtIndex:]: unrecognized selector sent to instance 0x7fcd1bc30460\n</code></pre>\n<p>第2条原因，如下：</p>\n<blockquote>\n<p>该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明 nonatomic 可以节省这些虽然很小但是不必要额外开销。</p>\n</blockquote>\n<p>在默认情况下，由编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的”(atomic))。</p>\n<p>在iOS开发中，你会发现，几乎所有属性都声明为 nonatomic。</p>\n<p>一般情况下并不要求属性必须是“原子的”，因为这并不能保证“线程安全” ( thread safety)，若要实现“线程安全”的操作，还需采用更为深层的锁定机制才行。例如，一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为 atomic，也还是会读到不同的属性值。</p>\n<p>因此，开发iOS程序时一般都会使用 nonatomic 属性。但是在开发 Mac OS X 程序时，使用<br> atomic 属性通常都不会有性能瓶颈。</p>\n<h3 id=\"5-如何让自己的类用-copy-修饰符？如何重写带-copy-关键字的-setter？\"><a href=\"#5-如何让自己的类用-copy-修饰符？如何重写带-copy-关键字的-setter？\" class=\"headerlink\" title=\"5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\"></a>5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</h3><blockquote>\n<p>若想令自己所写的对象具有拷贝功能，则需实现 NSCopying 协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 <code>NSCopying</code> 与 <code>NSMutableCopying</code> 协议。</p>\n</blockquote>\n<p>具体步骤：</p>\n<ol>\n<li>需声明该类遵从 NSCopying 协议</li>\n<li><p>实现 NSCopying 协议。该协议只有一个方法: </p>\n<pre><code class=\"objectivec\">- (id)copyWithZone:(NSZone *)zone;\n</code></pre>\n<p>注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是 “copyWithZone” 方法。</p>\n</li>\n</ol>\n<p>以第一题的代码为例：</p>\n<pre><code class=\"objectivec\">    // .h文件\n    // http://weibo.com/luohanchenyilong/\n    // https://github.com/ChenYilong\n    // 修改完的代码\n\n    typedef NS_ENUM(NSInteger, CYLSex) {\n        CYLSexMan,\n        CYLSexWoman\n    };\n\n    @interface CYLUser : NSObject&lt;NSCopying&gt;\n\n    @property (nonatomic, readonly, copy) NSString *name;\n    @property (nonatomic, readonly, assign) NSUInteger age;\n    @property (nonatomic, readonly, assign) CYLSex sex;\n\n    - (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n    + (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n\n    @end\n</code></pre>\n<p>然后实现协议中规定的方法：</p>\n<pre><code class=\"objectivec\">- (id)copyWithZone:(NSZone *)zone {\n    CYLUser *copy = [[[self class] allocWithZone:zone] \n                     initWithName:_name\n                                   age:_age\n                                  sex:_sex];\n    return copy;\n}\n</code></pre>\n<p>但在实际的项目中，不可能这么简单，遇到更复杂一点，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。举个例子，假如 CYLUser 中含有一个数组，与其他 CYLUser 对象建立或解除朋友关系的那些方法都需要操作这个数组。那么在这种情况下，你得把这个包含朋友对象的数组也一并拷贝过来。下面列出了实现此功能所需的全部代码:</p>\n<pre><code class=\"objectivec\">// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 以第一题《风格纠错题》里的代码为例\n\ntypedef NS_ENUM(NSInteger, CYLSex) {\n    CYLSexMan,\n    CYLSexWoman\n};\n\n@interface CYLUser : NSObject&lt;NSCopying&gt;\n\n@property (nonatomic, readonly, copy) NSString *name;\n@property (nonatomic, readonly, assign) NSUInteger age;\n@property (nonatomic, readonly, assign) CYLSex sex;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n+ (instancetype)userWithName:(NSString *)name age:(NSUInteger)age sex:(CYLSex)sex;\n- (void)addFriend:(CYLUser *)user;\n- (void)removeFriend:(CYLUser *)user;\n\n@end\n</code></pre>\n<p>// .m文件</p>\n<pre><code class=\"objectivec\">// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n//\n\n@implementation CYLUser {\n    NSMutableSet *_friends;\n}\n\n- (void)setName:(NSString *)name {\n    _name = [name copy];\n}\n\n- (instancetype)initWithName:(NSString *)name\n                         age:(NSUInteger)age\n                         sex:(CYLSex)sex {\n    if(self = [super init]) {\n        _name = [name copy];\n        _age = age;\n        _sex = sex;\n        _friends = [[NSMutableSet alloc] init];\n    }\n    return self;\n}\n\n- (void)addFriend:(CYLUser *)user {\n    [_friends addObject:user];\n}\n\n- (void)removeFriend:(CYLUser *)user {\n    [_friends removeObject:user];\n}\n\n- (id)copyWithZone:(NSZone *)zone {\n    CYLUser *copy = [[[self class] allocWithZone:zone]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy-&gt;_friends = [_friends mutableCopy];\n    return copy;\n}\n\n- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy-&gt;_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n\n@end\n</code></pre>\n<p>以上做法能满足基本的需求，但是也有缺陷：</p>\n<blockquote>\n<p>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</p>\n</blockquote>\n<p>【注：深浅拷贝的概念，在下文中有介绍，详见下文的：<strong><em>用@property声明的 NSString（或NSArray，NSDictionary）经常使用 copy 关键字，为什么？如果改用 strong 关键字，可能造成什么问题？</em></strong>】</p>\n<p>在例子中，存放朋友对象的 set 是用 “copyWithZone:” 方法来拷贝的，这种浅拷贝方式不会逐个复制 set 中的元素。若需要深拷贝的话，则可像下面这样，编写一个专供深拷贝所用的方法:</p>\n<pre><code class=\"objectivec\">- (id)deepCopy {\n    CYLUser *copy = [[[self class] alloc]\n                     initWithName:_name\n                     age:_age\n                     sex:_sex];\n    copy-&gt;_friends = [[NSMutableSet alloc] initWithSet:_friends\n                                             copyItems:YES];\n    return copy;\n}\n</code></pre>\n<p>至于<strong><em>如何重写带 copy 关键字的 setter</em></strong>这个问题，</p>\n<p>如果抛开本例来回答的话，如下：</p>\n<pre><code class=\"objectivec\">- (void)setName:(NSString *)name {\n    //[_name release];\n    _name = [name copy];\n}\n</code></pre>\n<p>不过也有争议，有人说“苹果如果像下面这样干，是不是效率会高一些？”</p>\n<pre><code class=\"objectivec\">- (void)setName:(NSString *)name {\n    if (_name != name) {\n        //[_name release];//MRC\n        _name = [name copy];\n    }\n}\n</code></pre>\n<p>这样真得高效吗？不见得！这种写法“看上去很美、很合理”，但在实际开发中，它更像下图里的做法：</p>\n<p><img src=\"http://i.imgur.com/UwV9oSn.jpeg\" alt=\"enter image description here\"></p>\n<p>克强总理这样评价你的代码风格：</p>\n<p><img src=\"http://i.imgur.com/N77Lkic.png\" alt=\"enter image description here\"></p>\n<p>我和总理的意见基本一致：</p>\n<blockquote>\n<p>老百姓 copy 一下，咋就这么难？</p>\n</blockquote>\n<p>你可能会说：</p>\n<p>之所以在这里做<code>if判断</code> 这个操作：是因为一个 if 可能避免一个耗时的copy，还是很划算的。<br>(在刚刚讲的：《如何让自己的类用 copy 修饰符？》里的那种复杂的copy，我们可以称之为 “耗时的copy”，但是对 NSString 的 copy 还称不上。)</p>\n<p>但是你有没有考虑过代价：</p>\n<blockquote>\n<p>你每次调用 <code>setX:</code> 都会做 if 判断，这会让 <code>setX:</code> 变慢，如果你在 <code>setX:</code>写了一串复杂的 <code>if+elseif+elseif+...</code> 判断，将会更慢。</p>\n</blockquote>\n<p>要回答“哪个效率会高一些？”这个问题，不能脱离实际开发，就算 copy 操作十分耗时，if 判断也不见得一定会更快，除非你把一个“ @property他当前的值 ”赋给了他自己，代码看起来就像：</p>\n<pre><code class=\"objectivec\">[a setX:x1];\n[a setX:x1];    //你确定你要这么干？与其在setter中判断，为什么不把代码写好？\n</code></pre>\n<p>或者</p>\n<pre><code class=\"objectivec\">[a setX:[a x]];   //队友咆哮道：你在干嘛？！！\n</code></pre>\n<blockquote>\n<p>不要在 setter 里进行像 <code>if(_obj != newObj)</code> 这样的判断。（该观点参考链接：<a href=\"http://vgable.com/blog/tag/autorelease/\" target=\"_blank\" rel=\"external\"> <strong><em>How To Write Cocoa Object Setters： Principle 3: Only Optimize After You Measure</em></strong> </a><br>）</p>\n</blockquote>\n<p>什么情况会在 copy setter 里做 if 判断？<br>例如，车速可能就有最高速的限制，车速也不可能出现负值，如果车子的最高速为300，则 setter 的方法就要改写成这样：</p>\n<pre><code class=\"objectivec\">-(void)setSpeed:(int)_speed{\n    if(_speed &lt; 0) speed = 0;\n    if(_speed &gt; 300) speed = 300;\n    _speed = speed;\n}\n</code></pre>\n<p>回到这个题目，如果单单就上文的代码而言，我们不需要也不能重写 name 的 setter ：由于是 name 是只读属性，所以编译器不会为其创建对应的“设置方法”，用初始化方法设置好属性值之后，就不能再改变了。（ 在本例中，之所以还要声明属性的“内存管理语义”–copy，是因为：如果不写 copy，该类的调用者就不知道初始化方法里会拷贝这些属性，他们有可能会在调用初始化方法之前自行拷贝属性值。这种操作多余而低效）。</p>\n<p>那如何确保 name 被 copy？在初始化方法(initializer)中做：</p>\n<pre><code class=\"objectivec\">    - (instancetype)initWithName:(NSString *)name \n                                 age:(NSUInteger)age \n                                 sex:(CYLSex)sex {\n         if(self = [super init]) {\n             _name = [name copy];\n             _age = age;\n             _sex = sex;\n             _friends = [[NSMutableSet alloc] init];\n         }\n         return self;\n    }\n</code></pre>\n<h3 id=\"6-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\"><a href=\"#6-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\" class=\"headerlink\" title=\"6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\"></a>6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</h3><p><strong>@property 的本质是什么？</strong></p>\n<blockquote>\n<p>@property = ivar + getter + setter;</p>\n</blockquote>\n<p>下面解释下：</p>\n<blockquote>\n<p>“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。</p>\n</blockquote>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 <code>Objective-C 2.0</code> 的一部分。<br>而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。<br>正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:</p>\n<blockquote>\n<p>编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。<br>所以你也可以这么说：</p>\n<p>@property = getter + setter;</p>\n</blockquote>\n<p>例如下面这个类：</p>\n<pre><code class=\"objectivec\">@interface Person : NSObject\n@property NSString *firstName;\n@property NSString *lastName;\n@end\n</code></pre>\n<p>上述代码写出来的类与下面这种写法等效：</p>\n<pre><code class=\"objectivec\">@interface Person : NSObject\n- (NSString *)firstName;\n- (void)setFirstName:(NSString *)firstName;\n- (NSString *)lastName;\n- (void)setLastName:(NSString *)lastName;\n@end\n</code></pre>\n<p><strong>更新</strong>：</p>\n<p>property在runtime中是<code>objc_property_t</code>定义如下:</p>\n<pre><code class=\"objectivec\">typedef struct objc_property *objc_property_t;\n</code></pre>\n<p>而<code>objc_property</code>是一个结构体，包括name和attributes，定义如下：</p>\n<pre><code class=\"objectivec\">struct property_t {\n    const char *name;\n    const char *attributes;\n};\n</code></pre>\n<p>而attributes本质是<code>objc_property_attribute_t</code>，定义了property的一些属性，定义如下：</p>\n<pre><code class=\"objectivec\">/// Defines a property attribute\ntypedef struct {\n    const char *name;           /**&lt; The name of the attribute */\n    const char *value;          /**&lt; The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n</code></pre>\n<p>而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。</p>\n<p>例如：我们定义一个string的property<code>@property (nonatomic, copy) NSString *string;</code>，通过 <code>property_getAttributes(property)</code>获取到attributes并打印出来之后的结果为<code>T@&quot;NSString&quot;,C,N,V_string</code></p>\n<p>其中T就代表类型，可参阅<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\" target=\"_blank\" rel=\"external\">Type Encodings</a>，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。</p>\n<p><strong>ivar、getter、setter 是如何生成并添加到这个类中的?</strong></p>\n<blockquote>\n<p>“自动合成”( autosynthesis)</p>\n</blockquote>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译<br>器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为<br> <code>_firstName</code> 与 <code>_lastName</code>。也可以在类的实现代码里通过<br> <code>@synthesize</code> 语法来指定实例变量的名字.</p>\n<pre><code class=\"objectivec\">@implementation Person\n@synthesize firstName = _myFirstName;\n@synthesize lastName = _myLastName;\n@end\n</code></pre>\n<p>我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西</p>\n<ol>\n<li><code>OBJC_IVAR_$类名$属性名称</code> ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。</li>\n<li>setter 与 getter 方法对应的实现函数</li>\n<li><code>ivar_list</code> ：成员变量列表</li>\n<li><code>method_list</code> ：方法列表</li>\n<li><code>prop_list</code> ：属性列表</li>\n</ol>\n<p>也就是说我们每次在增加一个属性,系统都会在 <code>ivar_list</code> 中添加一个成员变量的描述,在 <code>method_list</code> 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.</p>\n<h3 id=\"7-protocol-和-category-中如何使用-property\"><a href=\"#7-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"7. @protocol 和 category 中如何使用 @property\"></a>7. @protocol 和 category 中如何使用 @property</h3><ol>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li><p>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：</p>\n<ol>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"8-runtime-如何实现-weak-属性\"><a href=\"#8-runtime-如何实现-weak-属性\" class=\"headerlink\" title=\"8. runtime 如何实现 weak 属性\"></a>8. runtime 如何实现 weak 属性</h3><p>要实现 weak 属性，首先要搞清楚 weak 属性的特点：</p>\n<blockquote>\n<p>weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同 assign 类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n</blockquote>\n<p>那么 runtime 如何实现 weak 变量的自动置nil？</p>\n<blockquote>\n<p>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。</p>\n</blockquote>\n<p>（注：在下文的《使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？》里给出的“对象的内存销毁时间表”也提到<code>__weak</code>引用的解除时间。）</p>\n<p>先看下 runtime 里源码的实现：</p>\n<pre><code class=\"objectivec\">/**\n * The internal structure stored in the weak references table. \n * It maintains and stores\n * a hash set of weak references pointing to an object.\n * If out_of_line==0, the set is instead a small inline array.\n */\n#define WEAK_INLINE_COUNT 4\nstruct weak_entry_t {\n    DisguisedPtr&lt;objc_object&gt; referent;\n    union {\n        struct {\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line : 1;\n            uintptr_t        num_refs : PTR_MINUS_1;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line=0 is LSB of one of these (don&#39;t care which)\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n};\n\n/**\n * The global weak references table. Stores object ids as keys,\n * and weak_entry_t structs as their values.\n */\nstruct weak_table_t {\n    weak_entry_t *weak_entries;\n    size_t    num_entries;\n    uintptr_t mask;\n    uintptr_t max_hash_displacement;\n};\n</code></pre>\n<p>具体完整实现参照 <a href=\"https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-weak.h\" target=\"_blank\" rel=\"external\">objc/objc-weak.h</a> 。</p>\n<p>我们可以设计一个函数（伪代码）来表示上述机制：</p>\n<p><code>objc_storeWeak(&amp;a, b)</code>函数：</p>\n<p><code>objc_storeWeak</code>函数把第二个参数–赋值对象（b）的内存地址作为键值key，将第一个参数–weak修饰的属性变量（a）的内存地址（&amp;a）作为value，注册到 weak 表中。如果第二个参数（b）为0（nil），那么把变量（a）的内存地址（&amp;a）从weak表中删除，</p>\n<p>你可以把<code>objc_storeWeak(&amp;a, b)</code>理解为：<code>objc_storeWeak(value, key)</code>，并且当key变nil，将value置nil。</p>\n<p>在b非nil时，a和b指向同一个内存地址，在b变nil时，a变nil。此时向a发送消息不会崩溃：在Objective-C中向nil发送消息是安全的。</p>\n<p>而如果a是由 assign 修饰的，则：<br>在 b 非 nil 时，a 和 b 指向同一个内存地址，在 b 变 nil 时，a 还是指向该内存地址，变野指针。此时向 a 发送消息极易崩溃。</p>\n<p>下面我们将基于<code>objc_storeWeak(&amp;a, b)</code>函数，使用伪代码模拟“runtime如何实现weak属性”：</p>\n<pre><code class=\"objectivec\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\n id obj1;\n objc_initWeak(&amp;obj1, obj);\n/*obj引用计数变为0，变量作用域结束*/\n objc_destroyWeak(&amp;obj1);\n</code></pre>\n<p>下面对用到的两个方法<code>objc_initWeak</code>和<code>objc_destroyWeak</code>做下解释：</p>\n<p>总体说来，作用是：<br>通过<code>objc_initWeak</code>函数初始化“附有weak修饰符的变量（obj1）”，在变量作用域结束时通过<code>objc_destoryWeak</code>函数释放该变量（obj1）。</p>\n<p>下面分别介绍下方法的内部实现：</p>\n<p><code>objc_initWeak</code>函数的实现是这样的：在将“附有weak修饰符的变量（obj1）”初始化为0（nil）后，会将“赋值对象”（obj）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<pre><code class=\"objectivec\">obj1 = 0；\nobj_storeWeak(&amp;obj1, obj);\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> weak 修饰的指针默认值是 nil （在Objective-C中向nil发送消息是安全的）</p>\n</blockquote>\n<p>然后<code>obj_destroyWeak</code>函数将0（nil）作为参数，调用<code>objc_storeWeak</code>函数。</p>\n<p><code>objc_storeWeak(&amp;obj1, 0);</code></p>\n<p>前面的源代码与下列源代码相同。</p>\n<pre><code class=\"objectivec\">// 使用伪代码模拟：runtime如何实现weak属性\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nid obj1;\nobj1 = 0;\nobjc_storeWeak(&amp;obj1, obj);\n/* ... obj的引用计数变为0，被置nil ... */\nobjc_storeWeak(&amp;obj1, 0);\n</code></pre>\n<p><code>objc_storeWeak</code> 函数把第二个参数–赋值对象（obj）的内存地址作为键值，将第一个参数–weak修饰的属性变量（obj1）的内存地址注册到 weak 表中。如果第二个参数（obj）为0（nil），那么把变量（obj1）的地址从 weak 表中删除，在后面的相关一题会详解。</p>\n<p>使用伪代码是为了方便理解，下面我们“真枪实弹”地实现下：</p>\n<blockquote>\n<p>如何让不使用weak修饰的@property，拥有weak的效果。</p>\n</blockquote>\n<p>我们从setter方法入手：</p>\n<p>（注意以下的 <code>cyl_runAtDealloc</code> 方法实现仅仅用于模拟原理，如果想用于项目中，还需要考虑更复杂的场景，想在实际项目使用的话，可以使用我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> ）</p>\n<pre><code class=\"objectivec\">- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, &quot;object&quot;, object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n</code></pre>\n<p>也就是有两个步骤：</p>\n<ol>\n<li>在setter方法中做如下设置：</li>\n</ol>\n<pre><code class=\"objectivec\">        objc_setAssociatedObject(self, &quot;object&quot;, object, OBJC_ASSOCIATION_ASSIGN);\n</code></pre>\n<ol>\n<li><p>在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。做到这点，同样要借助 runtime：</p>\n<pre><code class=\"objectivec\">//要销毁的目标对象\nid objectToBeDeallocated;\n//可以理解为一个“事件”：当上面的目标对象销毁时，同时要发生的“事件”。\nid objectWeWantToBeReleasedWhenThatHappens;\nobjc_setAssociatedObject(objectToBeDeallocted,\n                     someUniqueKey,\n                     objectWeWantToBeReleasedWhenThatHappens,\n                     OBJC_ASSOCIATION_RETAIN);\n</code></pre>\n</li>\n</ol>\n<p>知道了思路，我们就开始实现 <code>cyl_runAtDealloc</code> 方法，实现过程分两部分：</p>\n<p>第一部分：创建一个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助 block 执行“事件”。</p>\n<p>// .h文件</p>\n<pre><code class=\"objectivec\">// .h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\ntypedef void (^voidBlock)(void);\n\n@interface CYLBlockExecutor : NSObject\n\n- (id)initWithBlock:(voidBlock)block;\n\n@end\n</code></pre>\n<p>// .m文件</p>\n<pre><code class=\"objectivec\">// .m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 这个类，可以理解为一个“事件”：当目标对象销毁时，同时要发生的“事件”。借助block执行“事件”。\n\n#import &quot;CYLBlockExecutor.h&quot;\n\n@interface CYLBlockExecutor() {\n    voidBlock _block;\n}\n@implementation CYLBlockExecutor\n\n- (id)initWithBlock:(voidBlock)aBlock\n{\n    self = [super init];\n\n    if (self) {\n        _block = [aBlock copy];\n    }\n\n    return self;\n}\n\n- (void)dealloc\n{\n    _block ? _block() : nil;\n}\n\n@end\n</code></pre>\n<p>第二部分：核心代码：利用runtime实现<code>cyl_runAtDealloc</code>方法</p>\n<pre><code class=\"objectivec\">// CYLNSObject+RunAtDealloc.h文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import &quot;CYLBlockExecutor.h&quot;\n\nconst void *runAtDeallocBlockKey = &amp;runAtDeallocBlockKey;\n\n@interface NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block;\n\n@end\n\n\n// CYLNSObject+RunAtDealloc.m文件\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n// 利用runtime实现cyl_runAtDealloc方法\n\n#import &quot;CYLNSObject+RunAtDealloc.h&quot;\n#import &quot;CYLBlockExecutor.h&quot;\n\n@implementation NSObject (CYLRunAtDealloc)\n\n- (void)cyl_runAtDealloc:(voidBlock)block\n{\n    if (block) {\n        CYLBlockExecutor *executor = [[CYLBlockExecutor alloc] initWithBlock:block];\n\n        objc_setAssociatedObject(self,\n                                 runAtDeallocBlockKey,\n                                 executor,\n                                 OBJC_ASSOCIATION_RETAIN);\n    }\n}\n\n@end\n</code></pre>\n<p>使用方法：<br>导入</p>\n<pre><code class=\"objectivec\">    #import &quot;CYLNSObject+RunAtDealloc.h&quot;\n</code></pre>\n<p>然后就可以使用了：</p>\n<pre><code class=\"objectivec\">NSObject *foo = [[NSObject alloc] init];\n\n[foo cyl_runAtDealloc:^{\n    NSLog(@&quot;正在释放foo!&quot;);\n}];\n</code></pre>\n<p>如果对 <code>cyl_runAtDealloc</code> 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> </p>\n<p>参考博文： <a href=\"http://stackoverflow.com/a/31560217/3395008\" target=\"_blank\" rel=\"external\"><strong><em>Fun With the Objective-C Runtime: Run Code at Deallocation of Any Object</em></strong></a></p>\n<h3 id=\"9-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#9-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>9. @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h3><p>属性可以拥有的特质分为四类:</p>\n<ol>\n<li><p>原子性— <code>nonatomic</code> 特质</p>\n<p>在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。</p>\n</li>\n<li><p>读/写权限—<code>readwrite(读写)</code>、<code>readonly (只读)</code></p>\n</li>\n<li>内存管理语义—<code>assign</code>、<code>strong</code>、 <code>weak</code>、<code>unsafe_unretained</code>、<code>copy</code></li>\n<li><p>方法名—<code>getter=&lt;name&gt;</code> 、<code>setter=&lt;name&gt;</code></p>\n<p><code>getter=&lt;name&gt;</code>的样式：</p>\n</li>\n</ol>\n<pre><code class=\"objectivec\">        @property (nonatomic, getter=isOn) BOOL on;\n</code></pre>\n <p><del>（ <code>setter=&lt;name&gt;</code>这种不常用，也不推荐使用。故不在这里给出写法。）<br></del></p>\n\n\n<p> <code>setter=&lt;name&gt;</code>一般用在特殊的情境下，比如：</p>\n<p>在数据反序列化、转模型的过程中，服务器返回的字段如果以 <code>init</code> 开头，所以你需要定义一个 <code>init</code> 开头的属性，但默认生成的 <code>setter</code> 与 <code>getter</code> 方法也会以 <code>init</code> 开头，而编译器会把所有以 <code>init</code> 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。</p>\n<p>这时你就可以使用下面的方式来避免编译器报错：</p>\n<pre><code class=\"objectivec\">@property(nonatomic, strong, getter=p_initBy, setter=setP_initBy:)NSString *initBy;\n</code></pre>\n<p>另外也可以用关键字进行特殊说明，来避免编译器报错：</p>\n<pre><code class=\"objectivec\">@property(nonatomic, readwrite, copy, null_resettable) NSString *initBy;\n- (NSString *)initBy __attribute__((objc_method_family(none)));\n</code></pre>\n<ol>\n<li>不常用的：<code>nonnull</code>,<code>null_resettable</code>,<code>nullable</code></li>\n</ol>\n<p>注意：很多人会认为如果属性具备 nonatomic 特质，则不使用<br>“同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：</p>\n<pre><code class=\"objectivec\">static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)\n{\n    if (offset == 0) {\n        object_setClass(self, newValue);\n        return;\n    }\n\n    id oldValue;\n    id *slot = (id*) ((char*)self + offset);\n\n    if (copy) {\n        newValue = [newValue copyWithZone:nil];\n    } else if (mutableCopy) {\n        newValue = [newValue mutableCopyWithZone:nil];\n    } else {\n        if (*slot == newValue) return;\n        newValue = objc_retain(newValue);\n    }\n\n    if (!atomic) {\n        oldValue = *slot;\n        *slot = newValue;\n    } else {\n        spinlock_t&amp; slotlock = PropertyLocks[slot];\n        slotlock.lock();\n        oldValue = *slot;\n        *slot = newValue;        \n        slotlock.unlock();\n    }\n\n    objc_release(oldValue);\n}\n\nvoid objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) \n{\n    bool copy = (shouldCopy &amp;&amp; shouldCopy != MUTABLE_COPY);\n    bool mutableCopy = (shouldCopy == MUTABLE_COPY);\n    reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);\n}\n</code></pre>\n<h3 id=\"10-weak属性需要在dealloc中置nil么？\"><a href=\"#10-weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"10. weak属性需要在dealloc中置nil么？\"></a>10. weak属性需要在dealloc中置nil么？</h3><p>不需要。</p>\n<blockquote>\n<p>在ARC环境无论是强指针还是弱指针都无需在 dealloc 设置为 nil ， ARC 会自动帮我们处理</p>\n</blockquote>\n<p>即便是编译器不帮我们做这些，weak也不需要在 dealloc 中置nil：</p>\n<p>正如上文的：<strong><em>runtime 如何实现 weak 属性</em></strong> 中提到的：</p>\n<p>我们模拟下 weak 的 setter 方法，应该如下：</p>\n<pre><code class=\"objectivec\">- (void)setObject:(NSObject *)object\n{\n    objc_setAssociatedObject(self, &quot;object&quot;, object, OBJC_ASSOCIATION_ASSIGN);\n    [object cyl_runAtDealloc:^{\n        _object = nil;\n    }];\n}\n</code></pre>\n<p>如果对 <code>cyl_runAtDealloc</code> 的实现原理有兴趣，可以看下我写的一个小库，可以使用 CocoaPods 在项目中使用： <a href=\"https://github.com/ChenYilong/CYLDeallocBlockExecutor\" target=\"_blank\" rel=\"external\">CYLDeallocBlockExecutor</a> </p>\n<p>也即:</p>\n<blockquote>\n<p>在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n</blockquote>\n<h3 id=\"11-synthesize和-dynamic分别有什么作用？\"><a href=\"#11-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"11. @synthesize和@dynamic分别有什么作用？\"></a>11. @synthesize和@dynamic分别有什么作用？</h3><ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n<h3 id=\"12-ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"><a href=\"#12-ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\" class=\"headerlink\" title=\"12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"></a>12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</h3><ol>\n<li><p>对应基本数据类型默认关键字是</p>\n<p>atomic,readwrite,assign</p>\n</li>\n<li><p>对于普通的 Objective-C 对象</p>\n<p>atomic,readwrite,strong</p>\n</li>\n</ol>\n<p>参考链接：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/a/15541801/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>Objective-C ARC: strong vs retain and weak vs assign</em></strong> </a></p>\n</li>\n<li><p><a href=\"http://rdcworld-iphone.blogspot.in/2012/12/variable-property-attributes-or.html\" target=\"_blank\" rel=\"external\"> <strong><em>Variable property attributes or Modifiers in iOS</em></strong> </a></p>\n</li>\n</ol>\n<h3 id=\"13-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#13-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h3><ol>\n<li>因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.</li>\n<li><p>如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</p>\n<p>copy 此特质所表达的所属关系与 strong 类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。<br>当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。</p>\n</li>\n</ol>\n<p>举例说明：</p>\n<p>定义一个以 strong 修饰的 array：</p>\n<pre><code class=\"objectivec\">@property (nonatomic ,readwrite, strong) NSArray *array;\n</code></pre>\n<p>然后进行下面的操作：</p>\n<pre><code class=\"objectivec\">    NSMutableArray *mutableArray = [[NSMutableArray alloc] init];\n    NSArray *array = @[ @1, @2, @3, @4 ];\n    self.array = mutableArray;\n    [mutableArray removeAllObjects];;\n    NSLog(@&quot;%@&quot;,self.array);\n\n    [mutableArray addObjectsFromArray:array];\n    self.array = [mutableArray copy];\n    [mutableArray removeAllObjects];;\n    NSLog(@&quot;%@&quot;,self.array);\n</code></pre>\n<p>打印结果如下所示：</p>\n<pre><code class=\"objectivec\">2015-09-27 19:10:32.523 CYLArrayCopyDmo[10681:713670] (\n)\n2015-09-27 19:10:32.524 CYLArrayCopyDmo[10681:713670] (\n    1,\n    2,\n    3,\n    4\n)\n</code></pre>\n<p>（详见仓库内附录的 Demo。）</p>\n<p>为了理解这种做法，首先要知道，两种情况：</p>\n<ol>\n<li>对非集合类对象的 copy 与 mutableCopy 操作；</li>\n<li>对集合类对象的 copy 与 mutableCopy 操作。</li>\n</ol>\n<h4 id=\"1-对非集合类对象的copy操作：\"><a href=\"#1-对非集合类对象的copy操作：\" class=\"headerlink\" title=\"1. 对非集合类对象的copy操作：\"></a>1. 对非集合类对象的copy操作：</h4><p>在非集合类对象中：对 immutable 对象进行 copy 操作，是指针复制，mutableCopy 操作时内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。用代码简单表示如下：</p>\n<ul>\n<li>[immutableObject copy] // 浅复制</li>\n<li>[immutableObject mutableCopy] //深复制</li>\n<li>[mutableObject copy] //深复制</li>\n<li>[mutableObject mutableCopy] //深复制</li>\n</ul>\n<p>比如以下代码：</p>\n<pre><code class=\"objectivec\">NSMutableString *string = [NSMutableString stringWithString:@&quot;origin&quot;];//copy\nNSString *stringCopy = [string copy];\n</code></pre>\n<p>查看内存，会发现 string、stringCopy 内存地址都不一样，说明此时都是做内容拷贝、深拷贝。即使你进行如下操作：</p>\n<pre><code class=\"objectivec\">[string appendString:@&quot;origion!&quot;]\n</code></pre>\n<p>stringCopy 的值也不会因此改变，但是如果不使用 copy，stringCopy 的值就会被改变。<br>  集合类对象以此类推。<br>所以，</p>\n<blockquote>\n<p>用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。</p>\n</blockquote>\n<h4 id=\"2、集合类对象的copy与mutableCopy\"><a href=\"#2、集合类对象的copy与mutableCopy\" class=\"headerlink\" title=\"2、集合类对象的copy与mutableCopy\"></a>2、集合类对象的copy与mutableCopy</h4><p>集合类对象是指 NSArray、NSDictionary、NSSet … 之类的对象。下面先看集合类immutable对象使用 copy 和 mutableCopy 的一个例子：</p>\n<pre><code class=\"objectivec\">NSArray *array = @[@[@&quot;a&quot;, @&quot;b&quot;], @[@&quot;c&quot;, @&quot;d&quot;]];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n</code></pre>\n<p>查看内容，可以看到 copyArray 和 array 的地址是一样的，而 mCopyArray 和 array 的地址是不同的。说明 copy 操作进行了指针拷贝，mutableCopy 进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝 array 这个对象，array 集合内部的元素仍然是指针拷贝。这和上面的非集合 immutable 对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看 mutable 对象拷贝的例子：</p>\n<pre><code class=\"objectivec\">NSMutableArray *array = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;a&quot;],@&quot;b&quot;,@&quot;c&quot;,nil];\nNSArray *copyArray = [array copy];\nNSMutableArray *mCopyArray = [array mutableCopy];\n</code></pre>\n<p>查看内存，如我们所料，copyArray、mCopyArray和 array 的内存地址都不一样，说明 copyArray、mCopyArray 都对 array 进行了内容拷贝。同样，我们可以得出结论：</p>\n<p>在集合类对象中，对 immutable 对象进行 copy，是指针复制， mutableCopy 是内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下：</p>\n<pre><code class=\"objectivec\">[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //单层深复制\n[mutableObject copy] //单层深复制\n[mutableObject mutableCopy] //单层深复制\n</code></pre>\n<p>这个代码结论和非集合类的非常相似。</p>\n<p>参考链接：<a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"external\">iOS 集合的深复制与浅复制</a></p>\n<h3 id=\"14-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\"><a href=\"#14-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\" class=\"headerlink\" title=\"14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\"></a>14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为<code>_foo</code>的实例变量，那么还会自动合成新变量么？</h3><p>在回答之前先说明下一个概念：</p>\n<blockquote>\n<p>实例变量 = 成员变量 ＝ ivar</p>\n</blockquote>\n<p>这些说法，笔者下文中，可能都会用到，指的是一个东西。</p>\n<p>正如<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW6\" target=\"_blank\" rel=\"external\">Apple官方文档 <strong><em>You Can Customize Synthesized Instance Variable Names</em></strong></a> 所说：<br><img src=\"http://i.imgur.com/D6d0zGJ.png\" alt=\"enter image description here\"></p>\n<p>如果使用了属性的话，那么编译器就会自动编写访问属性所需的方法，此过程叫做“自动合成”( auto synthesis)。需要强调的是，这个过程由编译器在编译期执行，所以编辑器里看不到这些“合成方法” (synthesized method)的源代码。除了生成方法代码之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。</p>\n<pre><code class=\"objectivec\">@interface CYLPerson : NSObject \n@property NSString *firstName; \n@property NSString *lastName; \n@end\n</code></pre>\n<p>在上例中，会生成两个实例变量，其名称分别为<br> <code>_firstName</code> 与 <code>_lastName</code>。也可以在类的实现代码里通过 <code>@synthesize</code> 语法来指定实例变量的名字:</p>\n<pre><code class=\"objectivec\">@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end\n</code></pre>\n<p>上述语法会将生成的实例变量命名为 <code>_myFirstName</code> 与 <code>_myLastName</code> ，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。</p>\n<p>总结下 @synthesize 合成实例变量的规则，有以下几点：</p>\n<ol>\n<li><p>如果指定了成员变量的名称,会生成一个指定的名称的成员变量,</p>\n</li>\n<li><p>如果这个成员已经存在了就不再生成了.</p>\n</li>\n<li><p>如果是 <code>@synthesize foo;</code> 还会生成一个名称为foo的成员变量，也就是说：</p>\n<blockquote>\n<p>如果没有指定成员变量的名称会自动生成一个属性同名的成员变量,</p>\n</blockquote>\n</li>\n</ol>\n<ol>\n<li>如果是 <code>@synthesize foo = _foo;</code> 就不会生成成员变量了.</li>\n</ol>\n<p>假如 property 名为 foo，存在一个名为 <code>_foo</code> 的实例变量，那么还会自动合成新变量么？<br>不会。如下图：</p>\n<p><img src=\"http://i.imgur.com/t28ge4W.png\" alt=\"enter image description here\"></p>\n<h3 id=\"15-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\"><a href=\"#15-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\" class=\"headerlink\" title=\"15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\"></a>15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</h3><p>回答这个问题前，我们要搞清楚一个问题，什么情况下不会autosynthesis（自动合成）？</p>\n<ol>\n<li>同时重写了 setter 和 getter 时</li>\n<li>重写了只读属性的 getter 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li><p>重载的属性 </p>\n<p>当你在子类中重载了父类中的属性，你必须 使用 <code>@synthesize</code> 来手动合成ivar。</p>\n</li>\n</ol>\n<p>除了后三条，对其他几个我们可以总结出一个规律：当你想手动管理 @property 的所有内容时，你就会尝试通过实现 @property 的所有“存取方法”（the accessor methods）或者使用 <code>@dynamic</code> 来达到这个目的，这时编译器就会认为你打算手动管理 @property，于是编译器就禁用了 autosynthesis（自动合成）。</p>\n<p>因为有了 autosynthesis（自动合成），大部分开发者已经习惯不去手动定义ivar，而是依赖于 autosynthesis（自动合成），但是一旦你需要使用ivar，而 autosynthesis（自动合成）又失效了，如果不去手动定义ivar，那么你就得借助 <code>@synthesize</code> 来手动合成 ivar。</p>\n<p>其实，<code>@synthesize</code> 语法还有一个应用场景，但是不太建议大家使用：</p>\n<p>可以在类的实现代码里通过 <code>@synthesize</code> 语法来指定实例变量的名字:</p>\n<pre><code class=\"objectivec\">@implementation CYLPerson \n@synthesize firstName = _myFirstName; \n@synthesize lastName = _myLastName; \n@end\n</code></pre>\n<p>上述语法会将生成的实例变量命名为 <code>_myFirstName</code> 与 <code>_myLastName</code>，而不再使用默认的名字。一般情况下无须修改默认的实例变量名，但是如果你不喜欢以下划线来命名实例变量，那么可以用这个办法将其改为自己想要的名字。笔者还是推荐使用默认的命名方案，因为如果所有人都坚持这套方案，那么写出来的代码大家都能看得懂。</p>\n<p>举例说明：应用场景：</p>\n<pre><code class=\"objectivec\">\n//\n// .m文件\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 打开第14行和第17行中任意一行，就可编译成功\n\n@import Foundation;\n\n@interface CYLObject : NSObject\n@property (nonatomic, copy) NSString *title;\n@end\n\n@implementation CYLObject {\n    //    NSString *_title;\n}\n\n//@synthesize title = _title;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        _title = @&quot;微博@iOS程序犭袁&quot;;\n    }\n    return self;\n}\n\n- (NSString *)title {\n    return _title;\n}\n\n- (void)setTitle:(NSString *)title {\n    _title = [title copy];\n}\n\n@end\n</code></pre>\n<p>结果编译器报错：<br><img src=\"http://i.imgur.com/fAEGHIo.png\" alt=\"enter image description here\"></p>\n<p>当你同时重写了 setter 和 getter 时，系统就不会生成 ivar（实例变量/成员变量）。这时候有两种选择：</p>\n<ol>\n<li>要么如第14行：手动创建 ivar</li>\n<li>要么如第17行：使用<code>@synthesize foo = _foo;</code> ，关联 @property 与 ivar。</li>\n</ol>\n<p>更多信息，请戳- 》<a href=\"http://stackoverflow.com/a/19821816/3395008\" target=\"_blank\" rel=\"external\"> <strong><em>When should I use @synthesize explicitly?</em></strong> </a></p>\n<h3 id=\"16-objc中向一个nil对象发送消息将会发生什么？\"><a href=\"#16-objc中向一个nil对象发送消息将会发生什么？\" class=\"headerlink\" title=\"16. objc中向一个nil对象发送消息将会发生什么？\"></a>16. objc中向一个nil对象发送消息将会发生什么？</h3><p>在 Objective-C 中向 nil 发送消息是完全有效的——只是在运行时不会有任何作用:</p>\n<ol>\n<li>如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)。例如：  </li>\n</ol>\n<pre><code class=\"objectivec\">Person * motherInlaw = [[aPerson spouse] mother];\n</code></pre>\n<p> 如果 spouse 对象为 nil，那么发送给 nil 的消息 mother 也将返回 nil。</p>\n<ol>\n<li>如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者 long long 的整型标量，发送给 nil 的消息将返回0。</li>\n<li>如果方法返回值为结构体,发送给 nil 的消息将返回0。结构体中各个字段的值将都是0。</li>\n<li>如果方法的返回值不是上述提到的几种情况，那么发送给 nil 的消息的返回值将是未定义的。</li>\n</ol>\n<p>具体原因如下：</p>\n<blockquote>\n<p>objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。</p>\n</blockquote>\n<p>那么，为了方便理解这个内容，还是贴一个objc的源代码：</p>\n<pre><code class=\"objectivec\">// runtime.h（类在runtime中的定义）\n// http://weibo.com/luohanchenyilong/\n// https://github.com/ChenYilong\n\nstruct objc_class {\n  Class isa OBJC_ISA_AVAILABILITY; //isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object\n  #if !__OBJC2__\n  Class super_class OBJC2_UNAVAILABLE; // 父类\n  const char *name OBJC2_UNAVAILABLE; // 类名\n  long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0\n  long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识\n  long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小\n  struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表\n  struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表\n  struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。\n  struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表\n  #endif\n  } OBJC2_UNAVAILABLE;\n</code></pre>\n<p>objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。<br>那么，回到本题，如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误。</p>\n<h3 id=\"17-objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？\"><a href=\"#17-objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？\" class=\"headerlink\" title=\"17. objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？\"></a>17. objc中向一个对象发送消息[obj foo]和<code>objc_msgSend()</code>函数之间有什么关系？</h3><p>具体原因同上题：该方法编译之后就是<code>objc_msgSend()</code>函数调用.</p>\n<p>我们用 clang 分析下，clang 提供一个命令，可以将Objective-C的源码改写成C++语言，借此可以研究下[obj foo]和<code>objc_msgSend()</code>函数之间有什么关系。</p>\n<p>以下面的代码为例，由于 clang 后的代码达到了10万多行，为了便于区分，添加了一个叫 iOSinit 方法，</p>\n<pre><code class=\"objectivec\">//\n//  main.m\n//  http://weibo.com/luohanchenyilong/\n//  https://github.com/ChenYilong\n//  Copyright (c) 2015年 微博@iOS程序犭袁. All rights reserved.\n//\n\n\n#import &quot;CYLTest.h&quot;\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        CYLTest *test = [[CYLTest alloc] init];\n        [test performSelector:(@selector(iOSinit))];\n        return 0;\n    }\n}\n</code></pre>\n<p>在终端中输入</p>\n<pre><code class=\"objectivec\">clang -rewrite-objc main.m\n</code></pre>\n<p>就可以生成一个<code>main.cpp</code>的文件，在最低端（10万4千行左右）</p>\n<p><img src=\"http://i.imgur.com/eAH5YWn.png\" alt=\"enter image description here\"></p>\n<p>我们可以看到大概是这样的：</p>\n<pre><code class=\"objectivec\">((void ()(id, SEL))(void )objc_msgSend)((id)obj, sel_registerName(&quot;foo&quot;));\n</code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p> [obj foo];在objc动态编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h3 id=\"18-什么时候会报unrecognized-selector的异常？\"><a href=\"#18-什么时候会报unrecognized-selector的异常？\" class=\"headerlink\" title=\"18. 什么时候会报unrecognized selector的异常？\"></a>18. 什么时候会报unrecognized selector的异常？</h3><p>简单来说：</p>\n<blockquote>\n<p>当调用该对象上某个方法,而该对象上没有实现这个方法的时候，<br>可以通过“消息转发”进行解决。</p>\n</blockquote>\n<p>简单的流程如下，在上一题中也提到过：</p>\n<blockquote>\n<p>objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。</p>\n</blockquote>\n<p>objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：</p>\n<ol>\n<li><p>Method resolution</p>\n<p>objc运行时会调用<code>+resolveInstanceMethod:</code>或者 <code>+resolveClassMethod:</code>，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。</p>\n</li>\n<li><p>Fast forwarding</p>\n<p>如果目标对象实现了<code>-forwardingTargetForSelector:</code>，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。<br>只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。<br>这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。</p>\n</li>\n<li><p>Normal forwarding</p>\n<p>这一步是Runtime最后一次给你挽救的机会。首先它会发送<code>-methodSignatureForSelector:</code>消息获得函数的参数和返回值类型。如果<code>-methodSignatureForSelector:</code>返回nil，Runtime则会发出<code>-doesNotRecognizeSelector:</code>消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送<code>-forwardInvocation:</code>消息给目标对象。</p>\n</li>\n</ol>\n<p>为了能更清晰地理解这些方法的作用，git仓库里也给出了一个Demo，名称叫“ <code>_objc_msgForward_demo</code> ”,可运行起来看看。</p>\n<h3 id=\"19-一个objc对象如何进行内存布局？（考虑有父类的情况）\"><a href=\"#19-一个objc对象如何进行内存布局？（考虑有父类的情况）\" class=\"headerlink\" title=\"19. 一个objc对象如何进行内存布局？（考虑有父类的情况）\"></a>19. 一个objc对象如何进行内存布局？（考虑有父类的情况）</h3><ul>\n<li>所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中.</li>\n<li>每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的</li>\n</ul>\n<ol>\n<li>对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）</li>\n<li>成员变量的列表,</li>\n<li><p>属性列表,</p>\n<p>它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。</p>\n</li>\n</ol>\n<p>每个 Objective-C 对象都有相同的结构，如下图所示：</p>\n<p> <img src=\"http://i.imgur.com/7mJlUj1.png\" alt=\"enter image description here\"></p>\n<p>翻译过来就是</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Objective-C 对象的结构图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> ISA指针</td>\n<td></td>\n</tr>\n<tr>\n<td> 根类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> 倒数第二层父类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> …</td>\n<td></td>\n</tr>\n<tr>\n<td> 父类的实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td> 类的实例变量</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>根对象就是NSObject，它的superclass指针指向nil</p>\n</li>\n<li><p>类对象既然称为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类(meta class)，即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。</p>\n</li>\n</ul>\n<p>如图:<br><img src=\"http://i.imgur.com/w6tzFxz.png\" alt=\"enter image description here\"></p>\n<h3 id=\"20-一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#20-一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"20. 一个objc对象的isa的指针指向什么？有什么作用？\"></a>20. 一个objc对象的isa的指针指向什么？有什么作用？</h3><p>指向他的类对象,从而可以找到对象上的方法</p>\n<h3 id=\"21-下面的代码输出什么？\"><a href=\"#21-下面的代码输出什么？\" class=\"headerlink\" title=\"21. 下面的代码输出什么？\"></a>21. 下面的代码输出什么？</h3><pre><code class=\"objectivec\">    @implementation Son : Father\n    - (id)init\n    {\n        self = [super init];\n        if (self) {\n            NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));\n            NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));\n        }\n        return self;\n    }\n    @end\n</code></pre>\n<p><strong>答案：</strong></p>\n<p>都输出 Son</p>\n<pre><code>NSStringFromClass([self class]) = Son\nNSStringFromClass([super class]) = Son\n</code></pre><p>这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。</p>\n<p>我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？</p>\n<p>很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n<p>上面的例子不管调用<code>[self class]</code>还是<code>[super class]</code>，接受消息的对象都是当前 <code>Son ＊xxx</code> 这个对象。</p>\n<p>当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p>\n<p>这也就是为什么说“不推荐在 init 方法中使用点语法”，如果想访问实例变量 iVar 应该使用下划线（ <code>_iVar</code> ），而非点语法（ <code>self.iVar</code> ）。</p>\n<p>点语法（ <code>self.iVar</code> ）的坏处就是子类有可能覆写 setter 。假设 Person 有一个子类叫 ChenPerson，这个子类专门表示那些姓“陈”的人。该子类可能会覆写 lastName 属性所对应的设置方法：</p>\n<pre><code class=\"objectivec\">//\n//  ChenPerson.m\n//  \n//\n//  Created by https://github.com/ChenYilong on 15/8/30.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//\n\n#import &quot;ChenPerson.h&quot;\n\n@implementation ChenPerson\n\n@synthesize lastName = _lastName;\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([super class]));\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    //设置方法一：如果setter采用是这种方式，就可能引起崩溃\n//    if (![lastName isEqualToString:@&quot;陈&quot;])\n//    {\n//        [NSException raise:NSInvalidArgumentException format:@&quot;姓不是陈&quot;];\n//    }\n//    _lastName = lastName;\n\n    //设置方法二：如果setter采用是这种方式，就可能引起崩溃\n    _lastName = @&quot;陈&quot;;\n    NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, @&quot;会调用这个方法,想一下为什么？&quot;);\n\n}\n\n@end\n</code></pre>\n<p>在基类 Person 的默认初始化方法中，可能会将姓氏设为空字符串。此时若使用点语法（ <code>self.lastName</code> ）也即 setter 设置方法，那么调用将会是子类的设置方法，如果在刚刚的 setter 代码中采用设置方法一，那么就会抛出异常，</p>\n<p>为了方便采用打印的方式展示，究竟发生了什么，我们使用设置方法二。</p>\n<p>如果基类的代码是这样的：</p>\n<pre><code class=\"objectivec\">//\n//  Person.m\n//  nil对象调用点语法\n//\n//  Created by https://github.com/ChenYilong on 15/8/29.\n//  Copyright (c) 2015年 http://weibo.com/luohanchenyilong/ 微博@iOS程序犭袁. All rights reserved.\n//  \n\n#import &quot;Person.h&quot;\n\n@implementation Person\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        self.lastName = @&quot;&quot;;\n        //NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, NSStringFromClass([self class]));\n        //NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, self.lastName);\n    }\n    return self;\n}\n\n- (void)setLastName:(NSString*)lastName\n{\n    NSLog(@&quot;🔴类名与方法名：%s（在第%d行），描述：%@&quot;, __PRETTY_FUNCTION__, __LINE__, @&quot;根本不会调用这个方法&quot;);\n    _lastName = @&quot;炎黄&quot;;\n}\n\n@end\n</code></pre>\n<p>那么打印结果将会是这样的：</p>\n<pre><code class=\"objectivec\"> 🔴类名与方法名：-[ChenPerson setLastName:]（在第36行），描述：会调用这个方法,想一下为什么？\n 🔴类名与方法名：-[ChenPerson init]（在第19行），描述：ChenPerson\n 🔴类名与方法名：-[ChenPerson init]（在第20行），描述：ChenPerson\n</code></pre>\n<p>我在仓库里也给出了一个相应的 Demo（名字叫：Demo<em>21题</em>下面的代码输出什么）。有兴趣可以跑起来看一下，主要看下他是怎么打印的，思考下为什么这么打印。</p>\n<p>接下来让我们利用 runtime 的相关知识来验证一下 super 关键字的本质，使用clang重写命令:</p>\n<pre><code class=\"objectivec\">    $ clang -rewrite-objc test.m\n</code></pre>\n<p>将这道题目中给出的代码被转化为:</p>\n<pre><code class=\"objectivec\">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;class&quot;))));\n\n    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super){ (id)self, (id)class_getSuperclass(objc_getClass(&quot;Son&quot;)) }, sel_registerName(&quot;class&quot;))));\n</code></pre>\n<p>从上面的代码中，我们可以发现在调用 [self class] 时，会转化成 <code>objc_msgSend</code>函数。看下函数定义：</p>\n<pre><code class=\"objectivec\">    id objc_msgSend(id self, SEL op, ...)\n</code></pre>\n<p>我们把 self 做为第一个参数传递进去。</p>\n<p>而在调用 [super class]时，会转化成 <code>objc_msgSendSuper</code>函数。看下函数定义:</p>\n<pre><code class=\"objectivec\">    id objc_msgSendSuper(struct objc_super *super, SEL op, ...)\n</code></pre>\n<p>第一个参数是 <code>objc_super</code> 这样一个结构体，其定义如下:</p>\n<pre><code class=\"objectivec\">struct objc_super {\n       __unsafe_unretained id receiver;\n       __unsafe_unretained Class super_class;\n};\n</code></pre>\n<p>结构体有两个成员，第一个成员是 receiver, 类似于上面的 <code>objc_msgSend</code>函数第一个参数self 。第二个成员是记录当前类的父类是什么。</p>\n<p>所以，当调用 ［self class] 时，实际先调用的是 <code>objc_msgSend</code>函数，第一个参数是 Son当前的这个实例，然后在 Son 这个类里面去找 - (Class)class这个方法，没有，去父类 Father里找，也没有，最后在 NSObject类中发现这个方法。而 - (Class)class的实现就是返回self的类别，故上述输出结果为 Son。</p>\n<p>objc Runtime开源代码对- (Class)class方法的实现:</p>\n<pre><code class=\"objectivec\">- (Class)class {\n    return object_getClass(self);\n}\n</code></pre>\n<p>而当调用 <code>[super class]</code>时，会转换成<code>objc_msgSendSuper函数</code>。第一步先构造 <code>objc_super</code> 结构体，结构体第一个成员就是 <code>self</code> 。<br>第二个成员是 <code>(id)class_getSuperclass(objc_getClass(“Son”))</code> , 实际该函数输出结果为 Father。</p>\n<p>第二步是去 Father这个类里去找 <code>- (Class)class</code>，没有，然后去NSObject类去找，找到了。最后内部是使用 <code>objc_msgSend(objc_super-&gt;receiver, @selector(class))</code>去调用，</p>\n<p>此时已经和<code>[self class]</code>调用相同了，故上述输出结果仍然返回 Son。</p>\n<p>参考链接：<a href=\"http://weibo.com/junbbcom\" target=\"_blank\" rel=\"external\">微博@Chun_iOS</a>的博文<a href=\"http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(1\" target=\"_blank\" rel=\"external\">刨根问底Objective－C Runtime（1）－ Self &amp; Super</a>%5Bnil%5D-self-and-super/)</p>\n<h3 id=\"22-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#22-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h3><p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.</p>\n<h3 id=\"23-使用runtime-Associate方法关联的对象，需要在主对象dealloc的时候释放么？\"><a href=\"#23-使用runtime-Associate方法关联的对象，需要在主对象dealloc的时候释放么？\" class=\"headerlink\" title=\"23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\"></a>23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？</h3><ul>\n<li>在ARC下不需要。</li>\n<li><p><del> 在MRC中,对于使用retain或copy策略的需要 。</del></p>在MRC下也不需要</li>\n</ul>\n<blockquote>\n<p>无论在MRC下还是ARC下均不需要。</p>\n</blockquote>\n<p><a href=\"https://web.archive.org/web/20120818164935/http://developer.apple.com/library/ios/#/web/20120820002100/http://developer.apple.com/library/ios/documentation/cocoa/conceptual/objectivec/Chapters/ocAssociativeReferences.html\" target=\"_blank\" rel=\"external\"> <strong><em>2011年版本的Apple API 官方文档 - Associative References</em></strong>  </a> 一节中有一个MRC环境下的例子：</p>\n<pre><code class=\"objectivec\">// 在MRC下，使用runtime Associate方法关联的对象，不需要在主对象dealloc的时候释放\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 摘自2011年版本的Apple API 官方文档 - Associative References \n\nstatic char overviewKey;\n\nNSArray *array =\n    [[NSArray alloc] initWithObjects:@&quot;One&quot;, @&quot;Two&quot;, @&quot;Three&quot;, nil];\n// For the purposes of illustration, use initWithFormat: to ensure\n// the string can be deallocated\nNSString *overview =\n    [[NSString alloc] initWithFormat:@&quot;%@&quot;, @&quot;First three numbers&quot;];\n\nobjc_setAssociatedObject (\n    array,\n    &amp;overviewKey,\n    overview,\n    OBJC_ASSOCIATION_RETAIN\n);\n\n[overview release];\n// (1) overview valid\n[array release];\n// (2) overview invalid\n</code></pre>\n<p>文档指出 </p>\n<blockquote>\n<p>At point 1, the string <code>overview</code> is still valid because the <code>OBJC_ASSOCIATION_RETAIN</code> policy specifies that the array retains the associated object. When the array is deallocated, however (at point 2), <code>overview</code> is released and so in this case also deallocated.</p>\n</blockquote>\n<p>我们可以看到，在<code>[array release];</code>之后，overview就会被release释放掉了。</p>\n<p>既然会被销毁，那么具体在什么时间点？</p>\n<blockquote>\n<p>根据<a href=\"https://developer.apple.com/videos/wwdc/2011/#322-video\" target=\"_blank\" rel=\"external\"> <strong><em>WWDC 2011, Session 322 (第36分22秒)</em></strong> </a>中发布的内存销毁时间表，被关联的对象在生命周期内要比对象本身释放的晚很多。它们会在被 NSObject -dealloc 调用的 object_dispose() 方法中释放。</p>\n</blockquote>\n<p>对象的内存销毁时间表，分四个步骤：</p>\n<pre><code>// 对象的内存销毁时间表\n// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)\n// https://github.com/ChenYilong\n// 根据 WWDC 2011, Session 322 (36分22秒)中发布的内存销毁时间表 \n\n 1. 调用 -release ：引用计数变为零\n     * 对象正在被销毁，生命周期即将结束.\n     * 不能再有新的 __weak 弱引用， 否则将指向 nil.\n     * 调用 [self dealloc] \n 2. 子类 调用 -dealloc\n     * 继承关系中最底层的子类 在调用 -dealloc\n     * 如果是 MRC 代码 则会手动释放实例变量们（iVars）\n     * 继承关系中每一层的父类 都在调用 -dealloc\n 3. NSObject 调 -dealloc\n     * 只做一件事：调用 Objective-C runtime 中的 object_dispose() 方法\n 4. 调用 object_dispose()\n     * 为 C++ 的实例变量们（iVars）调用 destructors \n     * 为 ARC 状态下的 实例变量们（iVars） 调用 -release \n     * 解除所有使用 runtime Associate方法关联的对象\n     * 解除所有 __weak 引用\n     * 调用 free()\n</code></pre><p>对象的内存销毁时间表：<a href=\"http://stackoverflow.com/a/10843510/3395008\" target=\"_blank\" rel=\"external\">参考链接</a>。</p>\n<h3 id=\"24-objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#24-objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"24. objc中的类方法和实例方法有什么本质区别和联系？\"></a>24. objc中的类方法和实例方法有什么本质区别和联系？</h3><p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名)</li>\n</ol>\n<h2 id=\"下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博-iOS程序犭袁\"><a href=\"#下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博-iOS程序犭袁\" class=\"headerlink\" title=\"下一篇文章将发布在这里，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注微博@iOS程序犭袁\"></a>下一篇文章将发布在<a href=\"https://github.com/ChenYilong/iOSInterviewQuestions\" target=\"_blank\" rel=\"external\">这里</a>，会对以下问题进行总结，并将本篇文章的勘误一并列出，欢迎指正！请持续关注<a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a></h2><p>@property部分主要参考<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW2\" target=\"_blank\" rel=\"external\">Apple官方文档：Properties Encapsulate an Object’s Values</a><br>runtime部分主要参考<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html\" target=\"_blank\" rel=\"external\">Apple官方文档：Declared Properties</a></p>\n<h3 id=\"25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#25-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"25. _objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>25. <code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h3><h3 id=\"26-runtime如何实现weak变量的自动置nil？\"><a href=\"#26-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"26. runtime如何实现weak变量的自动置nil？\"></a>26. runtime如何实现weak变量的自动置nil？</h3><h3 id=\"27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#27-能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h3><h3 id=\"28-runloop和线程有什么关系？\"><a href=\"#28-runloop和线程有什么关系？\" class=\"headerlink\" title=\"28. runloop和线程有什么关系？\"></a>28. runloop和线程有什么关系？</h3><h3 id=\"29-runloop的mode作用是什么？\"><a href=\"#29-runloop的mode作用是什么？\" class=\"headerlink\" title=\"29. runloop的mode作用是什么？\"></a>29. runloop的mode作用是什么？</h3><h3 id=\"30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#30-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>30. 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h3><h3 id=\"31-猜想runloop内部是如何实现的？\"><a href=\"#31-猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"31. 猜想runloop内部是如何实现的？\"></a>31. 猜想runloop内部是如何实现的？</h3><h3 id=\"32-objc使用什么机制管理对象内存？\"><a href=\"#32-objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"32. objc使用什么机制管理对象内存？\"></a>32. objc使用什么机制管理对象内存？</h3><h3 id=\"33-ARC通过什么方式帮助开发者管理内存？\"><a href=\"#33-ARC通过什么方式帮助开发者管理内存？\" class=\"headerlink\" title=\"33. ARC通过什么方式帮助开发者管理内存？\"></a>33. ARC通过什么方式帮助开发者管理内存？</h3><h3 id=\"34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"><a href=\"#34-不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\" class=\"headerlink\" title=\"34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\"></a>34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</h3><h3 id=\"35-BAD-ACCESS在什么情况下出现？\"><a href=\"#35-BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"35. BAD_ACCESS在什么情况下出现？\"></a>35. <code>BAD_ACCESS</code>在什么情况下出现？</h3><h3 id=\"36-苹果是如何实现autoreleasepool的？\"><a href=\"#36-苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"36. 苹果是如何实现autoreleasepool的？\"></a>36. 苹果是如何实现autoreleasepool的？</h3><h3 id=\"37-使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#37-使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"37. 使用block时什么情况会发生引用循环，如何解决？\"></a>37. 使用block时什么情况会发生引用循环，如何解决？</h3><h3 id=\"38-在block内如何修改block外部变量？\"><a href=\"#38-在block内如何修改block外部变量？\" class=\"headerlink\" title=\"38. 在block内如何修改block外部变量？\"></a>38. 在block内如何修改block外部变量？</h3><h3 id=\"39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#39-使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h3><h3 id=\"40-GCD的队列（dispatch-queue-t）分哪两种类型？\"><a href=\"#40-GCD的队列（dispatch-queue-t）分哪两种类型？\" class=\"headerlink\" title=\"40. GCD的队列（dispatch_queue_t）分哪两种类型？\"></a>40. GCD的队列（<code>dispatch_queue_t</code>）分哪两种类型？</h3><h3 id=\"41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#41-如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h3><h3 id=\"42-dispatch-barrier-async的作用是什么？\"><a href=\"#42-dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"42. dispatch_barrier_async的作用是什么？\"></a>42. <code>dispatch_barrier_async</code>的作用是什么？</h3><h3 id=\"43-苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#43-苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"43. 苹果为什么要废弃dispatch_get_current_queue？\"></a>43. 苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h3><h3 id=\"44-以下代码运行结果如何？\"><a href=\"#44-以下代码运行结果如何？\" class=\"headerlink\" title=\"44. 以下代码运行结果如何？\"></a>44. 以下代码运行结果如何？</h3><pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@&quot;1&quot;);\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@&quot;2&quot;);\n    });\n    NSLog(@&quot;3&quot;);\n}\n</code></pre><h3 id=\"45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#45-addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h3><h3 id=\"46-如何手动触发一个value的KVO\"><a href=\"#46-如何手动触发一个value的KVO\" class=\"headerlink\" title=\"46. 如何手动触发一个value的KVO\"></a>46. 如何手动触发一个value的KVO</h3><h3 id=\"47-若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\"><a href=\"#47-若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\" class=\"headerlink\" title=\"47. 若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\"></a>47. 若一个类有实例变量<code>NSString *_foo</code>，调用setValue:forKey:时，可以以foo还是<code>_foo</code>作为key？</h3><h3 id=\"48-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#48-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"48. KVC的keyPath中的集合运算符如何使用？\"></a>48. KVC的keyPath中的集合运算符如何使用？</h3><h3 id=\"49-KVC和KVO的keyPath一定是属性么？\"><a href=\"#49-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"49. KVC和KVO的keyPath一定是属性么？\"></a>49. KVC和KVO的keyPath一定是属性么？</h3><h3 id=\"50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#50-如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h3><h3 id=\"51-apple用什么方式实现对一个对象的KVO？\"><a href=\"#51-apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"51. apple用什么方式实现对一个对象的KVO？\"></a>51. apple用什么方式实现对一个对象的KVO？</h3><h3 id=\"52-IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#52-IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"52. IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>52. IBOutlet连出来的视图属性为什么可以被设置成weak?</h3><h3 id=\"53-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#53-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"53. IB中User Defined Runtime Attributes如何使用？\"></a>53. IB中User Defined Runtime Attributes如何使用？</h3><h3 id=\"54-如何调试BAD-ACCESS错误\"><a href=\"#54-如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"54. 如何调试BAD_ACCESS错误\"></a>54. 如何调试<code>BAD_ACCESS</code>错误</h3><h3 id=\"55-lldb（gdb）常用的调试命令？\"><a href=\"#55-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"55. lldb（gdb）常用的调试命令？\"></a>55. lldb（gdb）常用的调试命令？</h3><hr>\n<p>Posted by <a href=\"http://weibo.com/luohanchenyilong/\" target=\"_blank\" rel=\"external\">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\" rel=\"external\">Creative Commons BY-NC-ND 3.0</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj48j61ks00009quzn09dfcnh","category_id":"cj48j61l300039quzebml4awr","_id":"cj48j61li00099quzm2sdku29"},{"post_id":"cj48j61le00089quzcf67l7g8","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61ln000d9quzandfxg5k"},{"post_id":"cj48j61ky00029quzleebshte","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61lp000g9quz1kv1ya2u"},{"post_id":"cj48j61ll000c9quzurqimlfr","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61ls000i9quztego654g"},{"post_id":"cj48j61l600049quzrvl0wxig","category_id":"cj48j61lk000b9quzfew18wtr","_id":"cj48j61lv000l9quzqt1jvqjs"},{"post_id":"cj48j61l900059quz27utap0f","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61lz000o9quzmitld6ki"},{"post_id":"cj48j61lt000j9quzpzc4o8fa","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61m2000q9quz3h23k43m"},{"post_id":"cj48j61lb00069quz11gnpvls","category_id":"cj48j61lk000b9quzfew18wtr","_id":"cj48j61m3000r9quzivu4zrxy"},{"post_id":"cj48j61lx000n9quz91h4vwvh","category_id":"cj48j61ld00079quzxjk1rgki","_id":"cj48j61m4000t9quz4xts9b9g"},{"post_id":"cj48j61lj000a9quz2i5iqhrm","category_id":"cj48j61lk000b9quzfew18wtr","_id":"cj48j61m5000u9quzwbmxk1g9"},{"post_id":"cj48j61ln000e9quz02f3p2ty","category_id":"cj48j61m3000s9quzaptnvgb3","_id":"cj48j61m7000w9quz2dirc0gj"},{"post_id":"cj48j61lq000h9quzdrt1oedu","category_id":"cj48j61m5000v9quzo3a1i3hm","_id":"cj48j61m8000y9quz1dv1aokh"},{"post_id":"cj48j61lv000m9quzrqdqmoby","category_id":"cj48j61m3000s9quzaptnvgb3","_id":"cj48j61ma000z9quzixta41nd"},{"post_id":"cj48j61mx00109quzhtu140yz","category_id":"cj48j61m5000v9quzo3a1i3hm","_id":"cj48j61n100119quzknhisxj0"}],"PostTag":[],"Tag":[]}}